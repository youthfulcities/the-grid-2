"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/pngjs";
exports.ids = ["vendor-chunks/pngjs"];
exports.modules = {

/***/ "(ssr)/./node_modules/pngjs/lib/bitmapper.js":
/*!*********************************************!*\
  !*** ./node_modules/pngjs/lib/bitmapper.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nlet interlaceUtils = __webpack_require__(/*! ./interlace */ \"(ssr)/./node_modules/pngjs/lib/interlace.js\");\nlet pixelBppMapper = [\n    // 0 - dummy entry\n    function() {},\n    // 1 - L\n    // 0: 0, 1: 0, 2: 0, 3: 0xff\n    function(pxData, data, pxPos, rawPos) {\n        if (rawPos === data.length) {\n            throw new Error(\"Ran out of data\");\n        }\n        let pixel = data[rawPos];\n        pxData[pxPos] = pixel;\n        pxData[pxPos + 1] = pixel;\n        pxData[pxPos + 2] = pixel;\n        pxData[pxPos + 3] = 0xff;\n    },\n    // 2 - LA\n    // 0: 0, 1: 0, 2: 0, 3: 1\n    function(pxData, data, pxPos, rawPos) {\n        if (rawPos + 1 >= data.length) {\n            throw new Error(\"Ran out of data\");\n        }\n        let pixel = data[rawPos];\n        pxData[pxPos] = pixel;\n        pxData[pxPos + 1] = pixel;\n        pxData[pxPos + 2] = pixel;\n        pxData[pxPos + 3] = data[rawPos + 1];\n    },\n    // 3 - RGB\n    // 0: 0, 1: 1, 2: 2, 3: 0xff\n    function(pxData, data, pxPos, rawPos) {\n        if (rawPos + 2 >= data.length) {\n            throw new Error(\"Ran out of data\");\n        }\n        pxData[pxPos] = data[rawPos];\n        pxData[pxPos + 1] = data[rawPos + 1];\n        pxData[pxPos + 2] = data[rawPos + 2];\n        pxData[pxPos + 3] = 0xff;\n    },\n    // 4 - RGBA\n    // 0: 0, 1: 1, 2: 2, 3: 3\n    function(pxData, data, pxPos, rawPos) {\n        if (rawPos + 3 >= data.length) {\n            throw new Error(\"Ran out of data\");\n        }\n        pxData[pxPos] = data[rawPos];\n        pxData[pxPos + 1] = data[rawPos + 1];\n        pxData[pxPos + 2] = data[rawPos + 2];\n        pxData[pxPos + 3] = data[rawPos + 3];\n    }\n];\nlet pixelBppCustomMapper = [\n    // 0 - dummy entry\n    function() {},\n    // 1 - L\n    // 0: 0, 1: 0, 2: 0, 3: 0xff\n    function(pxData, pixelData, pxPos, maxBit) {\n        let pixel = pixelData[0];\n        pxData[pxPos] = pixel;\n        pxData[pxPos + 1] = pixel;\n        pxData[pxPos + 2] = pixel;\n        pxData[pxPos + 3] = maxBit;\n    },\n    // 2 - LA\n    // 0: 0, 1: 0, 2: 0, 3: 1\n    function(pxData, pixelData, pxPos) {\n        let pixel = pixelData[0];\n        pxData[pxPos] = pixel;\n        pxData[pxPos + 1] = pixel;\n        pxData[pxPos + 2] = pixel;\n        pxData[pxPos + 3] = pixelData[1];\n    },\n    // 3 - RGB\n    // 0: 0, 1: 1, 2: 2, 3: 0xff\n    function(pxData, pixelData, pxPos, maxBit) {\n        pxData[pxPos] = pixelData[0];\n        pxData[pxPos + 1] = pixelData[1];\n        pxData[pxPos + 2] = pixelData[2];\n        pxData[pxPos + 3] = maxBit;\n    },\n    // 4 - RGBA\n    // 0: 0, 1: 1, 2: 2, 3: 3\n    function(pxData, pixelData, pxPos) {\n        pxData[pxPos] = pixelData[0];\n        pxData[pxPos + 1] = pixelData[1];\n        pxData[pxPos + 2] = pixelData[2];\n        pxData[pxPos + 3] = pixelData[3];\n    }\n];\nfunction bitRetriever(data, depth) {\n    let leftOver = [];\n    let i = 0;\n    function split() {\n        if (i === data.length) {\n            throw new Error(\"Ran out of data\");\n        }\n        let byte = data[i];\n        i++;\n        let byte8, byte7, byte6, byte5, byte4, byte3, byte2, byte1;\n        switch(depth){\n            default:\n                throw new Error(\"unrecognised depth\");\n            case 16:\n                byte2 = data[i];\n                i++;\n                leftOver.push((byte << 8) + byte2);\n                break;\n            case 4:\n                byte2 = byte & 0x0f;\n                byte1 = byte >> 4;\n                leftOver.push(byte1, byte2);\n                break;\n            case 2:\n                byte4 = byte & 3;\n                byte3 = byte >> 2 & 3;\n                byte2 = byte >> 4 & 3;\n                byte1 = byte >> 6 & 3;\n                leftOver.push(byte1, byte2, byte3, byte4);\n                break;\n            case 1:\n                byte8 = byte & 1;\n                byte7 = byte >> 1 & 1;\n                byte6 = byte >> 2 & 1;\n                byte5 = byte >> 3 & 1;\n                byte4 = byte >> 4 & 1;\n                byte3 = byte >> 5 & 1;\n                byte2 = byte >> 6 & 1;\n                byte1 = byte >> 7 & 1;\n                leftOver.push(byte1, byte2, byte3, byte4, byte5, byte6, byte7, byte8);\n                break;\n        }\n    }\n    return {\n        get: function(count) {\n            while(leftOver.length < count){\n                split();\n            }\n            let returner = leftOver.slice(0, count);\n            leftOver = leftOver.slice(count);\n            return returner;\n        },\n        resetAfterLine: function() {\n            leftOver.length = 0;\n        },\n        end: function() {\n            if (i !== data.length) {\n                throw new Error(\"extra data found\");\n            }\n        }\n    };\n}\nfunction mapImage8Bit(image, pxData, getPxPos, bpp, data, rawPos) {\n    // eslint-disable-line max-params\n    let imageWidth = image.width;\n    let imageHeight = image.height;\n    let imagePass = image.index;\n    for(let y = 0; y < imageHeight; y++){\n        for(let x = 0; x < imageWidth; x++){\n            let pxPos = getPxPos(x, y, imagePass);\n            pixelBppMapper[bpp](pxData, data, pxPos, rawPos);\n            rawPos += bpp; //eslint-disable-line no-param-reassign\n        }\n    }\n    return rawPos;\n}\nfunction mapImageCustomBit(image, pxData, getPxPos, bpp, bits, maxBit) {\n    // eslint-disable-line max-params\n    let imageWidth = image.width;\n    let imageHeight = image.height;\n    let imagePass = image.index;\n    for(let y = 0; y < imageHeight; y++){\n        for(let x = 0; x < imageWidth; x++){\n            let pixelData = bits.get(bpp);\n            let pxPos = getPxPos(x, y, imagePass);\n            pixelBppCustomMapper[bpp](pxData, pixelData, pxPos, maxBit);\n        }\n        bits.resetAfterLine();\n    }\n}\nexports.dataToBitMap = function(data, bitmapInfo) {\n    let width = bitmapInfo.width;\n    let height = bitmapInfo.height;\n    let depth = bitmapInfo.depth;\n    let bpp = bitmapInfo.bpp;\n    let interlace = bitmapInfo.interlace;\n    let bits;\n    if (depth !== 8) {\n        bits = bitRetriever(data, depth);\n    }\n    let pxData;\n    if (depth <= 8) {\n        pxData = Buffer.alloc(width * height * 4);\n    } else {\n        pxData = new Uint16Array(width * height * 4);\n    }\n    let maxBit = Math.pow(2, depth) - 1;\n    let rawPos = 0;\n    let images;\n    let getPxPos;\n    if (interlace) {\n        images = interlaceUtils.getImagePasses(width, height);\n        getPxPos = interlaceUtils.getInterlaceIterator(width, height);\n    } else {\n        let nonInterlacedPxPos = 0;\n        getPxPos = function() {\n            let returner = nonInterlacedPxPos;\n            nonInterlacedPxPos += 4;\n            return returner;\n        };\n        images = [\n            {\n                width: width,\n                height: height\n            }\n        ];\n    }\n    for(let imageIndex = 0; imageIndex < images.length; imageIndex++){\n        if (depth === 8) {\n            rawPos = mapImage8Bit(images[imageIndex], pxData, getPxPos, bpp, data, rawPos);\n        } else {\n            mapImageCustomBit(images[imageIndex], pxData, getPxPos, bpp, bits, maxBit);\n        }\n    }\n    if (depth === 8) {\n        if (rawPos !== data.length) {\n            throw new Error(\"extra data found\");\n        }\n    } else {\n        bits.end();\n    }\n    return pxData;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/pngjs/lib/bitmapper.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/pngjs/lib/bitpacker.js":
/*!*********************************************!*\
  !*** ./node_modules/pngjs/lib/bitpacker.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nlet constants = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/pngjs/lib/constants.js\");\nmodule.exports = function(dataIn, width, height, options) {\n    let outHasAlpha = [\n        constants.COLORTYPE_COLOR_ALPHA,\n        constants.COLORTYPE_ALPHA\n    ].indexOf(options.colorType) !== -1;\n    if (options.colorType === options.inputColorType) {\n        let bigEndian = function() {\n            let buffer = new ArrayBuffer(2);\n            new DataView(buffer).setInt16(0, 256, true);\n            // Int16Array uses the platform's endianness.\n            return new Int16Array(buffer)[0] !== 256;\n        }();\n        // If no need to convert to grayscale and alpha is present/absent in both, take a fast route\n        if (options.bitDepth === 8 || options.bitDepth === 16 && bigEndian) {\n            return dataIn;\n        }\n    }\n    // map to a UInt16 array if data is 16bit, fix endianness below\n    let data = options.bitDepth !== 16 ? dataIn : new Uint16Array(dataIn.buffer);\n    let maxValue = 255;\n    let inBpp = constants.COLORTYPE_TO_BPP_MAP[options.inputColorType];\n    if (inBpp === 4 && !options.inputHasAlpha) {\n        inBpp = 3;\n    }\n    let outBpp = constants.COLORTYPE_TO_BPP_MAP[options.colorType];\n    if (options.bitDepth === 16) {\n        maxValue = 65535;\n        outBpp *= 2;\n    }\n    let outData = Buffer.alloc(width * height * outBpp);\n    let inIndex = 0;\n    let outIndex = 0;\n    let bgColor = options.bgColor || {};\n    if (bgColor.red === undefined) {\n        bgColor.red = maxValue;\n    }\n    if (bgColor.green === undefined) {\n        bgColor.green = maxValue;\n    }\n    if (bgColor.blue === undefined) {\n        bgColor.blue = maxValue;\n    }\n    function getRGBA() {\n        let red;\n        let green;\n        let blue;\n        let alpha = maxValue;\n        switch(options.inputColorType){\n            case constants.COLORTYPE_COLOR_ALPHA:\n                alpha = data[inIndex + 3];\n                red = data[inIndex];\n                green = data[inIndex + 1];\n                blue = data[inIndex + 2];\n                break;\n            case constants.COLORTYPE_COLOR:\n                red = data[inIndex];\n                green = data[inIndex + 1];\n                blue = data[inIndex + 2];\n                break;\n            case constants.COLORTYPE_ALPHA:\n                alpha = data[inIndex + 1];\n                red = data[inIndex];\n                green = red;\n                blue = red;\n                break;\n            case constants.COLORTYPE_GRAYSCALE:\n                red = data[inIndex];\n                green = red;\n                blue = red;\n                break;\n            default:\n                throw new Error(\"input color type:\" + options.inputColorType + \" is not supported at present\");\n        }\n        if (options.inputHasAlpha) {\n            if (!outHasAlpha) {\n                alpha /= maxValue;\n                red = Math.min(Math.max(Math.round((1 - alpha) * bgColor.red + alpha * red), 0), maxValue);\n                green = Math.min(Math.max(Math.round((1 - alpha) * bgColor.green + alpha * green), 0), maxValue);\n                blue = Math.min(Math.max(Math.round((1 - alpha) * bgColor.blue + alpha * blue), 0), maxValue);\n            }\n        }\n        return {\n            red: red,\n            green: green,\n            blue: blue,\n            alpha: alpha\n        };\n    }\n    for(let y = 0; y < height; y++){\n        for(let x = 0; x < width; x++){\n            let rgba = getRGBA(data, inIndex);\n            switch(options.colorType){\n                case constants.COLORTYPE_COLOR_ALPHA:\n                case constants.COLORTYPE_COLOR:\n                    if (options.bitDepth === 8) {\n                        outData[outIndex] = rgba.red;\n                        outData[outIndex + 1] = rgba.green;\n                        outData[outIndex + 2] = rgba.blue;\n                        if (outHasAlpha) {\n                            outData[outIndex + 3] = rgba.alpha;\n                        }\n                    } else {\n                        outData.writeUInt16BE(rgba.red, outIndex);\n                        outData.writeUInt16BE(rgba.green, outIndex + 2);\n                        outData.writeUInt16BE(rgba.blue, outIndex + 4);\n                        if (outHasAlpha) {\n                            outData.writeUInt16BE(rgba.alpha, outIndex + 6);\n                        }\n                    }\n                    break;\n                case constants.COLORTYPE_ALPHA:\n                case constants.COLORTYPE_GRAYSCALE:\n                    {\n                        // Convert to grayscale and alpha\n                        let grayscale = (rgba.red + rgba.green + rgba.blue) / 3;\n                        if (options.bitDepth === 8) {\n                            outData[outIndex] = grayscale;\n                            if (outHasAlpha) {\n                                outData[outIndex + 1] = rgba.alpha;\n                            }\n                        } else {\n                            outData.writeUInt16BE(grayscale, outIndex);\n                            if (outHasAlpha) {\n                                outData.writeUInt16BE(rgba.alpha, outIndex + 2);\n                            }\n                        }\n                        break;\n                    }\n                default:\n                    throw new Error(\"unrecognised color Type \" + options.colorType);\n            }\n            inIndex += inBpp;\n            outIndex += outBpp;\n        }\n    }\n    return outData;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/pngjs/lib/bitpacker.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/pngjs/lib/chunkstream.js":
/*!***********************************************!*\
  !*** ./node_modules/pngjs/lib/chunkstream.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nlet util = __webpack_require__(/*! util */ \"util\");\nlet Stream = __webpack_require__(/*! stream */ \"stream\");\nlet ChunkStream = module.exports = function() {\n    Stream.call(this);\n    this._buffers = [];\n    this._buffered = 0;\n    this._reads = [];\n    this._paused = false;\n    this._encoding = \"utf8\";\n    this.writable = true;\n};\nutil.inherits(ChunkStream, Stream);\nChunkStream.prototype.read = function(length, callback) {\n    this._reads.push({\n        length: Math.abs(length),\n        allowLess: length < 0,\n        func: callback\n    });\n    process.nextTick((function() {\n        this._process();\n        // its paused and there is not enought data then ask for more\n        if (this._paused && this._reads && this._reads.length > 0) {\n            this._paused = false;\n            this.emit(\"drain\");\n        }\n    }).bind(this));\n};\nChunkStream.prototype.write = function(data, encoding) {\n    if (!this.writable) {\n        this.emit(\"error\", new Error(\"Stream not writable\"));\n        return false;\n    }\n    let dataBuffer;\n    if (Buffer.isBuffer(data)) {\n        dataBuffer = data;\n    } else {\n        dataBuffer = Buffer.from(data, encoding || this._encoding);\n    }\n    this._buffers.push(dataBuffer);\n    this._buffered += dataBuffer.length;\n    this._process();\n    // ok if there are no more read requests\n    if (this._reads && this._reads.length === 0) {\n        this._paused = true;\n    }\n    return this.writable && !this._paused;\n};\nChunkStream.prototype.end = function(data, encoding) {\n    if (data) {\n        this.write(data, encoding);\n    }\n    this.writable = false;\n    // already destroyed\n    if (!this._buffers) {\n        return;\n    }\n    // enqueue or handle end\n    if (this._buffers.length === 0) {\n        this._end();\n    } else {\n        this._buffers.push(null);\n        this._process();\n    }\n};\nChunkStream.prototype.destroySoon = ChunkStream.prototype.end;\nChunkStream.prototype._end = function() {\n    if (this._reads.length > 0) {\n        this.emit(\"error\", new Error(\"Unexpected end of input\"));\n    }\n    this.destroy();\n};\nChunkStream.prototype.destroy = function() {\n    if (!this._buffers) {\n        return;\n    }\n    this.writable = false;\n    this._reads = null;\n    this._buffers = null;\n    this.emit(\"close\");\n};\nChunkStream.prototype._processReadAllowingLess = function(read) {\n    // ok there is any data so that we can satisfy this request\n    this._reads.shift(); // == read\n    // first we need to peek into first buffer\n    let smallerBuf = this._buffers[0];\n    // ok there is more data than we need\n    if (smallerBuf.length > read.length) {\n        this._buffered -= read.length;\n        this._buffers[0] = smallerBuf.slice(read.length);\n        read.func.call(this, smallerBuf.slice(0, read.length));\n    } else {\n        // ok this is less than maximum length so use it all\n        this._buffered -= smallerBuf.length;\n        this._buffers.shift(); // == smallerBuf\n        read.func.call(this, smallerBuf);\n    }\n};\nChunkStream.prototype._processRead = function(read) {\n    this._reads.shift(); // == read\n    let pos = 0;\n    let count = 0;\n    let data = Buffer.alloc(read.length);\n    // create buffer for all data\n    while(pos < read.length){\n        let buf = this._buffers[count++];\n        let len = Math.min(buf.length, read.length - pos);\n        buf.copy(data, pos, 0, len);\n        pos += len;\n        // last buffer wasn't used all so just slice it and leave\n        if (len !== buf.length) {\n            this._buffers[--count] = buf.slice(len);\n        }\n    }\n    // remove all used buffers\n    if (count > 0) {\n        this._buffers.splice(0, count);\n    }\n    this._buffered -= read.length;\n    read.func.call(this, data);\n};\nChunkStream.prototype._process = function() {\n    try {\n        // as long as there is any data and read requests\n        while(this._buffered > 0 && this._reads && this._reads.length > 0){\n            let read = this._reads[0];\n            // read any data (but no more than length)\n            if (read.allowLess) {\n                this._processReadAllowingLess(read);\n            } else if (this._buffered >= read.length) {\n                // ok we can meet some expectations\n                this._processRead(read);\n            } else {\n                break;\n            }\n        }\n        if (this._buffers && !this.writable) {\n            this._end();\n        }\n    } catch (ex) {\n        this.emit(\"error\", ex);\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/pngjs/lib/chunkstream.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/pngjs/lib/constants.js":
/*!*********************************************!*\
  !*** ./node_modules/pngjs/lib/constants.js ***!
  \*********************************************/
/***/ ((module) => {

eval("\nmodule.exports = {\n    PNG_SIGNATURE: [\n        0x89,\n        0x50,\n        0x4e,\n        0x47,\n        0x0d,\n        0x0a,\n        0x1a,\n        0x0a\n    ],\n    TYPE_IHDR: 0x49484452,\n    TYPE_IEND: 0x49454e44,\n    TYPE_IDAT: 0x49444154,\n    TYPE_PLTE: 0x504c5445,\n    TYPE_tRNS: 0x74524e53,\n    TYPE_gAMA: 0x67414d41,\n    // color-type bits\n    COLORTYPE_GRAYSCALE: 0,\n    COLORTYPE_PALETTE: 1,\n    COLORTYPE_COLOR: 2,\n    COLORTYPE_ALPHA: 4,\n    // color-type combinations\n    COLORTYPE_PALETTE_COLOR: 3,\n    COLORTYPE_COLOR_ALPHA: 6,\n    COLORTYPE_TO_BPP_MAP: {\n        0: 1,\n        2: 3,\n        3: 1,\n        4: 2,\n        6: 4\n    },\n    GAMMA_DIVISION: 100000\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcG5nanMvbGliL2NvbnN0YW50cy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViQSxPQUFPQyxPQUFPLEdBQUc7SUFDZkMsZUFBZTtRQUFDO1FBQU07UUFBTTtRQUFNO1FBQU07UUFBTTtRQUFNO1FBQU07S0FBSztJQUUvREMsV0FBVztJQUNYQyxXQUFXO0lBQ1hDLFdBQVc7SUFDWEMsV0FBVztJQUNYQyxXQUFXO0lBQ1hDLFdBQVc7SUFFWCxrQkFBa0I7SUFDbEJDLHFCQUFxQjtJQUNyQkMsbUJBQW1CO0lBQ25CQyxpQkFBaUI7SUFDakJDLGlCQUFpQjtJQUVqQiwwQkFBMEI7SUFDMUJDLHlCQUF5QjtJQUN6QkMsdUJBQXVCO0lBRXZCQyxzQkFBc0I7UUFDcEIsR0FBRztRQUNILEdBQUc7UUFDSCxHQUFHO1FBQ0gsR0FBRztRQUNILEdBQUc7SUFDTDtJQUVBQyxnQkFBZ0I7QUFDbEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90aGUtZ3JpZC0yLy4vbm9kZV9tb2R1bGVzL3BuZ2pzL2xpYi9jb25zdGFudHMuanM/NThmNCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIFBOR19TSUdOQVRVUkU6IFsweDg5LCAweDUwLCAweDRlLCAweDQ3LCAweDBkLCAweDBhLCAweDFhLCAweDBhXSxcblxuICBUWVBFX0lIRFI6IDB4NDk0ODQ0NTIsXG4gIFRZUEVfSUVORDogMHg0OTQ1NGU0NCxcbiAgVFlQRV9JREFUOiAweDQ5NDQ0MTU0LFxuICBUWVBFX1BMVEU6IDB4NTA0YzU0NDUsXG4gIFRZUEVfdFJOUzogMHg3NDUyNGU1MywgLy8gZXNsaW50LWRpc2FibGUtbGluZSBjYW1lbGNhc2VcbiAgVFlQRV9nQU1BOiAweDY3NDE0ZDQxLCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGNhbWVsY2FzZVxuXG4gIC8vIGNvbG9yLXR5cGUgYml0c1xuICBDT0xPUlRZUEVfR1JBWVNDQUxFOiAwLFxuICBDT0xPUlRZUEVfUEFMRVRURTogMSxcbiAgQ09MT1JUWVBFX0NPTE9SOiAyLFxuICBDT0xPUlRZUEVfQUxQSEE6IDQsIC8vIGUuZy4gZ3JheXNjYWxlIGFuZCBhbHBoYVxuXG4gIC8vIGNvbG9yLXR5cGUgY29tYmluYXRpb25zXG4gIENPTE9SVFlQRV9QQUxFVFRFX0NPTE9SOiAzLFxuICBDT0xPUlRZUEVfQ09MT1JfQUxQSEE6IDYsXG5cbiAgQ09MT1JUWVBFX1RPX0JQUF9NQVA6IHtcbiAgICAwOiAxLFxuICAgIDI6IDMsXG4gICAgMzogMSxcbiAgICA0OiAyLFxuICAgIDY6IDQsXG4gIH0sXG5cbiAgR0FNTUFfRElWSVNJT046IDEwMDAwMCxcbn07XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsIlBOR19TSUdOQVRVUkUiLCJUWVBFX0lIRFIiLCJUWVBFX0lFTkQiLCJUWVBFX0lEQVQiLCJUWVBFX1BMVEUiLCJUWVBFX3RSTlMiLCJUWVBFX2dBTUEiLCJDT0xPUlRZUEVfR1JBWVNDQUxFIiwiQ09MT1JUWVBFX1BBTEVUVEUiLCJDT0xPUlRZUEVfQ09MT1IiLCJDT0xPUlRZUEVfQUxQSEEiLCJDT0xPUlRZUEVfUEFMRVRURV9DT0xPUiIsIkNPTE9SVFlQRV9DT0xPUl9BTFBIQSIsIkNPTE9SVFlQRV9UT19CUFBfTUFQIiwiR0FNTUFfRElWSVNJT04iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/pngjs/lib/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/pngjs/lib/crc.js":
/*!***************************************!*\
  !*** ./node_modules/pngjs/lib/crc.js ***!
  \***************************************/
/***/ ((module) => {

eval("\nlet crcTable = [];\n(function() {\n    for(let i = 0; i < 256; i++){\n        let currentCrc = i;\n        for(let j = 0; j < 8; j++){\n            if (currentCrc & 1) {\n                currentCrc = 0xedb88320 ^ currentCrc >>> 1;\n            } else {\n                currentCrc = currentCrc >>> 1;\n            }\n        }\n        crcTable[i] = currentCrc;\n    }\n})();\nlet CrcCalculator = module.exports = function() {\n    this._crc = -1;\n};\nCrcCalculator.prototype.write = function(data) {\n    for(let i = 0; i < data.length; i++){\n        this._crc = crcTable[(this._crc ^ data[i]) & 0xff] ^ this._crc >>> 8;\n    }\n    return true;\n};\nCrcCalculator.prototype.crc32 = function() {\n    return this._crc ^ -1;\n};\nCrcCalculator.crc32 = function(buf) {\n    let crc = -1;\n    for(let i = 0; i < buf.length; i++){\n        crc = crcTable[(crc ^ buf[i]) & 0xff] ^ crc >>> 8;\n    }\n    return crc ^ -1;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcG5nanMvbGliL2NyYy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViLElBQUlBLFdBQVcsRUFBRTtBQUVoQjtJQUNDLElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJLEtBQUtBLElBQUs7UUFDNUIsSUFBSUMsYUFBYUQ7UUFDakIsSUFBSyxJQUFJRSxJQUFJLEdBQUdBLElBQUksR0FBR0EsSUFBSztZQUMxQixJQUFJRCxhQUFhLEdBQUc7Z0JBQ2xCQSxhQUFhLGFBQWNBLGVBQWU7WUFDNUMsT0FBTztnQkFDTEEsYUFBYUEsZUFBZTtZQUM5QjtRQUNGO1FBQ0FGLFFBQVEsQ0FBQ0MsRUFBRSxHQUFHQztJQUNoQjtBQUNGO0FBRUEsSUFBSUUsZ0JBQWlCQyxPQUFPQyxPQUFPLEdBQUc7SUFDcEMsSUFBSSxDQUFDQyxJQUFJLEdBQUcsQ0FBQztBQUNmO0FBRUFILGNBQWNJLFNBQVMsQ0FBQ0MsS0FBSyxHQUFHLFNBQVVDLElBQUk7SUFDNUMsSUFBSyxJQUFJVCxJQUFJLEdBQUdBLElBQUlTLEtBQUtDLE1BQU0sRUFBRVYsSUFBSztRQUNwQyxJQUFJLENBQUNNLElBQUksR0FBR1AsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDTyxJQUFJLEdBQUdHLElBQUksQ0FBQ1QsRUFBRSxJQUFJLEtBQUssR0FBSSxJQUFJLENBQUNNLElBQUksS0FBSztJQUN0RTtJQUNBLE9BQU87QUFDVDtBQUVBSCxjQUFjSSxTQUFTLENBQUNJLEtBQUssR0FBRztJQUM5QixPQUFPLElBQUksQ0FBQ0wsSUFBSSxHQUFHLENBQUM7QUFDdEI7QUFFQUgsY0FBY1EsS0FBSyxHQUFHLFNBQVVDLEdBQUc7SUFDakMsSUFBSUMsTUFBTSxDQUFDO0lBQ1gsSUFBSyxJQUFJYixJQUFJLEdBQUdBLElBQUlZLElBQUlGLE1BQU0sRUFBRVYsSUFBSztRQUNuQ2EsTUFBTWQsUUFBUSxDQUFDLENBQUNjLE1BQU1ELEdBQUcsQ0FBQ1osRUFBRSxJQUFJLEtBQUssR0FBSWEsUUFBUTtJQUNuRDtJQUNBLE9BQU9BLE1BQU0sQ0FBQztBQUNoQiIsInNvdXJjZXMiOlsid2VicGFjazovL3RoZS1ncmlkLTIvLi9ub2RlX21vZHVsZXMvcG5nanMvbGliL2NyYy5qcz83MGZjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5sZXQgY3JjVGFibGUgPSBbXTtcblxuKGZ1bmN0aW9uICgpIHtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCAyNTY7IGkrKykge1xuICAgIGxldCBjdXJyZW50Q3JjID0gaTtcbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IDg7IGorKykge1xuICAgICAgaWYgKGN1cnJlbnRDcmMgJiAxKSB7XG4gICAgICAgIGN1cnJlbnRDcmMgPSAweGVkYjg4MzIwIF4gKGN1cnJlbnRDcmMgPj4+IDEpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY3VycmVudENyYyA9IGN1cnJlbnRDcmMgPj4+IDE7XG4gICAgICB9XG4gICAgfVxuICAgIGNyY1RhYmxlW2ldID0gY3VycmVudENyYztcbiAgfVxufSkoKTtcblxubGV0IENyY0NhbGN1bGF0b3IgPSAobW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuX2NyYyA9IC0xO1xufSk7XG5cbkNyY0NhbGN1bGF0b3IucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgdGhpcy5fY3JjID0gY3JjVGFibGVbKHRoaXMuX2NyYyBeIGRhdGFbaV0pICYgMHhmZl0gXiAodGhpcy5fY3JjID4+PiA4KTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbkNyY0NhbGN1bGF0b3IucHJvdG90eXBlLmNyYzMyID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5fY3JjIF4gLTE7XG59O1xuXG5DcmNDYWxjdWxhdG9yLmNyYzMyID0gZnVuY3Rpb24gKGJ1Zikge1xuICBsZXQgY3JjID0gLTE7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYnVmLmxlbmd0aDsgaSsrKSB7XG4gICAgY3JjID0gY3JjVGFibGVbKGNyYyBeIGJ1ZltpXSkgJiAweGZmXSBeIChjcmMgPj4+IDgpO1xuICB9XG4gIHJldHVybiBjcmMgXiAtMTtcbn07XG4iXSwibmFtZXMiOlsiY3JjVGFibGUiLCJpIiwiY3VycmVudENyYyIsImoiLCJDcmNDYWxjdWxhdG9yIiwibW9kdWxlIiwiZXhwb3J0cyIsIl9jcmMiLCJwcm90b3R5cGUiLCJ3cml0ZSIsImRhdGEiLCJsZW5ndGgiLCJjcmMzMiIsImJ1ZiIsImNyYyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/pngjs/lib/crc.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/pngjs/lib/filter-pack.js":
/*!***********************************************!*\
  !*** ./node_modules/pngjs/lib/filter-pack.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nlet paethPredictor = __webpack_require__(/*! ./paeth-predictor */ \"(ssr)/./node_modules/pngjs/lib/paeth-predictor.js\");\nfunction filterNone(pxData, pxPos, byteWidth, rawData, rawPos) {\n    for(let x = 0; x < byteWidth; x++){\n        rawData[rawPos + x] = pxData[pxPos + x];\n    }\n}\nfunction filterSumNone(pxData, pxPos, byteWidth) {\n    let sum = 0;\n    let length = pxPos + byteWidth;\n    for(let i = pxPos; i < length; i++){\n        sum += Math.abs(pxData[i]);\n    }\n    return sum;\n}\nfunction filterSub(pxData, pxPos, byteWidth, rawData, rawPos, bpp) {\n    for(let x = 0; x < byteWidth; x++){\n        let left = x >= bpp ? pxData[pxPos + x - bpp] : 0;\n        let val = pxData[pxPos + x] - left;\n        rawData[rawPos + x] = val;\n    }\n}\nfunction filterSumSub(pxData, pxPos, byteWidth, bpp) {\n    let sum = 0;\n    for(let x = 0; x < byteWidth; x++){\n        let left = x >= bpp ? pxData[pxPos + x - bpp] : 0;\n        let val = pxData[pxPos + x] - left;\n        sum += Math.abs(val);\n    }\n    return sum;\n}\nfunction filterUp(pxData, pxPos, byteWidth, rawData, rawPos) {\n    for(let x = 0; x < byteWidth; x++){\n        let up = pxPos > 0 ? pxData[pxPos + x - byteWidth] : 0;\n        let val = pxData[pxPos + x] - up;\n        rawData[rawPos + x] = val;\n    }\n}\nfunction filterSumUp(pxData, pxPos, byteWidth) {\n    let sum = 0;\n    let length = pxPos + byteWidth;\n    for(let x = pxPos; x < length; x++){\n        let up = pxPos > 0 ? pxData[x - byteWidth] : 0;\n        let val = pxData[x] - up;\n        sum += Math.abs(val);\n    }\n    return sum;\n}\nfunction filterAvg(pxData, pxPos, byteWidth, rawData, rawPos, bpp) {\n    for(let x = 0; x < byteWidth; x++){\n        let left = x >= bpp ? pxData[pxPos + x - bpp] : 0;\n        let up = pxPos > 0 ? pxData[pxPos + x - byteWidth] : 0;\n        let val = pxData[pxPos + x] - (left + up >> 1);\n        rawData[rawPos + x] = val;\n    }\n}\nfunction filterSumAvg(pxData, pxPos, byteWidth, bpp) {\n    let sum = 0;\n    for(let x = 0; x < byteWidth; x++){\n        let left = x >= bpp ? pxData[pxPos + x - bpp] : 0;\n        let up = pxPos > 0 ? pxData[pxPos + x - byteWidth] : 0;\n        let val = pxData[pxPos + x] - (left + up >> 1);\n        sum += Math.abs(val);\n    }\n    return sum;\n}\nfunction filterPaeth(pxData, pxPos, byteWidth, rawData, rawPos, bpp) {\n    for(let x = 0; x < byteWidth; x++){\n        let left = x >= bpp ? pxData[pxPos + x - bpp] : 0;\n        let up = pxPos > 0 ? pxData[pxPos + x - byteWidth] : 0;\n        let upleft = pxPos > 0 && x >= bpp ? pxData[pxPos + x - (byteWidth + bpp)] : 0;\n        let val = pxData[pxPos + x] - paethPredictor(left, up, upleft);\n        rawData[rawPos + x] = val;\n    }\n}\nfunction filterSumPaeth(pxData, pxPos, byteWidth, bpp) {\n    let sum = 0;\n    for(let x = 0; x < byteWidth; x++){\n        let left = x >= bpp ? pxData[pxPos + x - bpp] : 0;\n        let up = pxPos > 0 ? pxData[pxPos + x - byteWidth] : 0;\n        let upleft = pxPos > 0 && x >= bpp ? pxData[pxPos + x - (byteWidth + bpp)] : 0;\n        let val = pxData[pxPos + x] - paethPredictor(left, up, upleft);\n        sum += Math.abs(val);\n    }\n    return sum;\n}\nlet filters = {\n    0: filterNone,\n    1: filterSub,\n    2: filterUp,\n    3: filterAvg,\n    4: filterPaeth\n};\nlet filterSums = {\n    0: filterSumNone,\n    1: filterSumSub,\n    2: filterSumUp,\n    3: filterSumAvg,\n    4: filterSumPaeth\n};\nmodule.exports = function(pxData, width, height, options, bpp) {\n    let filterTypes;\n    if (!(\"filterType\" in options) || options.filterType === -1) {\n        filterTypes = [\n            0,\n            1,\n            2,\n            3,\n            4\n        ];\n    } else if (typeof options.filterType === \"number\") {\n        filterTypes = [\n            options.filterType\n        ];\n    } else {\n        throw new Error(\"unrecognised filter types\");\n    }\n    if (options.bitDepth === 16) {\n        bpp *= 2;\n    }\n    let byteWidth = width * bpp;\n    let rawPos = 0;\n    let pxPos = 0;\n    let rawData = Buffer.alloc((byteWidth + 1) * height);\n    let sel = filterTypes[0];\n    for(let y = 0; y < height; y++){\n        if (filterTypes.length > 1) {\n            // find best filter for this line (with lowest sum of values)\n            let min = Infinity;\n            for(let i = 0; i < filterTypes.length; i++){\n                let sum = filterSums[filterTypes[i]](pxData, pxPos, byteWidth, bpp);\n                if (sum < min) {\n                    sel = filterTypes[i];\n                    min = sum;\n                }\n            }\n        }\n        rawData[rawPos] = sel;\n        rawPos++;\n        filters[sel](pxData, pxPos, byteWidth, rawData, rawPos, bpp);\n        rawPos += byteWidth;\n        pxPos += byteWidth;\n    }\n    return rawData;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/pngjs/lib/filter-pack.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/pngjs/lib/filter-parse-async.js":
/*!******************************************************!*\
  !*** ./node_modules/pngjs/lib/filter-parse-async.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nlet util = __webpack_require__(/*! util */ \"util\");\nlet ChunkStream = __webpack_require__(/*! ./chunkstream */ \"(ssr)/./node_modules/pngjs/lib/chunkstream.js\");\nlet Filter = __webpack_require__(/*! ./filter-parse */ \"(ssr)/./node_modules/pngjs/lib/filter-parse.js\");\nlet FilterAsync = module.exports = function(bitmapInfo) {\n    ChunkStream.call(this);\n    let buffers = [];\n    let that = this;\n    this._filter = new Filter(bitmapInfo, {\n        read: this.read.bind(this),\n        write: function(buffer) {\n            buffers.push(buffer);\n        },\n        complete: function() {\n            that.emit(\"complete\", Buffer.concat(buffers));\n        }\n    });\n    this._filter.start();\n};\nutil.inherits(FilterAsync, ChunkStream);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcG5nanMvbGliL2ZpbHRlci1wYXJzZS1hc3luYy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViLElBQUlBLE9BQU9DLG1CQUFPQSxDQUFDLGtCQUFNO0FBQ3pCLElBQUlDLGNBQWNELG1CQUFPQSxDQUFDLG9FQUFlO0FBQ3pDLElBQUlFLFNBQVNGLG1CQUFPQSxDQUFDLHNFQUFnQjtBQUVyQyxJQUFJRyxjQUFlQyxPQUFPQyxPQUFPLEdBQUcsU0FBVUMsVUFBVTtJQUN0REwsWUFBWU0sSUFBSSxDQUFDLElBQUk7SUFFckIsSUFBSUMsVUFBVSxFQUFFO0lBQ2hCLElBQUlDLE9BQU8sSUFBSTtJQUNmLElBQUksQ0FBQ0MsT0FBTyxHQUFHLElBQUlSLE9BQU9JLFlBQVk7UUFDcENLLE1BQU0sSUFBSSxDQUFDQSxJQUFJLENBQUNDLElBQUksQ0FBQyxJQUFJO1FBQ3pCQyxPQUFPLFNBQVVDLE1BQU07WUFDckJOLFFBQVFPLElBQUksQ0FBQ0Q7UUFDZjtRQUNBRSxVQUFVO1lBQ1JQLEtBQUtRLElBQUksQ0FBQyxZQUFZQyxPQUFPQyxNQUFNLENBQUNYO1FBQ3RDO0lBQ0Y7SUFFQSxJQUFJLENBQUNFLE9BQU8sQ0FBQ1UsS0FBSztBQUNwQjtBQUNBckIsS0FBS3NCLFFBQVEsQ0FBQ2xCLGFBQWFGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGhlLWdyaWQtMi8uL25vZGVfbW9kdWxlcy9wbmdqcy9saWIvZmlsdGVyLXBhcnNlLWFzeW5jLmpzPzFjNWUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmxldCB1dGlsID0gcmVxdWlyZShcInV0aWxcIik7XG5sZXQgQ2h1bmtTdHJlYW0gPSByZXF1aXJlKFwiLi9jaHVua3N0cmVhbVwiKTtcbmxldCBGaWx0ZXIgPSByZXF1aXJlKFwiLi9maWx0ZXItcGFyc2VcIik7XG5cbmxldCBGaWx0ZXJBc3luYyA9IChtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChiaXRtYXBJbmZvKSB7XG4gIENodW5rU3RyZWFtLmNhbGwodGhpcyk7XG5cbiAgbGV0IGJ1ZmZlcnMgPSBbXTtcbiAgbGV0IHRoYXQgPSB0aGlzO1xuICB0aGlzLl9maWx0ZXIgPSBuZXcgRmlsdGVyKGJpdG1hcEluZm8sIHtcbiAgICByZWFkOiB0aGlzLnJlYWQuYmluZCh0aGlzKSxcbiAgICB3cml0ZTogZnVuY3Rpb24gKGJ1ZmZlcikge1xuICAgICAgYnVmZmVycy5wdXNoKGJ1ZmZlcik7XG4gICAgfSxcbiAgICBjb21wbGV0ZTogZnVuY3Rpb24gKCkge1xuICAgICAgdGhhdC5lbWl0KFwiY29tcGxldGVcIiwgQnVmZmVyLmNvbmNhdChidWZmZXJzKSk7XG4gICAgfSxcbiAgfSk7XG5cbiAgdGhpcy5fZmlsdGVyLnN0YXJ0KCk7XG59KTtcbnV0aWwuaW5oZXJpdHMoRmlsdGVyQXN5bmMsIENodW5rU3RyZWFtKTtcbiJdLCJuYW1lcyI6WyJ1dGlsIiwicmVxdWlyZSIsIkNodW5rU3RyZWFtIiwiRmlsdGVyIiwiRmlsdGVyQXN5bmMiLCJtb2R1bGUiLCJleHBvcnRzIiwiYml0bWFwSW5mbyIsImNhbGwiLCJidWZmZXJzIiwidGhhdCIsIl9maWx0ZXIiLCJyZWFkIiwiYmluZCIsIndyaXRlIiwiYnVmZmVyIiwicHVzaCIsImNvbXBsZXRlIiwiZW1pdCIsIkJ1ZmZlciIsImNvbmNhdCIsInN0YXJ0IiwiaW5oZXJpdHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/pngjs/lib/filter-parse-async.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/pngjs/lib/filter-parse-sync.js":
/*!*****************************************************!*\
  !*** ./node_modules/pngjs/lib/filter-parse-sync.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nlet SyncReader = __webpack_require__(/*! ./sync-reader */ \"(ssr)/./node_modules/pngjs/lib/sync-reader.js\");\nlet Filter = __webpack_require__(/*! ./filter-parse */ \"(ssr)/./node_modules/pngjs/lib/filter-parse.js\");\nexports.process = function(inBuffer, bitmapInfo) {\n    let outBuffers = [];\n    let reader = new SyncReader(inBuffer);\n    let filter = new Filter(bitmapInfo, {\n        read: reader.read.bind(reader),\n        write: function(bufferPart) {\n            outBuffers.push(bufferPart);\n        },\n        complete: function() {}\n    });\n    filter.start();\n    reader.process();\n    return Buffer.concat(outBuffers);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcG5nanMvbGliL2ZpbHRlci1wYXJzZS1zeW5jLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBRWIsSUFBSUEsYUFBYUMsbUJBQU9BLENBQUMsb0VBQWU7QUFDeEMsSUFBSUMsU0FBU0QsbUJBQU9BLENBQUMsc0VBQWdCO0FBRXJDRSxlQUFlLEdBQUcsU0FBVUUsUUFBUSxFQUFFQyxVQUFVO0lBQzlDLElBQUlDLGFBQWEsRUFBRTtJQUNuQixJQUFJQyxTQUFTLElBQUlSLFdBQVdLO0lBQzVCLElBQUlJLFNBQVMsSUFBSVAsT0FBT0ksWUFBWTtRQUNsQ0ksTUFBTUYsT0FBT0UsSUFBSSxDQUFDQyxJQUFJLENBQUNIO1FBQ3ZCSSxPQUFPLFNBQVVDLFVBQVU7WUFDekJOLFdBQVdPLElBQUksQ0FBQ0Q7UUFDbEI7UUFDQUUsVUFBVSxZQUFhO0lBQ3pCO0lBRUFOLE9BQU9PLEtBQUs7SUFDWlIsT0FBT0osT0FBTztJQUVkLE9BQU9hLE9BQU9DLE1BQU0sQ0FBQ1g7QUFDdkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90aGUtZ3JpZC0yLy4vbm9kZV9tb2R1bGVzL3BuZ2pzL2xpYi9maWx0ZXItcGFyc2Utc3luYy5qcz80MWRjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5sZXQgU3luY1JlYWRlciA9IHJlcXVpcmUoXCIuL3N5bmMtcmVhZGVyXCIpO1xubGV0IEZpbHRlciA9IHJlcXVpcmUoXCIuL2ZpbHRlci1wYXJzZVwiKTtcblxuZXhwb3J0cy5wcm9jZXNzID0gZnVuY3Rpb24gKGluQnVmZmVyLCBiaXRtYXBJbmZvKSB7XG4gIGxldCBvdXRCdWZmZXJzID0gW107XG4gIGxldCByZWFkZXIgPSBuZXcgU3luY1JlYWRlcihpbkJ1ZmZlcik7XG4gIGxldCBmaWx0ZXIgPSBuZXcgRmlsdGVyKGJpdG1hcEluZm8sIHtcbiAgICByZWFkOiByZWFkZXIucmVhZC5iaW5kKHJlYWRlciksXG4gICAgd3JpdGU6IGZ1bmN0aW9uIChidWZmZXJQYXJ0KSB7XG4gICAgICBvdXRCdWZmZXJzLnB1c2goYnVmZmVyUGFydCk7XG4gICAgfSxcbiAgICBjb21wbGV0ZTogZnVuY3Rpb24gKCkge30sXG4gIH0pO1xuXG4gIGZpbHRlci5zdGFydCgpO1xuICByZWFkZXIucHJvY2VzcygpO1xuXG4gIHJldHVybiBCdWZmZXIuY29uY2F0KG91dEJ1ZmZlcnMpO1xufTtcbiJdLCJuYW1lcyI6WyJTeW5jUmVhZGVyIiwicmVxdWlyZSIsIkZpbHRlciIsImV4cG9ydHMiLCJwcm9jZXNzIiwiaW5CdWZmZXIiLCJiaXRtYXBJbmZvIiwib3V0QnVmZmVycyIsInJlYWRlciIsImZpbHRlciIsInJlYWQiLCJiaW5kIiwid3JpdGUiLCJidWZmZXJQYXJ0IiwicHVzaCIsImNvbXBsZXRlIiwic3RhcnQiLCJCdWZmZXIiLCJjb25jYXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/pngjs/lib/filter-parse-sync.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/pngjs/lib/filter-parse.js":
/*!************************************************!*\
  !*** ./node_modules/pngjs/lib/filter-parse.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nlet interlaceUtils = __webpack_require__(/*! ./interlace */ \"(ssr)/./node_modules/pngjs/lib/interlace.js\");\nlet paethPredictor = __webpack_require__(/*! ./paeth-predictor */ \"(ssr)/./node_modules/pngjs/lib/paeth-predictor.js\");\nfunction getByteWidth(width, bpp, depth) {\n    let byteWidth = width * bpp;\n    if (depth !== 8) {\n        byteWidth = Math.ceil(byteWidth / (8 / depth));\n    }\n    return byteWidth;\n}\nlet Filter = module.exports = function(bitmapInfo, dependencies) {\n    let width = bitmapInfo.width;\n    let height = bitmapInfo.height;\n    let interlace = bitmapInfo.interlace;\n    let bpp = bitmapInfo.bpp;\n    let depth = bitmapInfo.depth;\n    this.read = dependencies.read;\n    this.write = dependencies.write;\n    this.complete = dependencies.complete;\n    this._imageIndex = 0;\n    this._images = [];\n    if (interlace) {\n        let passes = interlaceUtils.getImagePasses(width, height);\n        for(let i = 0; i < passes.length; i++){\n            this._images.push({\n                byteWidth: getByteWidth(passes[i].width, bpp, depth),\n                height: passes[i].height,\n                lineIndex: 0\n            });\n        }\n    } else {\n        this._images.push({\n            byteWidth: getByteWidth(width, bpp, depth),\n            height: height,\n            lineIndex: 0\n        });\n    }\n    // when filtering the line we look at the pixel to the left\n    // the spec also says it is done on a byte level regardless of the number of pixels\n    // so if the depth is byte compatible (8 or 16) we subtract the bpp in order to compare back\n    // a pixel rather than just a different byte part. However if we are sub byte, we ignore.\n    if (depth === 8) {\n        this._xComparison = bpp;\n    } else if (depth === 16) {\n        this._xComparison = bpp * 2;\n    } else {\n        this._xComparison = 1;\n    }\n};\nFilter.prototype.start = function() {\n    this.read(this._images[this._imageIndex].byteWidth + 1, this._reverseFilterLine.bind(this));\n};\nFilter.prototype._unFilterType1 = function(rawData, unfilteredLine, byteWidth) {\n    let xComparison = this._xComparison;\n    let xBiggerThan = xComparison - 1;\n    for(let x = 0; x < byteWidth; x++){\n        let rawByte = rawData[1 + x];\n        let f1Left = x > xBiggerThan ? unfilteredLine[x - xComparison] : 0;\n        unfilteredLine[x] = rawByte + f1Left;\n    }\n};\nFilter.prototype._unFilterType2 = function(rawData, unfilteredLine, byteWidth) {\n    let lastLine = this._lastLine;\n    for(let x = 0; x < byteWidth; x++){\n        let rawByte = rawData[1 + x];\n        let f2Up = lastLine ? lastLine[x] : 0;\n        unfilteredLine[x] = rawByte + f2Up;\n    }\n};\nFilter.prototype._unFilterType3 = function(rawData, unfilteredLine, byteWidth) {\n    let xComparison = this._xComparison;\n    let xBiggerThan = xComparison - 1;\n    let lastLine = this._lastLine;\n    for(let x = 0; x < byteWidth; x++){\n        let rawByte = rawData[1 + x];\n        let f3Up = lastLine ? lastLine[x] : 0;\n        let f3Left = x > xBiggerThan ? unfilteredLine[x - xComparison] : 0;\n        let f3Add = Math.floor((f3Left + f3Up) / 2);\n        unfilteredLine[x] = rawByte + f3Add;\n    }\n};\nFilter.prototype._unFilterType4 = function(rawData, unfilteredLine, byteWidth) {\n    let xComparison = this._xComparison;\n    let xBiggerThan = xComparison - 1;\n    let lastLine = this._lastLine;\n    for(let x = 0; x < byteWidth; x++){\n        let rawByte = rawData[1 + x];\n        let f4Up = lastLine ? lastLine[x] : 0;\n        let f4Left = x > xBiggerThan ? unfilteredLine[x - xComparison] : 0;\n        let f4UpLeft = x > xBiggerThan && lastLine ? lastLine[x - xComparison] : 0;\n        let f4Add = paethPredictor(f4Left, f4Up, f4UpLeft);\n        unfilteredLine[x] = rawByte + f4Add;\n    }\n};\nFilter.prototype._reverseFilterLine = function(rawData) {\n    let filter = rawData[0];\n    let unfilteredLine;\n    let currentImage = this._images[this._imageIndex];\n    let byteWidth = currentImage.byteWidth;\n    if (filter === 0) {\n        unfilteredLine = rawData.slice(1, byteWidth + 1);\n    } else {\n        unfilteredLine = Buffer.alloc(byteWidth);\n        switch(filter){\n            case 1:\n                this._unFilterType1(rawData, unfilteredLine, byteWidth);\n                break;\n            case 2:\n                this._unFilterType2(rawData, unfilteredLine, byteWidth);\n                break;\n            case 3:\n                this._unFilterType3(rawData, unfilteredLine, byteWidth);\n                break;\n            case 4:\n                this._unFilterType4(rawData, unfilteredLine, byteWidth);\n                break;\n            default:\n                throw new Error(\"Unrecognised filter type - \" + filter);\n        }\n    }\n    this.write(unfilteredLine);\n    currentImage.lineIndex++;\n    if (currentImage.lineIndex >= currentImage.height) {\n        this._lastLine = null;\n        this._imageIndex++;\n        currentImage = this._images[this._imageIndex];\n    } else {\n        this._lastLine = unfilteredLine;\n    }\n    if (currentImage) {\n        // read, using the byte width that may be from the new current image\n        this.read(currentImage.byteWidth + 1, this._reverseFilterLine.bind(this));\n    } else {\n        this._lastLine = null;\n        this.complete();\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcG5nanMvbGliL2ZpbHRlci1wYXJzZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViLElBQUlBLGlCQUFpQkMsbUJBQU9BLENBQUMsZ0VBQWE7QUFDMUMsSUFBSUMsaUJBQWlCRCxtQkFBT0EsQ0FBQyw0RUFBbUI7QUFFaEQsU0FBU0UsYUFBYUMsS0FBSyxFQUFFQyxHQUFHLEVBQUVDLEtBQUs7SUFDckMsSUFBSUMsWUFBWUgsUUFBUUM7SUFDeEIsSUFBSUMsVUFBVSxHQUFHO1FBQ2ZDLFlBQVlDLEtBQUtDLElBQUksQ0FBQ0YsWUFBYSxLQUFJRCxLQUFJO0lBQzdDO0lBQ0EsT0FBT0M7QUFDVDtBQUVBLElBQUlHLFNBQVVDLE9BQU9DLE9BQU8sR0FBRyxTQUFVQyxVQUFVLEVBQUVDLFlBQVk7SUFDL0QsSUFBSVYsUUFBUVMsV0FBV1QsS0FBSztJQUM1QixJQUFJVyxTQUFTRixXQUFXRSxNQUFNO0lBQzlCLElBQUlDLFlBQVlILFdBQVdHLFNBQVM7SUFDcEMsSUFBSVgsTUFBTVEsV0FBV1IsR0FBRztJQUN4QixJQUFJQyxRQUFRTyxXQUFXUCxLQUFLO0lBRTVCLElBQUksQ0FBQ1csSUFBSSxHQUFHSCxhQUFhRyxJQUFJO0lBQzdCLElBQUksQ0FBQ0MsS0FBSyxHQUFHSixhQUFhSSxLQUFLO0lBQy9CLElBQUksQ0FBQ0MsUUFBUSxHQUFHTCxhQUFhSyxRQUFRO0lBRXJDLElBQUksQ0FBQ0MsV0FBVyxHQUFHO0lBQ25CLElBQUksQ0FBQ0MsT0FBTyxHQUFHLEVBQUU7SUFDakIsSUFBSUwsV0FBVztRQUNiLElBQUlNLFNBQVN0QixlQUFldUIsY0FBYyxDQUFDbkIsT0FBT1c7UUFDbEQsSUFBSyxJQUFJUyxJQUFJLEdBQUdBLElBQUlGLE9BQU9HLE1BQU0sRUFBRUQsSUFBSztZQUN0QyxJQUFJLENBQUNILE9BQU8sQ0FBQ0ssSUFBSSxDQUFDO2dCQUNoQm5CLFdBQVdKLGFBQWFtQixNQUFNLENBQUNFLEVBQUUsQ0FBQ3BCLEtBQUssRUFBRUMsS0FBS0M7Z0JBQzlDUyxRQUFRTyxNQUFNLENBQUNFLEVBQUUsQ0FBQ1QsTUFBTTtnQkFDeEJZLFdBQVc7WUFDYjtRQUNGO0lBQ0YsT0FBTztRQUNMLElBQUksQ0FBQ04sT0FBTyxDQUFDSyxJQUFJLENBQUM7WUFDaEJuQixXQUFXSixhQUFhQyxPQUFPQyxLQUFLQztZQUNwQ1MsUUFBUUE7WUFDUlksV0FBVztRQUNiO0lBQ0Y7SUFFQSwyREFBMkQ7SUFDM0QsbUZBQW1GO0lBQ25GLDRGQUE0RjtJQUM1Rix5RkFBeUY7SUFDekYsSUFBSXJCLFVBQVUsR0FBRztRQUNmLElBQUksQ0FBQ3NCLFlBQVksR0FBR3ZCO0lBQ3RCLE9BQU8sSUFBSUMsVUFBVSxJQUFJO1FBQ3ZCLElBQUksQ0FBQ3NCLFlBQVksR0FBR3ZCLE1BQU07SUFDNUIsT0FBTztRQUNMLElBQUksQ0FBQ3VCLFlBQVksR0FBRztJQUN0QjtBQUNGO0FBRUFsQixPQUFPbUIsU0FBUyxDQUFDQyxLQUFLLEdBQUc7SUFDdkIsSUFBSSxDQUFDYixJQUFJLENBQ1AsSUFBSSxDQUFDSSxPQUFPLENBQUMsSUFBSSxDQUFDRCxXQUFXLENBQUMsQ0FBQ2IsU0FBUyxHQUFHLEdBQzNDLElBQUksQ0FBQ3dCLGtCQUFrQixDQUFDQyxJQUFJLENBQUMsSUFBSTtBQUVyQztBQUVBdEIsT0FBT21CLFNBQVMsQ0FBQ0ksY0FBYyxHQUFHLFNBQ2hDQyxPQUFPLEVBQ1BDLGNBQWMsRUFDZDVCLFNBQVM7SUFFVCxJQUFJNkIsY0FBYyxJQUFJLENBQUNSLFlBQVk7SUFDbkMsSUFBSVMsY0FBY0QsY0FBYztJQUVoQyxJQUFLLElBQUlFLElBQUksR0FBR0EsSUFBSS9CLFdBQVcrQixJQUFLO1FBQ2xDLElBQUlDLFVBQVVMLE9BQU8sQ0FBQyxJQUFJSSxFQUFFO1FBQzVCLElBQUlFLFNBQVNGLElBQUlELGNBQWNGLGNBQWMsQ0FBQ0csSUFBSUYsWUFBWSxHQUFHO1FBQ2pFRCxjQUFjLENBQUNHLEVBQUUsR0FBR0MsVUFBVUM7SUFDaEM7QUFDRjtBQUVBOUIsT0FBT21CLFNBQVMsQ0FBQ1ksY0FBYyxHQUFHLFNBQ2hDUCxPQUFPLEVBQ1BDLGNBQWMsRUFDZDVCLFNBQVM7SUFFVCxJQUFJbUMsV0FBVyxJQUFJLENBQUNDLFNBQVM7SUFFN0IsSUFBSyxJQUFJTCxJQUFJLEdBQUdBLElBQUkvQixXQUFXK0IsSUFBSztRQUNsQyxJQUFJQyxVQUFVTCxPQUFPLENBQUMsSUFBSUksRUFBRTtRQUM1QixJQUFJTSxPQUFPRixXQUFXQSxRQUFRLENBQUNKLEVBQUUsR0FBRztRQUNwQ0gsY0FBYyxDQUFDRyxFQUFFLEdBQUdDLFVBQVVLO0lBQ2hDO0FBQ0Y7QUFFQWxDLE9BQU9tQixTQUFTLENBQUNnQixjQUFjLEdBQUcsU0FDaENYLE9BQU8sRUFDUEMsY0FBYyxFQUNkNUIsU0FBUztJQUVULElBQUk2QixjQUFjLElBQUksQ0FBQ1IsWUFBWTtJQUNuQyxJQUFJUyxjQUFjRCxjQUFjO0lBQ2hDLElBQUlNLFdBQVcsSUFBSSxDQUFDQyxTQUFTO0lBRTdCLElBQUssSUFBSUwsSUFBSSxHQUFHQSxJQUFJL0IsV0FBVytCLElBQUs7UUFDbEMsSUFBSUMsVUFBVUwsT0FBTyxDQUFDLElBQUlJLEVBQUU7UUFDNUIsSUFBSVEsT0FBT0osV0FBV0EsUUFBUSxDQUFDSixFQUFFLEdBQUc7UUFDcEMsSUFBSVMsU0FBU1QsSUFBSUQsY0FBY0YsY0FBYyxDQUFDRyxJQUFJRixZQUFZLEdBQUc7UUFDakUsSUFBSVksUUFBUXhDLEtBQUt5QyxLQUFLLENBQUMsQ0FBQ0YsU0FBU0QsSUFBRyxJQUFLO1FBQ3pDWCxjQUFjLENBQUNHLEVBQUUsR0FBR0MsVUFBVVM7SUFDaEM7QUFDRjtBQUVBdEMsT0FBT21CLFNBQVMsQ0FBQ3FCLGNBQWMsR0FBRyxTQUNoQ2hCLE9BQU8sRUFDUEMsY0FBYyxFQUNkNUIsU0FBUztJQUVULElBQUk2QixjQUFjLElBQUksQ0FBQ1IsWUFBWTtJQUNuQyxJQUFJUyxjQUFjRCxjQUFjO0lBQ2hDLElBQUlNLFdBQVcsSUFBSSxDQUFDQyxTQUFTO0lBRTdCLElBQUssSUFBSUwsSUFBSSxHQUFHQSxJQUFJL0IsV0FBVytCLElBQUs7UUFDbEMsSUFBSUMsVUFBVUwsT0FBTyxDQUFDLElBQUlJLEVBQUU7UUFDNUIsSUFBSWEsT0FBT1QsV0FBV0EsUUFBUSxDQUFDSixFQUFFLEdBQUc7UUFDcEMsSUFBSWMsU0FBU2QsSUFBSUQsY0FBY0YsY0FBYyxDQUFDRyxJQUFJRixZQUFZLEdBQUc7UUFDakUsSUFBSWlCLFdBQVdmLElBQUlELGVBQWVLLFdBQVdBLFFBQVEsQ0FBQ0osSUFBSUYsWUFBWSxHQUFHO1FBQ3pFLElBQUlrQixRQUFRcEQsZUFBZWtELFFBQVFELE1BQU1FO1FBQ3pDbEIsY0FBYyxDQUFDRyxFQUFFLEdBQUdDLFVBQVVlO0lBQ2hDO0FBQ0Y7QUFFQTVDLE9BQU9tQixTQUFTLENBQUNFLGtCQUFrQixHQUFHLFNBQVVHLE9BQU87SUFDckQsSUFBSXFCLFNBQVNyQixPQUFPLENBQUMsRUFBRTtJQUN2QixJQUFJQztJQUNKLElBQUlxQixlQUFlLElBQUksQ0FBQ25DLE9BQU8sQ0FBQyxJQUFJLENBQUNELFdBQVcsQ0FBQztJQUNqRCxJQUFJYixZQUFZaUQsYUFBYWpELFNBQVM7SUFFdEMsSUFBSWdELFdBQVcsR0FBRztRQUNoQnBCLGlCQUFpQkQsUUFBUXVCLEtBQUssQ0FBQyxHQUFHbEQsWUFBWTtJQUNoRCxPQUFPO1FBQ0w0QixpQkFBaUJ1QixPQUFPQyxLQUFLLENBQUNwRDtRQUU5QixPQUFRZ0Q7WUFDTixLQUFLO2dCQUNILElBQUksQ0FBQ3RCLGNBQWMsQ0FBQ0MsU0FBU0MsZ0JBQWdCNUI7Z0JBQzdDO1lBQ0YsS0FBSztnQkFDSCxJQUFJLENBQUNrQyxjQUFjLENBQUNQLFNBQVNDLGdCQUFnQjVCO2dCQUM3QztZQUNGLEtBQUs7Z0JBQ0gsSUFBSSxDQUFDc0MsY0FBYyxDQUFDWCxTQUFTQyxnQkFBZ0I1QjtnQkFDN0M7WUFDRixLQUFLO2dCQUNILElBQUksQ0FBQzJDLGNBQWMsQ0FBQ2hCLFNBQVNDLGdCQUFnQjVCO2dCQUM3QztZQUNGO2dCQUNFLE1BQU0sSUFBSXFELE1BQU0sZ0NBQWdDTDtRQUNwRDtJQUNGO0lBRUEsSUFBSSxDQUFDckMsS0FBSyxDQUFDaUI7SUFFWHFCLGFBQWE3QixTQUFTO0lBQ3RCLElBQUk2QixhQUFhN0IsU0FBUyxJQUFJNkIsYUFBYXpDLE1BQU0sRUFBRTtRQUNqRCxJQUFJLENBQUM0QixTQUFTLEdBQUc7UUFDakIsSUFBSSxDQUFDdkIsV0FBVztRQUNoQm9DLGVBQWUsSUFBSSxDQUFDbkMsT0FBTyxDQUFDLElBQUksQ0FBQ0QsV0FBVyxDQUFDO0lBQy9DLE9BQU87UUFDTCxJQUFJLENBQUN1QixTQUFTLEdBQUdSO0lBQ25CO0lBRUEsSUFBSXFCLGNBQWM7UUFDaEIsb0VBQW9FO1FBQ3BFLElBQUksQ0FBQ3ZDLElBQUksQ0FBQ3VDLGFBQWFqRCxTQUFTLEdBQUcsR0FBRyxJQUFJLENBQUN3QixrQkFBa0IsQ0FBQ0MsSUFBSSxDQUFDLElBQUk7SUFDekUsT0FBTztRQUNMLElBQUksQ0FBQ1csU0FBUyxHQUFHO1FBQ2pCLElBQUksQ0FBQ3hCLFFBQVE7SUFDZjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGhlLWdyaWQtMi8uL25vZGVfbW9kdWxlcy9wbmdqcy9saWIvZmlsdGVyLXBhcnNlLmpzPzg3YzEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmxldCBpbnRlcmxhY2VVdGlscyA9IHJlcXVpcmUoXCIuL2ludGVybGFjZVwiKTtcbmxldCBwYWV0aFByZWRpY3RvciA9IHJlcXVpcmUoXCIuL3BhZXRoLXByZWRpY3RvclwiKTtcblxuZnVuY3Rpb24gZ2V0Qnl0ZVdpZHRoKHdpZHRoLCBicHAsIGRlcHRoKSB7XG4gIGxldCBieXRlV2lkdGggPSB3aWR0aCAqIGJwcDtcbiAgaWYgKGRlcHRoICE9PSA4KSB7XG4gICAgYnl0ZVdpZHRoID0gTWF0aC5jZWlsKGJ5dGVXaWR0aCAvICg4IC8gZGVwdGgpKTtcbiAgfVxuICByZXR1cm4gYnl0ZVdpZHRoO1xufVxuXG5sZXQgRmlsdGVyID0gKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGJpdG1hcEluZm8sIGRlcGVuZGVuY2llcykge1xuICBsZXQgd2lkdGggPSBiaXRtYXBJbmZvLndpZHRoO1xuICBsZXQgaGVpZ2h0ID0gYml0bWFwSW5mby5oZWlnaHQ7XG4gIGxldCBpbnRlcmxhY2UgPSBiaXRtYXBJbmZvLmludGVybGFjZTtcbiAgbGV0IGJwcCA9IGJpdG1hcEluZm8uYnBwO1xuICBsZXQgZGVwdGggPSBiaXRtYXBJbmZvLmRlcHRoO1xuXG4gIHRoaXMucmVhZCA9IGRlcGVuZGVuY2llcy5yZWFkO1xuICB0aGlzLndyaXRlID0gZGVwZW5kZW5jaWVzLndyaXRlO1xuICB0aGlzLmNvbXBsZXRlID0gZGVwZW5kZW5jaWVzLmNvbXBsZXRlO1xuXG4gIHRoaXMuX2ltYWdlSW5kZXggPSAwO1xuICB0aGlzLl9pbWFnZXMgPSBbXTtcbiAgaWYgKGludGVybGFjZSkge1xuICAgIGxldCBwYXNzZXMgPSBpbnRlcmxhY2VVdGlscy5nZXRJbWFnZVBhc3Nlcyh3aWR0aCwgaGVpZ2h0KTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhc3Nlcy5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy5faW1hZ2VzLnB1c2goe1xuICAgICAgICBieXRlV2lkdGg6IGdldEJ5dGVXaWR0aChwYXNzZXNbaV0ud2lkdGgsIGJwcCwgZGVwdGgpLFxuICAgICAgICBoZWlnaHQ6IHBhc3Nlc1tpXS5oZWlnaHQsXG4gICAgICAgIGxpbmVJbmRleDogMCxcbiAgICAgIH0pO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0aGlzLl9pbWFnZXMucHVzaCh7XG4gICAgICBieXRlV2lkdGg6IGdldEJ5dGVXaWR0aCh3aWR0aCwgYnBwLCBkZXB0aCksXG4gICAgICBoZWlnaHQ6IGhlaWdodCxcbiAgICAgIGxpbmVJbmRleDogMCxcbiAgICB9KTtcbiAgfVxuXG4gIC8vIHdoZW4gZmlsdGVyaW5nIHRoZSBsaW5lIHdlIGxvb2sgYXQgdGhlIHBpeGVsIHRvIHRoZSBsZWZ0XG4gIC8vIHRoZSBzcGVjIGFsc28gc2F5cyBpdCBpcyBkb25lIG9uIGEgYnl0ZSBsZXZlbCByZWdhcmRsZXNzIG9mIHRoZSBudW1iZXIgb2YgcGl4ZWxzXG4gIC8vIHNvIGlmIHRoZSBkZXB0aCBpcyBieXRlIGNvbXBhdGlibGUgKDggb3IgMTYpIHdlIHN1YnRyYWN0IHRoZSBicHAgaW4gb3JkZXIgdG8gY29tcGFyZSBiYWNrXG4gIC8vIGEgcGl4ZWwgcmF0aGVyIHRoYW4ganVzdCBhIGRpZmZlcmVudCBieXRlIHBhcnQuIEhvd2V2ZXIgaWYgd2UgYXJlIHN1YiBieXRlLCB3ZSBpZ25vcmUuXG4gIGlmIChkZXB0aCA9PT0gOCkge1xuICAgIHRoaXMuX3hDb21wYXJpc29uID0gYnBwO1xuICB9IGVsc2UgaWYgKGRlcHRoID09PSAxNikge1xuICAgIHRoaXMuX3hDb21wYXJpc29uID0gYnBwICogMjtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLl94Q29tcGFyaXNvbiA9IDE7XG4gIH1cbn0pO1xuXG5GaWx0ZXIucHJvdG90eXBlLnN0YXJ0ID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLnJlYWQoXG4gICAgdGhpcy5faW1hZ2VzW3RoaXMuX2ltYWdlSW5kZXhdLmJ5dGVXaWR0aCArIDEsXG4gICAgdGhpcy5fcmV2ZXJzZUZpbHRlckxpbmUuYmluZCh0aGlzKVxuICApO1xufTtcblxuRmlsdGVyLnByb3RvdHlwZS5fdW5GaWx0ZXJUeXBlMSA9IGZ1bmN0aW9uIChcbiAgcmF3RGF0YSxcbiAgdW5maWx0ZXJlZExpbmUsXG4gIGJ5dGVXaWR0aFxuKSB7XG4gIGxldCB4Q29tcGFyaXNvbiA9IHRoaXMuX3hDb21wYXJpc29uO1xuICBsZXQgeEJpZ2dlclRoYW4gPSB4Q29tcGFyaXNvbiAtIDE7XG5cbiAgZm9yIChsZXQgeCA9IDA7IHggPCBieXRlV2lkdGg7IHgrKykge1xuICAgIGxldCByYXdCeXRlID0gcmF3RGF0YVsxICsgeF07XG4gICAgbGV0IGYxTGVmdCA9IHggPiB4QmlnZ2VyVGhhbiA/IHVuZmlsdGVyZWRMaW5lW3ggLSB4Q29tcGFyaXNvbl0gOiAwO1xuICAgIHVuZmlsdGVyZWRMaW5lW3hdID0gcmF3Qnl0ZSArIGYxTGVmdDtcbiAgfVxufTtcblxuRmlsdGVyLnByb3RvdHlwZS5fdW5GaWx0ZXJUeXBlMiA9IGZ1bmN0aW9uIChcbiAgcmF3RGF0YSxcbiAgdW5maWx0ZXJlZExpbmUsXG4gIGJ5dGVXaWR0aFxuKSB7XG4gIGxldCBsYXN0TGluZSA9IHRoaXMuX2xhc3RMaW5lO1xuXG4gIGZvciAobGV0IHggPSAwOyB4IDwgYnl0ZVdpZHRoOyB4KyspIHtcbiAgICBsZXQgcmF3Qnl0ZSA9IHJhd0RhdGFbMSArIHhdO1xuICAgIGxldCBmMlVwID0gbGFzdExpbmUgPyBsYXN0TGluZVt4XSA6IDA7XG4gICAgdW5maWx0ZXJlZExpbmVbeF0gPSByYXdCeXRlICsgZjJVcDtcbiAgfVxufTtcblxuRmlsdGVyLnByb3RvdHlwZS5fdW5GaWx0ZXJUeXBlMyA9IGZ1bmN0aW9uIChcbiAgcmF3RGF0YSxcbiAgdW5maWx0ZXJlZExpbmUsXG4gIGJ5dGVXaWR0aFxuKSB7XG4gIGxldCB4Q29tcGFyaXNvbiA9IHRoaXMuX3hDb21wYXJpc29uO1xuICBsZXQgeEJpZ2dlclRoYW4gPSB4Q29tcGFyaXNvbiAtIDE7XG4gIGxldCBsYXN0TGluZSA9IHRoaXMuX2xhc3RMaW5lO1xuXG4gIGZvciAobGV0IHggPSAwOyB4IDwgYnl0ZVdpZHRoOyB4KyspIHtcbiAgICBsZXQgcmF3Qnl0ZSA9IHJhd0RhdGFbMSArIHhdO1xuICAgIGxldCBmM1VwID0gbGFzdExpbmUgPyBsYXN0TGluZVt4XSA6IDA7XG4gICAgbGV0IGYzTGVmdCA9IHggPiB4QmlnZ2VyVGhhbiA/IHVuZmlsdGVyZWRMaW5lW3ggLSB4Q29tcGFyaXNvbl0gOiAwO1xuICAgIGxldCBmM0FkZCA9IE1hdGguZmxvb3IoKGYzTGVmdCArIGYzVXApIC8gMik7XG4gICAgdW5maWx0ZXJlZExpbmVbeF0gPSByYXdCeXRlICsgZjNBZGQ7XG4gIH1cbn07XG5cbkZpbHRlci5wcm90b3R5cGUuX3VuRmlsdGVyVHlwZTQgPSBmdW5jdGlvbiAoXG4gIHJhd0RhdGEsXG4gIHVuZmlsdGVyZWRMaW5lLFxuICBieXRlV2lkdGhcbikge1xuICBsZXQgeENvbXBhcmlzb24gPSB0aGlzLl94Q29tcGFyaXNvbjtcbiAgbGV0IHhCaWdnZXJUaGFuID0geENvbXBhcmlzb24gLSAxO1xuICBsZXQgbGFzdExpbmUgPSB0aGlzLl9sYXN0TGluZTtcblxuICBmb3IgKGxldCB4ID0gMDsgeCA8IGJ5dGVXaWR0aDsgeCsrKSB7XG4gICAgbGV0IHJhd0J5dGUgPSByYXdEYXRhWzEgKyB4XTtcbiAgICBsZXQgZjRVcCA9IGxhc3RMaW5lID8gbGFzdExpbmVbeF0gOiAwO1xuICAgIGxldCBmNExlZnQgPSB4ID4geEJpZ2dlclRoYW4gPyB1bmZpbHRlcmVkTGluZVt4IC0geENvbXBhcmlzb25dIDogMDtcbiAgICBsZXQgZjRVcExlZnQgPSB4ID4geEJpZ2dlclRoYW4gJiYgbGFzdExpbmUgPyBsYXN0TGluZVt4IC0geENvbXBhcmlzb25dIDogMDtcbiAgICBsZXQgZjRBZGQgPSBwYWV0aFByZWRpY3RvcihmNExlZnQsIGY0VXAsIGY0VXBMZWZ0KTtcbiAgICB1bmZpbHRlcmVkTGluZVt4XSA9IHJhd0J5dGUgKyBmNEFkZDtcbiAgfVxufTtcblxuRmlsdGVyLnByb3RvdHlwZS5fcmV2ZXJzZUZpbHRlckxpbmUgPSBmdW5jdGlvbiAocmF3RGF0YSkge1xuICBsZXQgZmlsdGVyID0gcmF3RGF0YVswXTtcbiAgbGV0IHVuZmlsdGVyZWRMaW5lO1xuICBsZXQgY3VycmVudEltYWdlID0gdGhpcy5faW1hZ2VzW3RoaXMuX2ltYWdlSW5kZXhdO1xuICBsZXQgYnl0ZVdpZHRoID0gY3VycmVudEltYWdlLmJ5dGVXaWR0aDtcblxuICBpZiAoZmlsdGVyID09PSAwKSB7XG4gICAgdW5maWx0ZXJlZExpbmUgPSByYXdEYXRhLnNsaWNlKDEsIGJ5dGVXaWR0aCArIDEpO1xuICB9IGVsc2Uge1xuICAgIHVuZmlsdGVyZWRMaW5lID0gQnVmZmVyLmFsbG9jKGJ5dGVXaWR0aCk7XG5cbiAgICBzd2l0Y2ggKGZpbHRlcikge1xuICAgICAgY2FzZSAxOlxuICAgICAgICB0aGlzLl91bkZpbHRlclR5cGUxKHJhd0RhdGEsIHVuZmlsdGVyZWRMaW5lLCBieXRlV2lkdGgpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMjpcbiAgICAgICAgdGhpcy5fdW5GaWx0ZXJUeXBlMihyYXdEYXRhLCB1bmZpbHRlcmVkTGluZSwgYnl0ZVdpZHRoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDM6XG4gICAgICAgIHRoaXMuX3VuRmlsdGVyVHlwZTMocmF3RGF0YSwgdW5maWx0ZXJlZExpbmUsIGJ5dGVXaWR0aCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSA0OlxuICAgICAgICB0aGlzLl91bkZpbHRlclR5cGU0KHJhd0RhdGEsIHVuZmlsdGVyZWRMaW5lLCBieXRlV2lkdGgpO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlVucmVjb2duaXNlZCBmaWx0ZXIgdHlwZSAtIFwiICsgZmlsdGVyKTtcbiAgICB9XG4gIH1cblxuICB0aGlzLndyaXRlKHVuZmlsdGVyZWRMaW5lKTtcblxuICBjdXJyZW50SW1hZ2UubGluZUluZGV4Kys7XG4gIGlmIChjdXJyZW50SW1hZ2UubGluZUluZGV4ID49IGN1cnJlbnRJbWFnZS5oZWlnaHQpIHtcbiAgICB0aGlzLl9sYXN0TGluZSA9IG51bGw7XG4gICAgdGhpcy5faW1hZ2VJbmRleCsrO1xuICAgIGN1cnJlbnRJbWFnZSA9IHRoaXMuX2ltYWdlc1t0aGlzLl9pbWFnZUluZGV4XTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLl9sYXN0TGluZSA9IHVuZmlsdGVyZWRMaW5lO1xuICB9XG5cbiAgaWYgKGN1cnJlbnRJbWFnZSkge1xuICAgIC8vIHJlYWQsIHVzaW5nIHRoZSBieXRlIHdpZHRoIHRoYXQgbWF5IGJlIGZyb20gdGhlIG5ldyBjdXJyZW50IGltYWdlXG4gICAgdGhpcy5yZWFkKGN1cnJlbnRJbWFnZS5ieXRlV2lkdGggKyAxLCB0aGlzLl9yZXZlcnNlRmlsdGVyTGluZS5iaW5kKHRoaXMpKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLl9sYXN0TGluZSA9IG51bGw7XG4gICAgdGhpcy5jb21wbGV0ZSgpO1xuICB9XG59O1xuIl0sIm5hbWVzIjpbImludGVybGFjZVV0aWxzIiwicmVxdWlyZSIsInBhZXRoUHJlZGljdG9yIiwiZ2V0Qnl0ZVdpZHRoIiwid2lkdGgiLCJicHAiLCJkZXB0aCIsImJ5dGVXaWR0aCIsIk1hdGgiLCJjZWlsIiwiRmlsdGVyIiwibW9kdWxlIiwiZXhwb3J0cyIsImJpdG1hcEluZm8iLCJkZXBlbmRlbmNpZXMiLCJoZWlnaHQiLCJpbnRlcmxhY2UiLCJyZWFkIiwid3JpdGUiLCJjb21wbGV0ZSIsIl9pbWFnZUluZGV4IiwiX2ltYWdlcyIsInBhc3NlcyIsImdldEltYWdlUGFzc2VzIiwiaSIsImxlbmd0aCIsInB1c2giLCJsaW5lSW5kZXgiLCJfeENvbXBhcmlzb24iLCJwcm90b3R5cGUiLCJzdGFydCIsIl9yZXZlcnNlRmlsdGVyTGluZSIsImJpbmQiLCJfdW5GaWx0ZXJUeXBlMSIsInJhd0RhdGEiLCJ1bmZpbHRlcmVkTGluZSIsInhDb21wYXJpc29uIiwieEJpZ2dlclRoYW4iLCJ4IiwicmF3Qnl0ZSIsImYxTGVmdCIsIl91bkZpbHRlclR5cGUyIiwibGFzdExpbmUiLCJfbGFzdExpbmUiLCJmMlVwIiwiX3VuRmlsdGVyVHlwZTMiLCJmM1VwIiwiZjNMZWZ0IiwiZjNBZGQiLCJmbG9vciIsIl91bkZpbHRlclR5cGU0IiwiZjRVcCIsImY0TGVmdCIsImY0VXBMZWZ0IiwiZjRBZGQiLCJmaWx0ZXIiLCJjdXJyZW50SW1hZ2UiLCJzbGljZSIsIkJ1ZmZlciIsImFsbG9jIiwiRXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/pngjs/lib/filter-parse.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/pngjs/lib/format-normaliser.js":
/*!*****************************************************!*\
  !*** ./node_modules/pngjs/lib/format-normaliser.js ***!
  \*****************************************************/
/***/ ((module) => {

eval("\nfunction dePalette(indata, outdata, width, height, palette) {\n    let pxPos = 0;\n    // use values from palette\n    for(let y = 0; y < height; y++){\n        for(let x = 0; x < width; x++){\n            let color = palette[indata[pxPos]];\n            if (!color) {\n                throw new Error(\"index \" + indata[pxPos] + \" not in palette\");\n            }\n            for(let i = 0; i < 4; i++){\n                outdata[pxPos + i] = color[i];\n            }\n            pxPos += 4;\n        }\n    }\n}\nfunction replaceTransparentColor(indata, outdata, width, height, transColor) {\n    let pxPos = 0;\n    for(let y = 0; y < height; y++){\n        for(let x = 0; x < width; x++){\n            let makeTrans = false;\n            if (transColor.length === 1) {\n                if (transColor[0] === indata[pxPos]) {\n                    makeTrans = true;\n                }\n            } else if (transColor[0] === indata[pxPos] && transColor[1] === indata[pxPos + 1] && transColor[2] === indata[pxPos + 2]) {\n                makeTrans = true;\n            }\n            if (makeTrans) {\n                for(let i = 0; i < 4; i++){\n                    outdata[pxPos + i] = 0;\n                }\n            }\n            pxPos += 4;\n        }\n    }\n}\nfunction scaleDepth(indata, outdata, width, height, depth) {\n    let maxOutSample = 255;\n    let maxInSample = Math.pow(2, depth) - 1;\n    let pxPos = 0;\n    for(let y = 0; y < height; y++){\n        for(let x = 0; x < width; x++){\n            for(let i = 0; i < 4; i++){\n                outdata[pxPos + i] = Math.floor(indata[pxPos + i] * maxOutSample / maxInSample + 0.5);\n            }\n            pxPos += 4;\n        }\n    }\n}\nmodule.exports = function(indata, imageData) {\n    let depth = imageData.depth;\n    let width = imageData.width;\n    let height = imageData.height;\n    let colorType = imageData.colorType;\n    let transColor = imageData.transColor;\n    let palette = imageData.palette;\n    let outdata = indata; // only different for 16 bits\n    if (colorType === 3) {\n        // paletted\n        dePalette(indata, outdata, width, height, palette);\n    } else {\n        if (transColor) {\n            replaceTransparentColor(indata, outdata, width, height, transColor);\n        }\n        // if it needs scaling\n        if (depth !== 8) {\n            // if we need to change the buffer size\n            if (depth === 16) {\n                outdata = Buffer.alloc(width * height * 4);\n            }\n            scaleDepth(indata, outdata, width, height, depth);\n        }\n    }\n    return outdata;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcG5nanMvbGliL2Zvcm1hdC1ub3JtYWxpc2VyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBRWIsU0FBU0EsVUFBVUMsTUFBTSxFQUFFQyxPQUFPLEVBQUVDLEtBQUssRUFBRUMsTUFBTSxFQUFFQyxPQUFPO0lBQ3hELElBQUlDLFFBQVE7SUFDWiwwQkFBMEI7SUFDMUIsSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUlILFFBQVFHLElBQUs7UUFDL0IsSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUlMLE9BQU9LLElBQUs7WUFDOUIsSUFBSUMsUUFBUUosT0FBTyxDQUFDSixNQUFNLENBQUNLLE1BQU0sQ0FBQztZQUVsQyxJQUFJLENBQUNHLE9BQU87Z0JBQ1YsTUFBTSxJQUFJQyxNQUFNLFdBQVdULE1BQU0sQ0FBQ0ssTUFBTSxHQUFHO1lBQzdDO1lBRUEsSUFBSyxJQUFJSyxJQUFJLEdBQUdBLElBQUksR0FBR0EsSUFBSztnQkFDMUJULE9BQU8sQ0FBQ0ksUUFBUUssRUFBRSxHQUFHRixLQUFLLENBQUNFLEVBQUU7WUFDL0I7WUFDQUwsU0FBUztRQUNYO0lBQ0Y7QUFDRjtBQUVBLFNBQVNNLHdCQUF3QlgsTUFBTSxFQUFFQyxPQUFPLEVBQUVDLEtBQUssRUFBRUMsTUFBTSxFQUFFUyxVQUFVO0lBQ3pFLElBQUlQLFFBQVE7SUFDWixJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSUgsUUFBUUcsSUFBSztRQUMvQixJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSUwsT0FBT0ssSUFBSztZQUM5QixJQUFJTSxZQUFZO1lBRWhCLElBQUlELFdBQVdFLE1BQU0sS0FBSyxHQUFHO2dCQUMzQixJQUFJRixVQUFVLENBQUMsRUFBRSxLQUFLWixNQUFNLENBQUNLLE1BQU0sRUFBRTtvQkFDbkNRLFlBQVk7Z0JBQ2Q7WUFDRixPQUFPLElBQ0xELFVBQVUsQ0FBQyxFQUFFLEtBQUtaLE1BQU0sQ0FBQ0ssTUFBTSxJQUMvQk8sVUFBVSxDQUFDLEVBQUUsS0FBS1osTUFBTSxDQUFDSyxRQUFRLEVBQUUsSUFDbkNPLFVBQVUsQ0FBQyxFQUFFLEtBQUtaLE1BQU0sQ0FBQ0ssUUFBUSxFQUFFLEVBQ25DO2dCQUNBUSxZQUFZO1lBQ2Q7WUFDQSxJQUFJQSxXQUFXO2dCQUNiLElBQUssSUFBSUgsSUFBSSxHQUFHQSxJQUFJLEdBQUdBLElBQUs7b0JBQzFCVCxPQUFPLENBQUNJLFFBQVFLLEVBQUUsR0FBRztnQkFDdkI7WUFDRjtZQUNBTCxTQUFTO1FBQ1g7SUFDRjtBQUNGO0FBRUEsU0FBU1UsV0FBV2YsTUFBTSxFQUFFQyxPQUFPLEVBQUVDLEtBQUssRUFBRUMsTUFBTSxFQUFFYSxLQUFLO0lBQ3ZELElBQUlDLGVBQWU7SUFDbkIsSUFBSUMsY0FBY0MsS0FBS0MsR0FBRyxDQUFDLEdBQUdKLFNBQVM7SUFDdkMsSUFBSVgsUUFBUTtJQUVaLElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJSCxRQUFRRyxJQUFLO1FBQy9CLElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJTCxPQUFPSyxJQUFLO1lBQzlCLElBQUssSUFBSUcsSUFBSSxHQUFHQSxJQUFJLEdBQUdBLElBQUs7Z0JBQzFCVCxPQUFPLENBQUNJLFFBQVFLLEVBQUUsR0FBR1MsS0FBS0UsS0FBSyxDQUM3QixNQUFPLENBQUNoQixRQUFRSyxFQUFFLEdBQUdPLGVBQWdCQyxjQUFjO1lBRXZEO1lBQ0FiLFNBQVM7UUFDWDtJQUNGO0FBQ0Y7QUFFQWlCLE9BQU9DLE9BQU8sR0FBRyxTQUFVdkIsTUFBTSxFQUFFd0IsU0FBUztJQUMxQyxJQUFJUixRQUFRUSxVQUFVUixLQUFLO0lBQzNCLElBQUlkLFFBQVFzQixVQUFVdEIsS0FBSztJQUMzQixJQUFJQyxTQUFTcUIsVUFBVXJCLE1BQU07SUFDN0IsSUFBSXNCLFlBQVlELFVBQVVDLFNBQVM7SUFDbkMsSUFBSWIsYUFBYVksVUFBVVosVUFBVTtJQUNyQyxJQUFJUixVQUFVb0IsVUFBVXBCLE9BQU87SUFFL0IsSUFBSUgsVUFBVUQsUUFBUSw2QkFBNkI7SUFFbkQsSUFBSXlCLGNBQWMsR0FBRztRQUNuQixXQUFXO1FBQ1gxQixVQUFVQyxRQUFRQyxTQUFTQyxPQUFPQyxRQUFRQztJQUM1QyxPQUFPO1FBQ0wsSUFBSVEsWUFBWTtZQUNkRCx3QkFBd0JYLFFBQVFDLFNBQVNDLE9BQU9DLFFBQVFTO1FBQzFEO1FBQ0Esc0JBQXNCO1FBQ3RCLElBQUlJLFVBQVUsR0FBRztZQUNmLHVDQUF1QztZQUN2QyxJQUFJQSxVQUFVLElBQUk7Z0JBQ2hCZixVQUFVeUIsT0FBT0MsS0FBSyxDQUFDekIsUUFBUUMsU0FBUztZQUMxQztZQUNBWSxXQUFXZixRQUFRQyxTQUFTQyxPQUFPQyxRQUFRYTtRQUM3QztJQUNGO0lBQ0EsT0FBT2Y7QUFDVCIsInNvdXJjZXMiOlsid2VicGFjazovL3RoZS1ncmlkLTIvLi9ub2RlX21vZHVsZXMvcG5nanMvbGliL2Zvcm1hdC1ub3JtYWxpc2VyLmpzP2RmZmEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIGRlUGFsZXR0ZShpbmRhdGEsIG91dGRhdGEsIHdpZHRoLCBoZWlnaHQsIHBhbGV0dGUpIHtcbiAgbGV0IHB4UG9zID0gMDtcbiAgLy8gdXNlIHZhbHVlcyBmcm9tIHBhbGV0dGVcbiAgZm9yIChsZXQgeSA9IDA7IHkgPCBoZWlnaHQ7IHkrKykge1xuICAgIGZvciAobGV0IHggPSAwOyB4IDwgd2lkdGg7IHgrKykge1xuICAgICAgbGV0IGNvbG9yID0gcGFsZXR0ZVtpbmRhdGFbcHhQb3NdXTtcblxuICAgICAgaWYgKCFjb2xvcikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbmRleCBcIiArIGluZGF0YVtweFBvc10gKyBcIiBub3QgaW4gcGFsZXR0ZVwiKTtcbiAgICAgIH1cblxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCA0OyBpKyspIHtcbiAgICAgICAgb3V0ZGF0YVtweFBvcyArIGldID0gY29sb3JbaV07XG4gICAgICB9XG4gICAgICBweFBvcyArPSA0O1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiByZXBsYWNlVHJhbnNwYXJlbnRDb2xvcihpbmRhdGEsIG91dGRhdGEsIHdpZHRoLCBoZWlnaHQsIHRyYW5zQ29sb3IpIHtcbiAgbGV0IHB4UG9zID0gMDtcbiAgZm9yIChsZXQgeSA9IDA7IHkgPCBoZWlnaHQ7IHkrKykge1xuICAgIGZvciAobGV0IHggPSAwOyB4IDwgd2lkdGg7IHgrKykge1xuICAgICAgbGV0IG1ha2VUcmFucyA9IGZhbHNlO1xuXG4gICAgICBpZiAodHJhbnNDb2xvci5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgaWYgKHRyYW5zQ29sb3JbMF0gPT09IGluZGF0YVtweFBvc10pIHtcbiAgICAgICAgICBtYWtlVHJhbnMgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKFxuICAgICAgICB0cmFuc0NvbG9yWzBdID09PSBpbmRhdGFbcHhQb3NdICYmXG4gICAgICAgIHRyYW5zQ29sb3JbMV0gPT09IGluZGF0YVtweFBvcyArIDFdICYmXG4gICAgICAgIHRyYW5zQ29sb3JbMl0gPT09IGluZGF0YVtweFBvcyArIDJdXG4gICAgICApIHtcbiAgICAgICAgbWFrZVRyYW5zID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChtYWtlVHJhbnMpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCA0OyBpKyspIHtcbiAgICAgICAgICBvdXRkYXRhW3B4UG9zICsgaV0gPSAwO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBweFBvcyArPSA0O1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBzY2FsZURlcHRoKGluZGF0YSwgb3V0ZGF0YSwgd2lkdGgsIGhlaWdodCwgZGVwdGgpIHtcbiAgbGV0IG1heE91dFNhbXBsZSA9IDI1NTtcbiAgbGV0IG1heEluU2FtcGxlID0gTWF0aC5wb3coMiwgZGVwdGgpIC0gMTtcbiAgbGV0IHB4UG9zID0gMDtcblxuICBmb3IgKGxldCB5ID0gMDsgeSA8IGhlaWdodDsgeSsrKSB7XG4gICAgZm9yIChsZXQgeCA9IDA7IHggPCB3aWR0aDsgeCsrKSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDQ7IGkrKykge1xuICAgICAgICBvdXRkYXRhW3B4UG9zICsgaV0gPSBNYXRoLmZsb29yKFxuICAgICAgICAgIChpbmRhdGFbcHhQb3MgKyBpXSAqIG1heE91dFNhbXBsZSkgLyBtYXhJblNhbXBsZSArIDAuNVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgcHhQb3MgKz0gNDtcbiAgICB9XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5kYXRhLCBpbWFnZURhdGEpIHtcbiAgbGV0IGRlcHRoID0gaW1hZ2VEYXRhLmRlcHRoO1xuICBsZXQgd2lkdGggPSBpbWFnZURhdGEud2lkdGg7XG4gIGxldCBoZWlnaHQgPSBpbWFnZURhdGEuaGVpZ2h0O1xuICBsZXQgY29sb3JUeXBlID0gaW1hZ2VEYXRhLmNvbG9yVHlwZTtcbiAgbGV0IHRyYW5zQ29sb3IgPSBpbWFnZURhdGEudHJhbnNDb2xvcjtcbiAgbGV0IHBhbGV0dGUgPSBpbWFnZURhdGEucGFsZXR0ZTtcblxuICBsZXQgb3V0ZGF0YSA9IGluZGF0YTsgLy8gb25seSBkaWZmZXJlbnQgZm9yIDE2IGJpdHNcblxuICBpZiAoY29sb3JUeXBlID09PSAzKSB7XG4gICAgLy8gcGFsZXR0ZWRcbiAgICBkZVBhbGV0dGUoaW5kYXRhLCBvdXRkYXRhLCB3aWR0aCwgaGVpZ2h0LCBwYWxldHRlKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAodHJhbnNDb2xvcikge1xuICAgICAgcmVwbGFjZVRyYW5zcGFyZW50Q29sb3IoaW5kYXRhLCBvdXRkYXRhLCB3aWR0aCwgaGVpZ2h0LCB0cmFuc0NvbG9yKTtcbiAgICB9XG4gICAgLy8gaWYgaXQgbmVlZHMgc2NhbGluZ1xuICAgIGlmIChkZXB0aCAhPT0gOCkge1xuICAgICAgLy8gaWYgd2UgbmVlZCB0byBjaGFuZ2UgdGhlIGJ1ZmZlciBzaXplXG4gICAgICBpZiAoZGVwdGggPT09IDE2KSB7XG4gICAgICAgIG91dGRhdGEgPSBCdWZmZXIuYWxsb2Mod2lkdGggKiBoZWlnaHQgKiA0KTtcbiAgICAgIH1cbiAgICAgIHNjYWxlRGVwdGgoaW5kYXRhLCBvdXRkYXRhLCB3aWR0aCwgaGVpZ2h0LCBkZXB0aCk7XG4gICAgfVxuICB9XG4gIHJldHVybiBvdXRkYXRhO1xufTtcbiJdLCJuYW1lcyI6WyJkZVBhbGV0dGUiLCJpbmRhdGEiLCJvdXRkYXRhIiwid2lkdGgiLCJoZWlnaHQiLCJwYWxldHRlIiwicHhQb3MiLCJ5IiwieCIsImNvbG9yIiwiRXJyb3IiLCJpIiwicmVwbGFjZVRyYW5zcGFyZW50Q29sb3IiLCJ0cmFuc0NvbG9yIiwibWFrZVRyYW5zIiwibGVuZ3RoIiwic2NhbGVEZXB0aCIsImRlcHRoIiwibWF4T3V0U2FtcGxlIiwibWF4SW5TYW1wbGUiLCJNYXRoIiwicG93IiwiZmxvb3IiLCJtb2R1bGUiLCJleHBvcnRzIiwiaW1hZ2VEYXRhIiwiY29sb3JUeXBlIiwiQnVmZmVyIiwiYWxsb2MiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/pngjs/lib/format-normaliser.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/pngjs/lib/interlace.js":
/*!*********************************************!*\
  !*** ./node_modules/pngjs/lib/interlace.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// Adam 7\n//   0 1 2 3 4 5 6 7\n// 0 x 6 4 6 x 6 4 6\n// 1 7 7 7 7 7 7 7 7\n// 2 5 6 5 6 5 6 5 6\n// 3 7 7 7 7 7 7 7 7\n// 4 3 6 4 6 3 6 4 6\n// 5 7 7 7 7 7 7 7 7\n// 6 5 6 5 6 5 6 5 6\n// 7 7 7 7 7 7 7 7 7\nlet imagePasses = [\n    {\n        // pass 1 - 1px\n        x: [\n            0\n        ],\n        y: [\n            0\n        ]\n    },\n    {\n        // pass 2 - 1px\n        x: [\n            4\n        ],\n        y: [\n            0\n        ]\n    },\n    {\n        // pass 3 - 2px\n        x: [\n            0,\n            4\n        ],\n        y: [\n            4\n        ]\n    },\n    {\n        // pass 4 - 4px\n        x: [\n            2,\n            6\n        ],\n        y: [\n            0,\n            4\n        ]\n    },\n    {\n        // pass 5 - 8px\n        x: [\n            0,\n            2,\n            4,\n            6\n        ],\n        y: [\n            2,\n            6\n        ]\n    },\n    {\n        // pass 6 - 16px\n        x: [\n            1,\n            3,\n            5,\n            7\n        ],\n        y: [\n            0,\n            2,\n            4,\n            6\n        ]\n    },\n    {\n        // pass 7 - 32px\n        x: [\n            0,\n            1,\n            2,\n            3,\n            4,\n            5,\n            6,\n            7\n        ],\n        y: [\n            1,\n            3,\n            5,\n            7\n        ]\n    }\n];\nexports.getImagePasses = function(width, height) {\n    let images = [];\n    let xLeftOver = width % 8;\n    let yLeftOver = height % 8;\n    let xRepeats = (width - xLeftOver) / 8;\n    let yRepeats = (height - yLeftOver) / 8;\n    for(let i = 0; i < imagePasses.length; i++){\n        let pass = imagePasses[i];\n        let passWidth = xRepeats * pass.x.length;\n        let passHeight = yRepeats * pass.y.length;\n        for(let j = 0; j < pass.x.length; j++){\n            if (pass.x[j] < xLeftOver) {\n                passWidth++;\n            } else {\n                break;\n            }\n        }\n        for(let j = 0; j < pass.y.length; j++){\n            if (pass.y[j] < yLeftOver) {\n                passHeight++;\n            } else {\n                break;\n            }\n        }\n        if (passWidth > 0 && passHeight > 0) {\n            images.push({\n                width: passWidth,\n                height: passHeight,\n                index: i\n            });\n        }\n    }\n    return images;\n};\nexports.getInterlaceIterator = function(width) {\n    return function(x, y, pass) {\n        let outerXLeftOver = x % imagePasses[pass].x.length;\n        let outerX = (x - outerXLeftOver) / imagePasses[pass].x.length * 8 + imagePasses[pass].x[outerXLeftOver];\n        let outerYLeftOver = y % imagePasses[pass].y.length;\n        let outerY = (y - outerYLeftOver) / imagePasses[pass].y.length * 8 + imagePasses[pass].y[outerYLeftOver];\n        return outerX * 4 + outerY * width * 4;\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcG5nanMvbGliL2ludGVybGFjZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViLFNBQVM7QUFDVCxvQkFBb0I7QUFDcEIsb0JBQW9CO0FBQ3BCLG9CQUFvQjtBQUNwQixvQkFBb0I7QUFDcEIsb0JBQW9CO0FBQ3BCLG9CQUFvQjtBQUNwQixvQkFBb0I7QUFDcEIsb0JBQW9CO0FBQ3BCLG9CQUFvQjtBQUVwQixJQUFJQSxjQUFjO0lBQ2hCO1FBQ0UsZUFBZTtRQUNmQyxHQUFHO1lBQUM7U0FBRTtRQUNOQyxHQUFHO1lBQUM7U0FBRTtJQUNSO0lBQ0E7UUFDRSxlQUFlO1FBQ2ZELEdBQUc7WUFBQztTQUFFO1FBQ05DLEdBQUc7WUFBQztTQUFFO0lBQ1I7SUFDQTtRQUNFLGVBQWU7UUFDZkQsR0FBRztZQUFDO1lBQUc7U0FBRTtRQUNUQyxHQUFHO1lBQUM7U0FBRTtJQUNSO0lBQ0E7UUFDRSxlQUFlO1FBQ2ZELEdBQUc7WUFBQztZQUFHO1NBQUU7UUFDVEMsR0FBRztZQUFDO1lBQUc7U0FBRTtJQUNYO0lBQ0E7UUFDRSxlQUFlO1FBQ2ZELEdBQUc7WUFBQztZQUFHO1lBQUc7WUFBRztTQUFFO1FBQ2ZDLEdBQUc7WUFBQztZQUFHO1NBQUU7SUFDWDtJQUNBO1FBQ0UsZ0JBQWdCO1FBQ2hCRCxHQUFHO1lBQUM7WUFBRztZQUFHO1lBQUc7U0FBRTtRQUNmQyxHQUFHO1lBQUM7WUFBRztZQUFHO1lBQUc7U0FBRTtJQUNqQjtJQUNBO1FBQ0UsZ0JBQWdCO1FBQ2hCRCxHQUFHO1lBQUM7WUFBRztZQUFHO1lBQUc7WUFBRztZQUFHO1lBQUc7WUFBRztTQUFFO1FBQzNCQyxHQUFHO1lBQUM7WUFBRztZQUFHO1lBQUc7U0FBRTtJQUNqQjtDQUNEO0FBRURDLHNCQUFzQixHQUFHLFNBQVVFLEtBQUssRUFBRUMsTUFBTTtJQUM5QyxJQUFJQyxTQUFTLEVBQUU7SUFDZixJQUFJQyxZQUFZSCxRQUFRO0lBQ3hCLElBQUlJLFlBQVlILFNBQVM7SUFDekIsSUFBSUksV0FBVyxDQUFDTCxRQUFRRyxTQUFRLElBQUs7SUFDckMsSUFBSUcsV0FBVyxDQUFDTCxTQUFTRyxTQUFRLElBQUs7SUFDdEMsSUFBSyxJQUFJRyxJQUFJLEdBQUdBLElBQUlaLFlBQVlhLE1BQU0sRUFBRUQsSUFBSztRQUMzQyxJQUFJRSxPQUFPZCxXQUFXLENBQUNZLEVBQUU7UUFDekIsSUFBSUcsWUFBWUwsV0FBV0ksS0FBS2IsQ0FBQyxDQUFDWSxNQUFNO1FBQ3hDLElBQUlHLGFBQWFMLFdBQVdHLEtBQUtaLENBQUMsQ0FBQ1csTUFBTTtRQUN6QyxJQUFLLElBQUlJLElBQUksR0FBR0EsSUFBSUgsS0FBS2IsQ0FBQyxDQUFDWSxNQUFNLEVBQUVJLElBQUs7WUFDdEMsSUFBSUgsS0FBS2IsQ0FBQyxDQUFDZ0IsRUFBRSxHQUFHVCxXQUFXO2dCQUN6Qk87WUFDRixPQUFPO2dCQUNMO1lBQ0Y7UUFDRjtRQUNBLElBQUssSUFBSUUsSUFBSSxHQUFHQSxJQUFJSCxLQUFLWixDQUFDLENBQUNXLE1BQU0sRUFBRUksSUFBSztZQUN0QyxJQUFJSCxLQUFLWixDQUFDLENBQUNlLEVBQUUsR0FBR1IsV0FBVztnQkFDekJPO1lBQ0YsT0FBTztnQkFDTDtZQUNGO1FBQ0Y7UUFDQSxJQUFJRCxZQUFZLEtBQUtDLGFBQWEsR0FBRztZQUNuQ1QsT0FBT1csSUFBSSxDQUFDO2dCQUFFYixPQUFPVTtnQkFBV1QsUUFBUVU7Z0JBQVlHLE9BQU9QO1lBQUU7UUFDL0Q7SUFDRjtJQUNBLE9BQU9MO0FBQ1Q7QUFFQUosNEJBQTRCLEdBQUcsU0FBVUUsS0FBSztJQUM1QyxPQUFPLFNBQVVKLENBQUMsRUFBRUMsQ0FBQyxFQUFFWSxJQUFJO1FBQ3pCLElBQUlPLGlCQUFpQnBCLElBQUlELFdBQVcsQ0FBQ2MsS0FBSyxDQUFDYixDQUFDLENBQUNZLE1BQU07UUFDbkQsSUFBSVMsU0FDRixDQUFFckIsSUFBSW9CLGNBQWEsSUFBS3JCLFdBQVcsQ0FBQ2MsS0FBSyxDQUFDYixDQUFDLENBQUNZLE1BQU0sR0FBSSxJQUN0RGIsV0FBVyxDQUFDYyxLQUFLLENBQUNiLENBQUMsQ0FBQ29CLGVBQWU7UUFDckMsSUFBSUUsaUJBQWlCckIsSUFBSUYsV0FBVyxDQUFDYyxLQUFLLENBQUNaLENBQUMsQ0FBQ1csTUFBTTtRQUNuRCxJQUFJVyxTQUNGLENBQUV0QixJQUFJcUIsY0FBYSxJQUFLdkIsV0FBVyxDQUFDYyxLQUFLLENBQUNaLENBQUMsQ0FBQ1csTUFBTSxHQUFJLElBQ3REYixXQUFXLENBQUNjLEtBQUssQ0FBQ1osQ0FBQyxDQUFDcUIsZUFBZTtRQUNyQyxPQUFPRCxTQUFTLElBQUlFLFNBQVNuQixRQUFRO0lBQ3ZDO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90aGUtZ3JpZC0yLy4vbm9kZV9tb2R1bGVzL3BuZ2pzL2xpYi9pbnRlcmxhY2UuanM/YWRhYiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLy8gQWRhbSA3XG4vLyAgIDAgMSAyIDMgNCA1IDYgN1xuLy8gMCB4IDYgNCA2IHggNiA0IDZcbi8vIDEgNyA3IDcgNyA3IDcgNyA3XG4vLyAyIDUgNiA1IDYgNSA2IDUgNlxuLy8gMyA3IDcgNyA3IDcgNyA3IDdcbi8vIDQgMyA2IDQgNiAzIDYgNCA2XG4vLyA1IDcgNyA3IDcgNyA3IDcgN1xuLy8gNiA1IDYgNSA2IDUgNiA1IDZcbi8vIDcgNyA3IDcgNyA3IDcgNyA3XG5cbmxldCBpbWFnZVBhc3NlcyA9IFtcbiAge1xuICAgIC8vIHBhc3MgMSAtIDFweFxuICAgIHg6IFswXSxcbiAgICB5OiBbMF0sXG4gIH0sXG4gIHtcbiAgICAvLyBwYXNzIDIgLSAxcHhcbiAgICB4OiBbNF0sXG4gICAgeTogWzBdLFxuICB9LFxuICB7XG4gICAgLy8gcGFzcyAzIC0gMnB4XG4gICAgeDogWzAsIDRdLFxuICAgIHk6IFs0XSxcbiAgfSxcbiAge1xuICAgIC8vIHBhc3MgNCAtIDRweFxuICAgIHg6IFsyLCA2XSxcbiAgICB5OiBbMCwgNF0sXG4gIH0sXG4gIHtcbiAgICAvLyBwYXNzIDUgLSA4cHhcbiAgICB4OiBbMCwgMiwgNCwgNl0sXG4gICAgeTogWzIsIDZdLFxuICB9LFxuICB7XG4gICAgLy8gcGFzcyA2IC0gMTZweFxuICAgIHg6IFsxLCAzLCA1LCA3XSxcbiAgICB5OiBbMCwgMiwgNCwgNl0sXG4gIH0sXG4gIHtcbiAgICAvLyBwYXNzIDcgLSAzMnB4XG4gICAgeDogWzAsIDEsIDIsIDMsIDQsIDUsIDYsIDddLFxuICAgIHk6IFsxLCAzLCA1LCA3XSxcbiAgfSxcbl07XG5cbmV4cG9ydHMuZ2V0SW1hZ2VQYXNzZXMgPSBmdW5jdGlvbiAod2lkdGgsIGhlaWdodCkge1xuICBsZXQgaW1hZ2VzID0gW107XG4gIGxldCB4TGVmdE92ZXIgPSB3aWR0aCAlIDg7XG4gIGxldCB5TGVmdE92ZXIgPSBoZWlnaHQgJSA4O1xuICBsZXQgeFJlcGVhdHMgPSAod2lkdGggLSB4TGVmdE92ZXIpIC8gODtcbiAgbGV0IHlSZXBlYXRzID0gKGhlaWdodCAtIHlMZWZ0T3ZlcikgLyA4O1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGltYWdlUGFzc2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgbGV0IHBhc3MgPSBpbWFnZVBhc3Nlc1tpXTtcbiAgICBsZXQgcGFzc1dpZHRoID0geFJlcGVhdHMgKiBwYXNzLngubGVuZ3RoO1xuICAgIGxldCBwYXNzSGVpZ2h0ID0geVJlcGVhdHMgKiBwYXNzLnkubGVuZ3RoO1xuICAgIGZvciAobGV0IGogPSAwOyBqIDwgcGFzcy54Lmxlbmd0aDsgaisrKSB7XG4gICAgICBpZiAocGFzcy54W2pdIDwgeExlZnRPdmVyKSB7XG4gICAgICAgIHBhc3NXaWR0aCsrO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAobGV0IGogPSAwOyBqIDwgcGFzcy55Lmxlbmd0aDsgaisrKSB7XG4gICAgICBpZiAocGFzcy55W2pdIDwgeUxlZnRPdmVyKSB7XG4gICAgICAgIHBhc3NIZWlnaHQrKztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAocGFzc1dpZHRoID4gMCAmJiBwYXNzSGVpZ2h0ID4gMCkge1xuICAgICAgaW1hZ2VzLnB1c2goeyB3aWR0aDogcGFzc1dpZHRoLCBoZWlnaHQ6IHBhc3NIZWlnaHQsIGluZGV4OiBpIH0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gaW1hZ2VzO1xufTtcblxuZXhwb3J0cy5nZXRJbnRlcmxhY2VJdGVyYXRvciA9IGZ1bmN0aW9uICh3aWR0aCkge1xuICByZXR1cm4gZnVuY3Rpb24gKHgsIHksIHBhc3MpIHtcbiAgICBsZXQgb3V0ZXJYTGVmdE92ZXIgPSB4ICUgaW1hZ2VQYXNzZXNbcGFzc10ueC5sZW5ndGg7XG4gICAgbGV0IG91dGVyWCA9XG4gICAgICAoKHggLSBvdXRlclhMZWZ0T3ZlcikgLyBpbWFnZVBhc3Nlc1twYXNzXS54Lmxlbmd0aCkgKiA4ICtcbiAgICAgIGltYWdlUGFzc2VzW3Bhc3NdLnhbb3V0ZXJYTGVmdE92ZXJdO1xuICAgIGxldCBvdXRlcllMZWZ0T3ZlciA9IHkgJSBpbWFnZVBhc3Nlc1twYXNzXS55Lmxlbmd0aDtcbiAgICBsZXQgb3V0ZXJZID1cbiAgICAgICgoeSAtIG91dGVyWUxlZnRPdmVyKSAvIGltYWdlUGFzc2VzW3Bhc3NdLnkubGVuZ3RoKSAqIDggK1xuICAgICAgaW1hZ2VQYXNzZXNbcGFzc10ueVtvdXRlcllMZWZ0T3Zlcl07XG4gICAgcmV0dXJuIG91dGVyWCAqIDQgKyBvdXRlclkgKiB3aWR0aCAqIDQ7XG4gIH07XG59O1xuIl0sIm5hbWVzIjpbImltYWdlUGFzc2VzIiwieCIsInkiLCJleHBvcnRzIiwiZ2V0SW1hZ2VQYXNzZXMiLCJ3aWR0aCIsImhlaWdodCIsImltYWdlcyIsInhMZWZ0T3ZlciIsInlMZWZ0T3ZlciIsInhSZXBlYXRzIiwieVJlcGVhdHMiLCJpIiwibGVuZ3RoIiwicGFzcyIsInBhc3NXaWR0aCIsInBhc3NIZWlnaHQiLCJqIiwicHVzaCIsImluZGV4IiwiZ2V0SW50ZXJsYWNlSXRlcmF0b3IiLCJvdXRlclhMZWZ0T3ZlciIsIm91dGVyWCIsIm91dGVyWUxlZnRPdmVyIiwib3V0ZXJZIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/pngjs/lib/interlace.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/pngjs/lib/packer-async.js":
/*!************************************************!*\
  !*** ./node_modules/pngjs/lib/packer-async.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nlet util = __webpack_require__(/*! util */ \"util\");\nlet Stream = __webpack_require__(/*! stream */ \"stream\");\nlet constants = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/pngjs/lib/constants.js\");\nlet Packer = __webpack_require__(/*! ./packer */ \"(ssr)/./node_modules/pngjs/lib/packer.js\");\nlet PackerAsync = module.exports = function(opt) {\n    Stream.call(this);\n    let options = opt || {};\n    this._packer = new Packer(options);\n    this._deflate = this._packer.createDeflate();\n    this.readable = true;\n};\nutil.inherits(PackerAsync, Stream);\nPackerAsync.prototype.pack = function(data, width, height, gamma) {\n    // Signature\n    this.emit(\"data\", Buffer.from(constants.PNG_SIGNATURE));\n    this.emit(\"data\", this._packer.packIHDR(width, height));\n    if (gamma) {\n        this.emit(\"data\", this._packer.packGAMA(gamma));\n    }\n    let filteredData = this._packer.filterData(data, width, height);\n    // compress it\n    this._deflate.on(\"error\", this.emit.bind(this, \"error\"));\n    this._deflate.on(\"data\", (function(compressedData) {\n        this.emit(\"data\", this._packer.packIDAT(compressedData));\n    }).bind(this));\n    this._deflate.on(\"end\", (function() {\n        this.emit(\"data\", this._packer.packIEND());\n        this.emit(\"end\");\n    }).bind(this));\n    this._deflate.end(filteredData);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcG5nanMvbGliL3BhY2tlci1hc3luYy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViLElBQUlBLE9BQU9DLG1CQUFPQSxDQUFDLGtCQUFNO0FBQ3pCLElBQUlDLFNBQVNELG1CQUFPQSxDQUFDLHNCQUFRO0FBQzdCLElBQUlFLFlBQVlGLG1CQUFPQSxDQUFDLGdFQUFhO0FBQ3JDLElBQUlHLFNBQVNILG1CQUFPQSxDQUFDLDBEQUFVO0FBRS9CLElBQUlJLGNBQWVDLE9BQU9DLE9BQU8sR0FBRyxTQUFVQyxHQUFHO0lBQy9DTixPQUFPTyxJQUFJLENBQUMsSUFBSTtJQUVoQixJQUFJQyxVQUFVRixPQUFPLENBQUM7SUFFdEIsSUFBSSxDQUFDRyxPQUFPLEdBQUcsSUFBSVAsT0FBT007SUFDMUIsSUFBSSxDQUFDRSxRQUFRLEdBQUcsSUFBSSxDQUFDRCxPQUFPLENBQUNFLGFBQWE7SUFFMUMsSUFBSSxDQUFDQyxRQUFRLEdBQUc7QUFDbEI7QUFDQWQsS0FBS2UsUUFBUSxDQUFDVixhQUFhSDtBQUUzQkcsWUFBWVcsU0FBUyxDQUFDQyxJQUFJLEdBQUcsU0FBVUMsSUFBSSxFQUFFQyxLQUFLLEVBQUVDLE1BQU0sRUFBRUMsS0FBSztJQUMvRCxZQUFZO0lBQ1osSUFBSSxDQUFDQyxJQUFJLENBQUMsUUFBUUMsT0FBT0MsSUFBSSxDQUFDckIsVUFBVXNCLGFBQWE7SUFDckQsSUFBSSxDQUFDSCxJQUFJLENBQUMsUUFBUSxJQUFJLENBQUNYLE9BQU8sQ0FBQ2UsUUFBUSxDQUFDUCxPQUFPQztJQUUvQyxJQUFJQyxPQUFPO1FBQ1QsSUFBSSxDQUFDQyxJQUFJLENBQUMsUUFBUSxJQUFJLENBQUNYLE9BQU8sQ0FBQ2dCLFFBQVEsQ0FBQ047SUFDMUM7SUFFQSxJQUFJTyxlQUFlLElBQUksQ0FBQ2pCLE9BQU8sQ0FBQ2tCLFVBQVUsQ0FBQ1gsTUFBTUMsT0FBT0M7SUFFeEQsY0FBYztJQUNkLElBQUksQ0FBQ1IsUUFBUSxDQUFDa0IsRUFBRSxDQUFDLFNBQVMsSUFBSSxDQUFDUixJQUFJLENBQUNTLElBQUksQ0FBQyxJQUFJLEVBQUU7SUFFL0MsSUFBSSxDQUFDbkIsUUFBUSxDQUFDa0IsRUFBRSxDQUNkLFFBQ0EsVUFBVUUsY0FBYztRQUN0QixJQUFJLENBQUNWLElBQUksQ0FBQyxRQUFRLElBQUksQ0FBQ1gsT0FBTyxDQUFDc0IsUUFBUSxDQUFDRDtJQUMxQyxHQUFFRCxJQUFJLENBQUMsSUFBSTtJQUdiLElBQUksQ0FBQ25CLFFBQVEsQ0FBQ2tCLEVBQUUsQ0FDZCxPQUNBO1FBQ0UsSUFBSSxDQUFDUixJQUFJLENBQUMsUUFBUSxJQUFJLENBQUNYLE9BQU8sQ0FBQ3VCLFFBQVE7UUFDdkMsSUFBSSxDQUFDWixJQUFJLENBQUM7SUFDWixHQUFFUyxJQUFJLENBQUMsSUFBSTtJQUdiLElBQUksQ0FBQ25CLFFBQVEsQ0FBQ3VCLEdBQUcsQ0FBQ1A7QUFDcEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90aGUtZ3JpZC0yLy4vbm9kZV9tb2R1bGVzL3BuZ2pzL2xpYi9wYWNrZXItYXN5bmMuanM/MTM0YiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxubGV0IHV0aWwgPSByZXF1aXJlKFwidXRpbFwiKTtcbmxldCBTdHJlYW0gPSByZXF1aXJlKFwic3RyZWFtXCIpO1xubGV0IGNvbnN0YW50cyA9IHJlcXVpcmUoXCIuL2NvbnN0YW50c1wiKTtcbmxldCBQYWNrZXIgPSByZXF1aXJlKFwiLi9wYWNrZXJcIik7XG5cbmxldCBQYWNrZXJBc3luYyA9IChtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcHQpIHtcbiAgU3RyZWFtLmNhbGwodGhpcyk7XG5cbiAgbGV0IG9wdGlvbnMgPSBvcHQgfHwge307XG5cbiAgdGhpcy5fcGFja2VyID0gbmV3IFBhY2tlcihvcHRpb25zKTtcbiAgdGhpcy5fZGVmbGF0ZSA9IHRoaXMuX3BhY2tlci5jcmVhdGVEZWZsYXRlKCk7XG5cbiAgdGhpcy5yZWFkYWJsZSA9IHRydWU7XG59KTtcbnV0aWwuaW5oZXJpdHMoUGFja2VyQXN5bmMsIFN0cmVhbSk7XG5cblBhY2tlckFzeW5jLnByb3RvdHlwZS5wYWNrID0gZnVuY3Rpb24gKGRhdGEsIHdpZHRoLCBoZWlnaHQsIGdhbW1hKSB7XG4gIC8vIFNpZ25hdHVyZVxuICB0aGlzLmVtaXQoXCJkYXRhXCIsIEJ1ZmZlci5mcm9tKGNvbnN0YW50cy5QTkdfU0lHTkFUVVJFKSk7XG4gIHRoaXMuZW1pdChcImRhdGFcIiwgdGhpcy5fcGFja2VyLnBhY2tJSERSKHdpZHRoLCBoZWlnaHQpKTtcblxuICBpZiAoZ2FtbWEpIHtcbiAgICB0aGlzLmVtaXQoXCJkYXRhXCIsIHRoaXMuX3BhY2tlci5wYWNrR0FNQShnYW1tYSkpO1xuICB9XG5cbiAgbGV0IGZpbHRlcmVkRGF0YSA9IHRoaXMuX3BhY2tlci5maWx0ZXJEYXRhKGRhdGEsIHdpZHRoLCBoZWlnaHQpO1xuXG4gIC8vIGNvbXByZXNzIGl0XG4gIHRoaXMuX2RlZmxhdGUub24oXCJlcnJvclwiLCB0aGlzLmVtaXQuYmluZCh0aGlzLCBcImVycm9yXCIpKTtcblxuICB0aGlzLl9kZWZsYXRlLm9uKFxuICAgIFwiZGF0YVwiLFxuICAgIGZ1bmN0aW9uIChjb21wcmVzc2VkRGF0YSkge1xuICAgICAgdGhpcy5lbWl0KFwiZGF0YVwiLCB0aGlzLl9wYWNrZXIucGFja0lEQVQoY29tcHJlc3NlZERhdGEpKTtcbiAgICB9LmJpbmQodGhpcylcbiAgKTtcblxuICB0aGlzLl9kZWZsYXRlLm9uKFxuICAgIFwiZW5kXCIsXG4gICAgZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy5lbWl0KFwiZGF0YVwiLCB0aGlzLl9wYWNrZXIucGFja0lFTkQoKSk7XG4gICAgICB0aGlzLmVtaXQoXCJlbmRcIik7XG4gICAgfS5iaW5kKHRoaXMpXG4gICk7XG5cbiAgdGhpcy5fZGVmbGF0ZS5lbmQoZmlsdGVyZWREYXRhKTtcbn07XG4iXSwibmFtZXMiOlsidXRpbCIsInJlcXVpcmUiLCJTdHJlYW0iLCJjb25zdGFudHMiLCJQYWNrZXIiLCJQYWNrZXJBc3luYyIsIm1vZHVsZSIsImV4cG9ydHMiLCJvcHQiLCJjYWxsIiwib3B0aW9ucyIsIl9wYWNrZXIiLCJfZGVmbGF0ZSIsImNyZWF0ZURlZmxhdGUiLCJyZWFkYWJsZSIsImluaGVyaXRzIiwicHJvdG90eXBlIiwicGFjayIsImRhdGEiLCJ3aWR0aCIsImhlaWdodCIsImdhbW1hIiwiZW1pdCIsIkJ1ZmZlciIsImZyb20iLCJQTkdfU0lHTkFUVVJFIiwicGFja0lIRFIiLCJwYWNrR0FNQSIsImZpbHRlcmVkRGF0YSIsImZpbHRlckRhdGEiLCJvbiIsImJpbmQiLCJjb21wcmVzc2VkRGF0YSIsInBhY2tJREFUIiwicGFja0lFTkQiLCJlbmQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/pngjs/lib/packer-async.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/pngjs/lib/packer-sync.js":
/*!***********************************************!*\
  !*** ./node_modules/pngjs/lib/packer-sync.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nlet hasSyncZlib = true;\nlet zlib = __webpack_require__(/*! zlib */ \"zlib\");\nif (!zlib.deflateSync) {\n    hasSyncZlib = false;\n}\nlet constants = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/pngjs/lib/constants.js\");\nlet Packer = __webpack_require__(/*! ./packer */ \"(ssr)/./node_modules/pngjs/lib/packer.js\");\nmodule.exports = function(metaData, opt) {\n    if (!hasSyncZlib) {\n        throw new Error(\"To use the sync capability of this library in old node versions, please pin pngjs to v2.3.0\");\n    }\n    let options = opt || {};\n    let packer = new Packer(options);\n    let chunks = [];\n    // Signature\n    chunks.push(Buffer.from(constants.PNG_SIGNATURE));\n    // Header\n    chunks.push(packer.packIHDR(metaData.width, metaData.height));\n    if (metaData.gamma) {\n        chunks.push(packer.packGAMA(metaData.gamma));\n    }\n    let filteredData = packer.filterData(metaData.data, metaData.width, metaData.height);\n    // compress it\n    let compressedData = zlib.deflateSync(filteredData, packer.getDeflateOptions());\n    filteredData = null;\n    if (!compressedData || !compressedData.length) {\n        throw new Error(\"bad png - invalid compressed data response\");\n    }\n    chunks.push(packer.packIDAT(compressedData));\n    // End\n    chunks.push(packer.packIEND());\n    return Buffer.concat(chunks);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcG5nanMvbGliL3BhY2tlci1zeW5jLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBRWIsSUFBSUEsY0FBYztBQUNsQixJQUFJQyxPQUFPQyxtQkFBT0EsQ0FBQyxrQkFBTTtBQUN6QixJQUFJLENBQUNELEtBQUtFLFdBQVcsRUFBRTtJQUNyQkgsY0FBYztBQUNoQjtBQUNBLElBQUlJLFlBQVlGLG1CQUFPQSxDQUFDLGdFQUFhO0FBQ3JDLElBQUlHLFNBQVNILG1CQUFPQSxDQUFDLDBEQUFVO0FBRS9CSSxPQUFPQyxPQUFPLEdBQUcsU0FBVUMsUUFBUSxFQUFFQyxHQUFHO0lBQ3RDLElBQUksQ0FBQ1QsYUFBYTtRQUNoQixNQUFNLElBQUlVLE1BQ1I7SUFFSjtJQUVBLElBQUlDLFVBQVVGLE9BQU8sQ0FBQztJQUV0QixJQUFJRyxTQUFTLElBQUlQLE9BQU9NO0lBRXhCLElBQUlFLFNBQVMsRUFBRTtJQUVmLFlBQVk7SUFDWkEsT0FBT0MsSUFBSSxDQUFDQyxPQUFPQyxJQUFJLENBQUNaLFVBQVVhLGFBQWE7SUFFL0MsU0FBUztJQUNUSixPQUFPQyxJQUFJLENBQUNGLE9BQU9NLFFBQVEsQ0FBQ1YsU0FBU1csS0FBSyxFQUFFWCxTQUFTWSxNQUFNO0lBRTNELElBQUlaLFNBQVNhLEtBQUssRUFBRTtRQUNsQlIsT0FBT0MsSUFBSSxDQUFDRixPQUFPVSxRQUFRLENBQUNkLFNBQVNhLEtBQUs7SUFDNUM7SUFFQSxJQUFJRSxlQUFlWCxPQUFPWSxVQUFVLENBQ2xDaEIsU0FBU2lCLElBQUksRUFDYmpCLFNBQVNXLEtBQUssRUFDZFgsU0FBU1ksTUFBTTtJQUdqQixjQUFjO0lBQ2QsSUFBSU0saUJBQWlCekIsS0FBS0UsV0FBVyxDQUNuQ29CLGNBQ0FYLE9BQU9lLGlCQUFpQjtJQUUxQkosZUFBZTtJQUVmLElBQUksQ0FBQ0csa0JBQWtCLENBQUNBLGVBQWVFLE1BQU0sRUFBRTtRQUM3QyxNQUFNLElBQUlsQixNQUFNO0lBQ2xCO0lBQ0FHLE9BQU9DLElBQUksQ0FBQ0YsT0FBT2lCLFFBQVEsQ0FBQ0g7SUFFNUIsTUFBTTtJQUNOYixPQUFPQyxJQUFJLENBQUNGLE9BQU9rQixRQUFRO0lBRTNCLE9BQU9mLE9BQU9nQixNQUFNLENBQUNsQjtBQUN2QiIsInNvdXJjZXMiOlsid2VicGFjazovL3RoZS1ncmlkLTIvLi9ub2RlX21vZHVsZXMvcG5nanMvbGliL3BhY2tlci1zeW5jLmpzP2Y0ZmUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmxldCBoYXNTeW5jWmxpYiA9IHRydWU7XG5sZXQgemxpYiA9IHJlcXVpcmUoXCJ6bGliXCIpO1xuaWYgKCF6bGliLmRlZmxhdGVTeW5jKSB7XG4gIGhhc1N5bmNabGliID0gZmFsc2U7XG59XG5sZXQgY29uc3RhbnRzID0gcmVxdWlyZShcIi4vY29uc3RhbnRzXCIpO1xubGV0IFBhY2tlciA9IHJlcXVpcmUoXCIuL3BhY2tlclwiKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobWV0YURhdGEsIG9wdCkge1xuICBpZiAoIWhhc1N5bmNabGliKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgXCJUbyB1c2UgdGhlIHN5bmMgY2FwYWJpbGl0eSBvZiB0aGlzIGxpYnJhcnkgaW4gb2xkIG5vZGUgdmVyc2lvbnMsIHBsZWFzZSBwaW4gcG5nanMgdG8gdjIuMy4wXCJcbiAgICApO1xuICB9XG5cbiAgbGV0IG9wdGlvbnMgPSBvcHQgfHwge307XG5cbiAgbGV0IHBhY2tlciA9IG5ldyBQYWNrZXIob3B0aW9ucyk7XG5cbiAgbGV0IGNodW5rcyA9IFtdO1xuXG4gIC8vIFNpZ25hdHVyZVxuICBjaHVua3MucHVzaChCdWZmZXIuZnJvbShjb25zdGFudHMuUE5HX1NJR05BVFVSRSkpO1xuXG4gIC8vIEhlYWRlclxuICBjaHVua3MucHVzaChwYWNrZXIucGFja0lIRFIobWV0YURhdGEud2lkdGgsIG1ldGFEYXRhLmhlaWdodCkpO1xuXG4gIGlmIChtZXRhRGF0YS5nYW1tYSkge1xuICAgIGNodW5rcy5wdXNoKHBhY2tlci5wYWNrR0FNQShtZXRhRGF0YS5nYW1tYSkpO1xuICB9XG5cbiAgbGV0IGZpbHRlcmVkRGF0YSA9IHBhY2tlci5maWx0ZXJEYXRhKFxuICAgIG1ldGFEYXRhLmRhdGEsXG4gICAgbWV0YURhdGEud2lkdGgsXG4gICAgbWV0YURhdGEuaGVpZ2h0XG4gICk7XG5cbiAgLy8gY29tcHJlc3MgaXRcbiAgbGV0IGNvbXByZXNzZWREYXRhID0gemxpYi5kZWZsYXRlU3luYyhcbiAgICBmaWx0ZXJlZERhdGEsXG4gICAgcGFja2VyLmdldERlZmxhdGVPcHRpb25zKClcbiAgKTtcbiAgZmlsdGVyZWREYXRhID0gbnVsbDtcblxuICBpZiAoIWNvbXByZXNzZWREYXRhIHx8ICFjb21wcmVzc2VkRGF0YS5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJiYWQgcG5nIC0gaW52YWxpZCBjb21wcmVzc2VkIGRhdGEgcmVzcG9uc2VcIik7XG4gIH1cbiAgY2h1bmtzLnB1c2gocGFja2VyLnBhY2tJREFUKGNvbXByZXNzZWREYXRhKSk7XG5cbiAgLy8gRW5kXG4gIGNodW5rcy5wdXNoKHBhY2tlci5wYWNrSUVORCgpKTtcblxuICByZXR1cm4gQnVmZmVyLmNvbmNhdChjaHVua3MpO1xufTtcbiJdLCJuYW1lcyI6WyJoYXNTeW5jWmxpYiIsInpsaWIiLCJyZXF1aXJlIiwiZGVmbGF0ZVN5bmMiLCJjb25zdGFudHMiLCJQYWNrZXIiLCJtb2R1bGUiLCJleHBvcnRzIiwibWV0YURhdGEiLCJvcHQiLCJFcnJvciIsIm9wdGlvbnMiLCJwYWNrZXIiLCJjaHVua3MiLCJwdXNoIiwiQnVmZmVyIiwiZnJvbSIsIlBOR19TSUdOQVRVUkUiLCJwYWNrSUhEUiIsIndpZHRoIiwiaGVpZ2h0IiwiZ2FtbWEiLCJwYWNrR0FNQSIsImZpbHRlcmVkRGF0YSIsImZpbHRlckRhdGEiLCJkYXRhIiwiY29tcHJlc3NlZERhdGEiLCJnZXREZWZsYXRlT3B0aW9ucyIsImxlbmd0aCIsInBhY2tJREFUIiwicGFja0lFTkQiLCJjb25jYXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/pngjs/lib/packer-sync.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/pngjs/lib/packer.js":
/*!******************************************!*\
  !*** ./node_modules/pngjs/lib/packer.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nlet constants = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/pngjs/lib/constants.js\");\nlet CrcStream = __webpack_require__(/*! ./crc */ \"(ssr)/./node_modules/pngjs/lib/crc.js\");\nlet bitPacker = __webpack_require__(/*! ./bitpacker */ \"(ssr)/./node_modules/pngjs/lib/bitpacker.js\");\nlet filter = __webpack_require__(/*! ./filter-pack */ \"(ssr)/./node_modules/pngjs/lib/filter-pack.js\");\nlet zlib = __webpack_require__(/*! zlib */ \"zlib\");\nlet Packer = module.exports = function(options) {\n    this._options = options;\n    options.deflateChunkSize = options.deflateChunkSize || 32 * 1024;\n    options.deflateLevel = options.deflateLevel != null ? options.deflateLevel : 9;\n    options.deflateStrategy = options.deflateStrategy != null ? options.deflateStrategy : 3;\n    options.inputHasAlpha = options.inputHasAlpha != null ? options.inputHasAlpha : true;\n    options.deflateFactory = options.deflateFactory || zlib.createDeflate;\n    options.bitDepth = options.bitDepth || 8;\n    // This is outputColorType\n    options.colorType = typeof options.colorType === \"number\" ? options.colorType : constants.COLORTYPE_COLOR_ALPHA;\n    options.inputColorType = typeof options.inputColorType === \"number\" ? options.inputColorType : constants.COLORTYPE_COLOR_ALPHA;\n    if ([\n        constants.COLORTYPE_GRAYSCALE,\n        constants.COLORTYPE_COLOR,\n        constants.COLORTYPE_COLOR_ALPHA,\n        constants.COLORTYPE_ALPHA\n    ].indexOf(options.colorType) === -1) {\n        throw new Error(\"option color type:\" + options.colorType + \" is not supported at present\");\n    }\n    if ([\n        constants.COLORTYPE_GRAYSCALE,\n        constants.COLORTYPE_COLOR,\n        constants.COLORTYPE_COLOR_ALPHA,\n        constants.COLORTYPE_ALPHA\n    ].indexOf(options.inputColorType) === -1) {\n        throw new Error(\"option input color type:\" + options.inputColorType + \" is not supported at present\");\n    }\n    if (options.bitDepth !== 8 && options.bitDepth !== 16) {\n        throw new Error(\"option bit depth:\" + options.bitDepth + \" is not supported at present\");\n    }\n};\nPacker.prototype.getDeflateOptions = function() {\n    return {\n        chunkSize: this._options.deflateChunkSize,\n        level: this._options.deflateLevel,\n        strategy: this._options.deflateStrategy\n    };\n};\nPacker.prototype.createDeflate = function() {\n    return this._options.deflateFactory(this.getDeflateOptions());\n};\nPacker.prototype.filterData = function(data, width, height) {\n    // convert to correct format for filtering (e.g. right bpp and bit depth)\n    let packedData = bitPacker(data, width, height, this._options);\n    // filter pixel data\n    let bpp = constants.COLORTYPE_TO_BPP_MAP[this._options.colorType];\n    let filteredData = filter(packedData, width, height, this._options, bpp);\n    return filteredData;\n};\nPacker.prototype._packChunk = function(type, data) {\n    let len = data ? data.length : 0;\n    let buf = Buffer.alloc(len + 12);\n    buf.writeUInt32BE(len, 0);\n    buf.writeUInt32BE(type, 4);\n    if (data) {\n        data.copy(buf, 8);\n    }\n    buf.writeInt32BE(CrcStream.crc32(buf.slice(4, buf.length - 4)), buf.length - 4);\n    return buf;\n};\nPacker.prototype.packGAMA = function(gamma) {\n    let buf = Buffer.alloc(4);\n    buf.writeUInt32BE(Math.floor(gamma * constants.GAMMA_DIVISION), 0);\n    return this._packChunk(constants.TYPE_gAMA, buf);\n};\nPacker.prototype.packIHDR = function(width, height) {\n    let buf = Buffer.alloc(13);\n    buf.writeUInt32BE(width, 0);\n    buf.writeUInt32BE(height, 4);\n    buf[8] = this._options.bitDepth; // Bit depth\n    buf[9] = this._options.colorType; // colorType\n    buf[10] = 0; // compression\n    buf[11] = 0; // filter\n    buf[12] = 0; // interlace\n    return this._packChunk(constants.TYPE_IHDR, buf);\n};\nPacker.prototype.packIDAT = function(data) {\n    return this._packChunk(constants.TYPE_IDAT, data);\n};\nPacker.prototype.packIEND = function() {\n    return this._packChunk(constants.TYPE_IEND, null);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/pngjs/lib/packer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/pngjs/lib/paeth-predictor.js":
/*!***************************************************!*\
  !*** ./node_modules/pngjs/lib/paeth-predictor.js ***!
  \***************************************************/
/***/ ((module) => {

eval("\nmodule.exports = function paethPredictor(left, above, upLeft) {\n    let paeth = left + above - upLeft;\n    let pLeft = Math.abs(paeth - left);\n    let pAbove = Math.abs(paeth - above);\n    let pUpLeft = Math.abs(paeth - upLeft);\n    if (pLeft <= pAbove && pLeft <= pUpLeft) {\n        return left;\n    }\n    if (pAbove <= pUpLeft) {\n        return above;\n    }\n    return upLeft;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcG5nanMvbGliL3BhZXRoLXByZWRpY3Rvci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViQSxPQUFPQyxPQUFPLEdBQUcsU0FBU0MsZUFBZUMsSUFBSSxFQUFFQyxLQUFLLEVBQUVDLE1BQU07SUFDMUQsSUFBSUMsUUFBUUgsT0FBT0MsUUFBUUM7SUFDM0IsSUFBSUUsUUFBUUMsS0FBS0MsR0FBRyxDQUFDSCxRQUFRSDtJQUM3QixJQUFJTyxTQUFTRixLQUFLQyxHQUFHLENBQUNILFFBQVFGO0lBQzlCLElBQUlPLFVBQVVILEtBQUtDLEdBQUcsQ0FBQ0gsUUFBUUQ7SUFFL0IsSUFBSUUsU0FBU0csVUFBVUgsU0FBU0ksU0FBUztRQUN2QyxPQUFPUjtJQUNUO0lBQ0EsSUFBSU8sVUFBVUMsU0FBUztRQUNyQixPQUFPUDtJQUNUO0lBQ0EsT0FBT0M7QUFDVCIsInNvdXJjZXMiOlsid2VicGFjazovL3RoZS1ncmlkLTIvLi9ub2RlX21vZHVsZXMvcG5nanMvbGliL3BhZXRoLXByZWRpY3Rvci5qcz9mNGMxIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHBhZXRoUHJlZGljdG9yKGxlZnQsIGFib3ZlLCB1cExlZnQpIHtcbiAgbGV0IHBhZXRoID0gbGVmdCArIGFib3ZlIC0gdXBMZWZ0O1xuICBsZXQgcExlZnQgPSBNYXRoLmFicyhwYWV0aCAtIGxlZnQpO1xuICBsZXQgcEFib3ZlID0gTWF0aC5hYnMocGFldGggLSBhYm92ZSk7XG4gIGxldCBwVXBMZWZ0ID0gTWF0aC5hYnMocGFldGggLSB1cExlZnQpO1xuXG4gIGlmIChwTGVmdCA8PSBwQWJvdmUgJiYgcExlZnQgPD0gcFVwTGVmdCkge1xuICAgIHJldHVybiBsZWZ0O1xuICB9XG4gIGlmIChwQWJvdmUgPD0gcFVwTGVmdCkge1xuICAgIHJldHVybiBhYm92ZTtcbiAgfVxuICByZXR1cm4gdXBMZWZ0O1xufTtcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwicGFldGhQcmVkaWN0b3IiLCJsZWZ0IiwiYWJvdmUiLCJ1cExlZnQiLCJwYWV0aCIsInBMZWZ0IiwiTWF0aCIsImFicyIsInBBYm92ZSIsInBVcExlZnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/pngjs/lib/paeth-predictor.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/pngjs/lib/parser-async.js":
/*!************************************************!*\
  !*** ./node_modules/pngjs/lib/parser-async.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nlet util = __webpack_require__(/*! util */ \"util\");\nlet zlib = __webpack_require__(/*! zlib */ \"zlib\");\nlet ChunkStream = __webpack_require__(/*! ./chunkstream */ \"(ssr)/./node_modules/pngjs/lib/chunkstream.js\");\nlet FilterAsync = __webpack_require__(/*! ./filter-parse-async */ \"(ssr)/./node_modules/pngjs/lib/filter-parse-async.js\");\nlet Parser = __webpack_require__(/*! ./parser */ \"(ssr)/./node_modules/pngjs/lib/parser.js\");\nlet bitmapper = __webpack_require__(/*! ./bitmapper */ \"(ssr)/./node_modules/pngjs/lib/bitmapper.js\");\nlet formatNormaliser = __webpack_require__(/*! ./format-normaliser */ \"(ssr)/./node_modules/pngjs/lib/format-normaliser.js\");\nlet ParserAsync = module.exports = function(options) {\n    ChunkStream.call(this);\n    this._parser = new Parser(options, {\n        read: this.read.bind(this),\n        error: this._handleError.bind(this),\n        metadata: this._handleMetaData.bind(this),\n        gamma: this.emit.bind(this, \"gamma\"),\n        palette: this._handlePalette.bind(this),\n        transColor: this._handleTransColor.bind(this),\n        finished: this._finished.bind(this),\n        inflateData: this._inflateData.bind(this),\n        simpleTransparency: this._simpleTransparency.bind(this),\n        headersFinished: this._headersFinished.bind(this)\n    });\n    this._options = options;\n    this.writable = true;\n    this._parser.start();\n};\nutil.inherits(ParserAsync, ChunkStream);\nParserAsync.prototype._handleError = function(err) {\n    this.emit(\"error\", err);\n    this.writable = false;\n    this.destroy();\n    if (this._inflate && this._inflate.destroy) {\n        this._inflate.destroy();\n    }\n    if (this._filter) {\n        this._filter.destroy();\n        // For backward compatibility with Node 7 and below.\n        // Suppress errors due to _inflate calling write() even after\n        // it's destroy()'ed.\n        this._filter.on(\"error\", function() {});\n    }\n    this.errord = true;\n};\nParserAsync.prototype._inflateData = function(data) {\n    if (!this._inflate) {\n        if (this._bitmapInfo.interlace) {\n            this._inflate = zlib.createInflate();\n            this._inflate.on(\"error\", this.emit.bind(this, \"error\"));\n            this._filter.on(\"complete\", this._complete.bind(this));\n            this._inflate.pipe(this._filter);\n        } else {\n            let rowSize = (this._bitmapInfo.width * this._bitmapInfo.bpp * this._bitmapInfo.depth + 7 >> 3) + 1;\n            let imageSize = rowSize * this._bitmapInfo.height;\n            let chunkSize = Math.max(imageSize, zlib.Z_MIN_CHUNK);\n            this._inflate = zlib.createInflate({\n                chunkSize: chunkSize\n            });\n            let leftToInflate = imageSize;\n            let emitError = this.emit.bind(this, \"error\");\n            this._inflate.on(\"error\", function(err) {\n                if (!leftToInflate) {\n                    return;\n                }\n                emitError(err);\n            });\n            this._filter.on(\"complete\", this._complete.bind(this));\n            let filterWrite = this._filter.write.bind(this._filter);\n            this._inflate.on(\"data\", function(chunk) {\n                if (!leftToInflate) {\n                    return;\n                }\n                if (chunk.length > leftToInflate) {\n                    chunk = chunk.slice(0, leftToInflate);\n                }\n                leftToInflate -= chunk.length;\n                filterWrite(chunk);\n            });\n            this._inflate.on(\"end\", this._filter.end.bind(this._filter));\n        }\n    }\n    this._inflate.write(data);\n};\nParserAsync.prototype._handleMetaData = function(metaData) {\n    this._metaData = metaData;\n    this._bitmapInfo = Object.create(metaData);\n    this._filter = new FilterAsync(this._bitmapInfo);\n};\nParserAsync.prototype._handleTransColor = function(transColor) {\n    this._bitmapInfo.transColor = transColor;\n};\nParserAsync.prototype._handlePalette = function(palette) {\n    this._bitmapInfo.palette = palette;\n};\nParserAsync.prototype._simpleTransparency = function() {\n    this._metaData.alpha = true;\n};\nParserAsync.prototype._headersFinished = function() {\n    // Up until this point, we don't know if we have a tRNS chunk (alpha)\n    // so we can't emit metadata any earlier\n    this.emit(\"metadata\", this._metaData);\n};\nParserAsync.prototype._finished = function() {\n    if (this.errord) {\n        return;\n    }\n    if (!this._inflate) {\n        this.emit(\"error\", \"No Inflate block\");\n    } else {\n        // no more data to inflate\n        this._inflate.end();\n    }\n};\nParserAsync.prototype._complete = function(filteredData) {\n    if (this.errord) {\n        return;\n    }\n    let normalisedBitmapData;\n    try {\n        let bitmapData = bitmapper.dataToBitMap(filteredData, this._bitmapInfo);\n        normalisedBitmapData = formatNormaliser(bitmapData, this._bitmapInfo);\n        bitmapData = null;\n    } catch (ex) {\n        this._handleError(ex);\n        return;\n    }\n    this.emit(\"parsed\", normalisedBitmapData);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/pngjs/lib/parser-async.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/pngjs/lib/parser-sync.js":
/*!***********************************************!*\
  !*** ./node_modules/pngjs/lib/parser-sync.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nlet hasSyncZlib = true;\nlet zlib = __webpack_require__(/*! zlib */ \"zlib\");\nlet inflateSync = __webpack_require__(/*! ./sync-inflate */ \"(ssr)/./node_modules/pngjs/lib/sync-inflate.js\");\nif (!zlib.deflateSync) {\n    hasSyncZlib = false;\n}\nlet SyncReader = __webpack_require__(/*! ./sync-reader */ \"(ssr)/./node_modules/pngjs/lib/sync-reader.js\");\nlet FilterSync = __webpack_require__(/*! ./filter-parse-sync */ \"(ssr)/./node_modules/pngjs/lib/filter-parse-sync.js\");\nlet Parser = __webpack_require__(/*! ./parser */ \"(ssr)/./node_modules/pngjs/lib/parser.js\");\nlet bitmapper = __webpack_require__(/*! ./bitmapper */ \"(ssr)/./node_modules/pngjs/lib/bitmapper.js\");\nlet formatNormaliser = __webpack_require__(/*! ./format-normaliser */ \"(ssr)/./node_modules/pngjs/lib/format-normaliser.js\");\nmodule.exports = function(buffer, options) {\n    if (!hasSyncZlib) {\n        throw new Error(\"To use the sync capability of this library in old node versions, please pin pngjs to v2.3.0\");\n    }\n    let err;\n    function handleError(_err_) {\n        err = _err_;\n    }\n    let metaData;\n    function handleMetaData(_metaData_) {\n        metaData = _metaData_;\n    }\n    function handleTransColor(transColor) {\n        metaData.transColor = transColor;\n    }\n    function handlePalette(palette) {\n        metaData.palette = palette;\n    }\n    function handleSimpleTransparency() {\n        metaData.alpha = true;\n    }\n    let gamma;\n    function handleGamma(_gamma_) {\n        gamma = _gamma_;\n    }\n    let inflateDataList = [];\n    function handleInflateData(inflatedData) {\n        inflateDataList.push(inflatedData);\n    }\n    let reader = new SyncReader(buffer);\n    let parser = new Parser(options, {\n        read: reader.read.bind(reader),\n        error: handleError,\n        metadata: handleMetaData,\n        gamma: handleGamma,\n        palette: handlePalette,\n        transColor: handleTransColor,\n        inflateData: handleInflateData,\n        simpleTransparency: handleSimpleTransparency\n    });\n    parser.start();\n    reader.process();\n    if (err) {\n        throw err;\n    }\n    //join together the inflate datas\n    let inflateData = Buffer.concat(inflateDataList);\n    inflateDataList.length = 0;\n    let inflatedData;\n    if (metaData.interlace) {\n        inflatedData = zlib.inflateSync(inflateData);\n    } else {\n        let rowSize = (metaData.width * metaData.bpp * metaData.depth + 7 >> 3) + 1;\n        let imageSize = rowSize * metaData.height;\n        inflatedData = inflateSync(inflateData, {\n            chunkSize: imageSize,\n            maxLength: imageSize\n        });\n    }\n    inflateData = null;\n    if (!inflatedData || !inflatedData.length) {\n        throw new Error(\"bad png - invalid inflate data response\");\n    }\n    let unfilteredData = FilterSync.process(inflatedData, metaData);\n    inflateData = null;\n    let bitmapData = bitmapper.dataToBitMap(unfilteredData, metaData);\n    unfilteredData = null;\n    let normalisedBitmapData = formatNormaliser(bitmapData, metaData);\n    metaData.data = normalisedBitmapData;\n    metaData.gamma = gamma || 0;\n    return metaData;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcG5nanMvbGliL3BhcnNlci1zeW5jLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBRWIsSUFBSUEsY0FBYztBQUNsQixJQUFJQyxPQUFPQyxtQkFBT0EsQ0FBQyxrQkFBTTtBQUN6QixJQUFJQyxjQUFjRCxtQkFBT0EsQ0FBQyxzRUFBZ0I7QUFDMUMsSUFBSSxDQUFDRCxLQUFLRyxXQUFXLEVBQUU7SUFDckJKLGNBQWM7QUFDaEI7QUFDQSxJQUFJSyxhQUFhSCxtQkFBT0EsQ0FBQyxvRUFBZTtBQUN4QyxJQUFJSSxhQUFhSixtQkFBT0EsQ0FBQyxnRkFBcUI7QUFDOUMsSUFBSUssU0FBU0wsbUJBQU9BLENBQUMsMERBQVU7QUFDL0IsSUFBSU0sWUFBWU4sbUJBQU9BLENBQUMsZ0VBQWE7QUFDckMsSUFBSU8sbUJBQW1CUCxtQkFBT0EsQ0FBQyxnRkFBcUI7QUFFcERRLE9BQU9DLE9BQU8sR0FBRyxTQUFVQyxNQUFNLEVBQUVDLE9BQU87SUFDeEMsSUFBSSxDQUFDYixhQUFhO1FBQ2hCLE1BQU0sSUFBSWMsTUFDUjtJQUVKO0lBRUEsSUFBSUM7SUFDSixTQUFTQyxZQUFZQyxLQUFLO1FBQ3hCRixNQUFNRTtJQUNSO0lBRUEsSUFBSUM7SUFDSixTQUFTQyxlQUFlQyxVQUFVO1FBQ2hDRixXQUFXRTtJQUNiO0lBRUEsU0FBU0MsaUJBQWlCQyxVQUFVO1FBQ2xDSixTQUFTSSxVQUFVLEdBQUdBO0lBQ3hCO0lBRUEsU0FBU0MsY0FBY0MsT0FBTztRQUM1Qk4sU0FBU00sT0FBTyxHQUFHQTtJQUNyQjtJQUVBLFNBQVNDO1FBQ1BQLFNBQVNRLEtBQUssR0FBRztJQUNuQjtJQUVBLElBQUlDO0lBQ0osU0FBU0MsWUFBWUMsT0FBTztRQUMxQkYsUUFBUUU7SUFDVjtJQUVBLElBQUlDLGtCQUFrQixFQUFFO0lBQ3hCLFNBQVNDLGtCQUFrQkMsWUFBWTtRQUNyQ0YsZ0JBQWdCRyxJQUFJLENBQUNEO0lBQ3ZCO0lBRUEsSUFBSUUsU0FBUyxJQUFJN0IsV0FBV087SUFFNUIsSUFBSXVCLFNBQVMsSUFBSTVCLE9BQU9NLFNBQVM7UUFDL0J1QixNQUFNRixPQUFPRSxJQUFJLENBQUNDLElBQUksQ0FBQ0g7UUFDdkJJLE9BQU90QjtRQUNQdUIsVUFBVXBCO1FBQ1ZRLE9BQU9DO1FBQ1BKLFNBQVNEO1FBQ1RELFlBQVlEO1FBQ1ptQixhQUFhVDtRQUNiVSxvQkFBb0JoQjtJQUN0QjtJQUVBVSxPQUFPTyxLQUFLO0lBQ1pSLE9BQU9TLE9BQU87SUFFZCxJQUFJNUIsS0FBSztRQUNQLE1BQU1BO0lBQ1I7SUFFQSxpQ0FBaUM7SUFDakMsSUFBSXlCLGNBQWNJLE9BQU9DLE1BQU0sQ0FBQ2Y7SUFDaENBLGdCQUFnQmdCLE1BQU0sR0FBRztJQUV6QixJQUFJZDtJQUNKLElBQUlkLFNBQVM2QixTQUFTLEVBQUU7UUFDdEJmLGVBQWUvQixLQUFLRSxXQUFXLENBQUNxQztJQUNsQyxPQUFPO1FBQ0wsSUFBSVEsVUFDRixDQUFDLFNBQVVDLEtBQUssR0FBRy9CLFNBQVNnQyxHQUFHLEdBQUdoQyxTQUFTaUMsS0FBSyxHQUFHLEtBQU0sS0FBSztRQUNoRSxJQUFJQyxZQUFZSixVQUFVOUIsU0FBU21DLE1BQU07UUFDekNyQixlQUFlN0IsWUFBWXFDLGFBQWE7WUFDdENjLFdBQVdGO1lBQ1hHLFdBQVdIO1FBQ2I7SUFDRjtJQUNBWixjQUFjO0lBRWQsSUFBSSxDQUFDUixnQkFBZ0IsQ0FBQ0EsYUFBYWMsTUFBTSxFQUFFO1FBQ3pDLE1BQU0sSUFBSWhDLE1BQU07SUFDbEI7SUFFQSxJQUFJMEMsaUJBQWlCbEQsV0FBV3FDLE9BQU8sQ0FBQ1gsY0FBY2Q7SUFDdERzQixjQUFjO0lBRWQsSUFBSWlCLGFBQWFqRCxVQUFVa0QsWUFBWSxDQUFDRixnQkFBZ0J0QztJQUN4RHNDLGlCQUFpQjtJQUVqQixJQUFJRyx1QkFBdUJsRCxpQkFBaUJnRCxZQUFZdkM7SUFFeERBLFNBQVMwQyxJQUFJLEdBQUdEO0lBQ2hCekMsU0FBU1MsS0FBSyxHQUFHQSxTQUFTO0lBRTFCLE9BQU9UO0FBQ1QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90aGUtZ3JpZC0yLy4vbm9kZV9tb2R1bGVzL3BuZ2pzL2xpYi9wYXJzZXItc3luYy5qcz84MzhhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5sZXQgaGFzU3luY1psaWIgPSB0cnVlO1xubGV0IHpsaWIgPSByZXF1aXJlKFwiemxpYlwiKTtcbmxldCBpbmZsYXRlU3luYyA9IHJlcXVpcmUoXCIuL3N5bmMtaW5mbGF0ZVwiKTtcbmlmICghemxpYi5kZWZsYXRlU3luYykge1xuICBoYXNTeW5jWmxpYiA9IGZhbHNlO1xufVxubGV0IFN5bmNSZWFkZXIgPSByZXF1aXJlKFwiLi9zeW5jLXJlYWRlclwiKTtcbmxldCBGaWx0ZXJTeW5jID0gcmVxdWlyZShcIi4vZmlsdGVyLXBhcnNlLXN5bmNcIik7XG5sZXQgUGFyc2VyID0gcmVxdWlyZShcIi4vcGFyc2VyXCIpO1xubGV0IGJpdG1hcHBlciA9IHJlcXVpcmUoXCIuL2JpdG1hcHBlclwiKTtcbmxldCBmb3JtYXROb3JtYWxpc2VyID0gcmVxdWlyZShcIi4vZm9ybWF0LW5vcm1hbGlzZXJcIik7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGJ1ZmZlciwgb3B0aW9ucykge1xuICBpZiAoIWhhc1N5bmNabGliKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgXCJUbyB1c2UgdGhlIHN5bmMgY2FwYWJpbGl0eSBvZiB0aGlzIGxpYnJhcnkgaW4gb2xkIG5vZGUgdmVyc2lvbnMsIHBsZWFzZSBwaW4gcG5nanMgdG8gdjIuMy4wXCJcbiAgICApO1xuICB9XG5cbiAgbGV0IGVycjtcbiAgZnVuY3Rpb24gaGFuZGxlRXJyb3IoX2Vycl8pIHtcbiAgICBlcnIgPSBfZXJyXztcbiAgfVxuXG4gIGxldCBtZXRhRGF0YTtcbiAgZnVuY3Rpb24gaGFuZGxlTWV0YURhdGEoX21ldGFEYXRhXykge1xuICAgIG1ldGFEYXRhID0gX21ldGFEYXRhXztcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZVRyYW5zQ29sb3IodHJhbnNDb2xvcikge1xuICAgIG1ldGFEYXRhLnRyYW5zQ29sb3IgPSB0cmFuc0NvbG9yO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlUGFsZXR0ZShwYWxldHRlKSB7XG4gICAgbWV0YURhdGEucGFsZXR0ZSA9IHBhbGV0dGU7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVTaW1wbGVUcmFuc3BhcmVuY3koKSB7XG4gICAgbWV0YURhdGEuYWxwaGEgPSB0cnVlO1xuICB9XG5cbiAgbGV0IGdhbW1hO1xuICBmdW5jdGlvbiBoYW5kbGVHYW1tYShfZ2FtbWFfKSB7XG4gICAgZ2FtbWEgPSBfZ2FtbWFfO1xuICB9XG5cbiAgbGV0IGluZmxhdGVEYXRhTGlzdCA9IFtdO1xuICBmdW5jdGlvbiBoYW5kbGVJbmZsYXRlRGF0YShpbmZsYXRlZERhdGEpIHtcbiAgICBpbmZsYXRlRGF0YUxpc3QucHVzaChpbmZsYXRlZERhdGEpO1xuICB9XG5cbiAgbGV0IHJlYWRlciA9IG5ldyBTeW5jUmVhZGVyKGJ1ZmZlcik7XG5cbiAgbGV0IHBhcnNlciA9IG5ldyBQYXJzZXIob3B0aW9ucywge1xuICAgIHJlYWQ6IHJlYWRlci5yZWFkLmJpbmQocmVhZGVyKSxcbiAgICBlcnJvcjogaGFuZGxlRXJyb3IsXG4gICAgbWV0YWRhdGE6IGhhbmRsZU1ldGFEYXRhLFxuICAgIGdhbW1hOiBoYW5kbGVHYW1tYSxcbiAgICBwYWxldHRlOiBoYW5kbGVQYWxldHRlLFxuICAgIHRyYW5zQ29sb3I6IGhhbmRsZVRyYW5zQ29sb3IsXG4gICAgaW5mbGF0ZURhdGE6IGhhbmRsZUluZmxhdGVEYXRhLFxuICAgIHNpbXBsZVRyYW5zcGFyZW5jeTogaGFuZGxlU2ltcGxlVHJhbnNwYXJlbmN5LFxuICB9KTtcblxuICBwYXJzZXIuc3RhcnQoKTtcbiAgcmVhZGVyLnByb2Nlc3MoKTtcblxuICBpZiAoZXJyKSB7XG4gICAgdGhyb3cgZXJyO1xuICB9XG5cbiAgLy9qb2luIHRvZ2V0aGVyIHRoZSBpbmZsYXRlIGRhdGFzXG4gIGxldCBpbmZsYXRlRGF0YSA9IEJ1ZmZlci5jb25jYXQoaW5mbGF0ZURhdGFMaXN0KTtcbiAgaW5mbGF0ZURhdGFMaXN0Lmxlbmd0aCA9IDA7XG5cbiAgbGV0IGluZmxhdGVkRGF0YTtcbiAgaWYgKG1ldGFEYXRhLmludGVybGFjZSkge1xuICAgIGluZmxhdGVkRGF0YSA9IHpsaWIuaW5mbGF0ZVN5bmMoaW5mbGF0ZURhdGEpO1xuICB9IGVsc2Uge1xuICAgIGxldCByb3dTaXplID1cbiAgICAgICgobWV0YURhdGEud2lkdGggKiBtZXRhRGF0YS5icHAgKiBtZXRhRGF0YS5kZXB0aCArIDcpID4+IDMpICsgMTtcbiAgICBsZXQgaW1hZ2VTaXplID0gcm93U2l6ZSAqIG1ldGFEYXRhLmhlaWdodDtcbiAgICBpbmZsYXRlZERhdGEgPSBpbmZsYXRlU3luYyhpbmZsYXRlRGF0YSwge1xuICAgICAgY2h1bmtTaXplOiBpbWFnZVNpemUsXG4gICAgICBtYXhMZW5ndGg6IGltYWdlU2l6ZSxcbiAgICB9KTtcbiAgfVxuICBpbmZsYXRlRGF0YSA9IG51bGw7XG5cbiAgaWYgKCFpbmZsYXRlZERhdGEgfHwgIWluZmxhdGVkRGF0YS5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJiYWQgcG5nIC0gaW52YWxpZCBpbmZsYXRlIGRhdGEgcmVzcG9uc2VcIik7XG4gIH1cblxuICBsZXQgdW5maWx0ZXJlZERhdGEgPSBGaWx0ZXJTeW5jLnByb2Nlc3MoaW5mbGF0ZWREYXRhLCBtZXRhRGF0YSk7XG4gIGluZmxhdGVEYXRhID0gbnVsbDtcblxuICBsZXQgYml0bWFwRGF0YSA9IGJpdG1hcHBlci5kYXRhVG9CaXRNYXAodW5maWx0ZXJlZERhdGEsIG1ldGFEYXRhKTtcbiAgdW5maWx0ZXJlZERhdGEgPSBudWxsO1xuXG4gIGxldCBub3JtYWxpc2VkQml0bWFwRGF0YSA9IGZvcm1hdE5vcm1hbGlzZXIoYml0bWFwRGF0YSwgbWV0YURhdGEpO1xuXG4gIG1ldGFEYXRhLmRhdGEgPSBub3JtYWxpc2VkQml0bWFwRGF0YTtcbiAgbWV0YURhdGEuZ2FtbWEgPSBnYW1tYSB8fCAwO1xuXG4gIHJldHVybiBtZXRhRGF0YTtcbn07XG4iXSwibmFtZXMiOlsiaGFzU3luY1psaWIiLCJ6bGliIiwicmVxdWlyZSIsImluZmxhdGVTeW5jIiwiZGVmbGF0ZVN5bmMiLCJTeW5jUmVhZGVyIiwiRmlsdGVyU3luYyIsIlBhcnNlciIsImJpdG1hcHBlciIsImZvcm1hdE5vcm1hbGlzZXIiLCJtb2R1bGUiLCJleHBvcnRzIiwiYnVmZmVyIiwib3B0aW9ucyIsIkVycm9yIiwiZXJyIiwiaGFuZGxlRXJyb3IiLCJfZXJyXyIsIm1ldGFEYXRhIiwiaGFuZGxlTWV0YURhdGEiLCJfbWV0YURhdGFfIiwiaGFuZGxlVHJhbnNDb2xvciIsInRyYW5zQ29sb3IiLCJoYW5kbGVQYWxldHRlIiwicGFsZXR0ZSIsImhhbmRsZVNpbXBsZVRyYW5zcGFyZW5jeSIsImFscGhhIiwiZ2FtbWEiLCJoYW5kbGVHYW1tYSIsIl9nYW1tYV8iLCJpbmZsYXRlRGF0YUxpc3QiLCJoYW5kbGVJbmZsYXRlRGF0YSIsImluZmxhdGVkRGF0YSIsInB1c2giLCJyZWFkZXIiLCJwYXJzZXIiLCJyZWFkIiwiYmluZCIsImVycm9yIiwibWV0YWRhdGEiLCJpbmZsYXRlRGF0YSIsInNpbXBsZVRyYW5zcGFyZW5jeSIsInN0YXJ0IiwicHJvY2VzcyIsIkJ1ZmZlciIsImNvbmNhdCIsImxlbmd0aCIsImludGVybGFjZSIsInJvd1NpemUiLCJ3aWR0aCIsImJwcCIsImRlcHRoIiwiaW1hZ2VTaXplIiwiaGVpZ2h0IiwiY2h1bmtTaXplIiwibWF4TGVuZ3RoIiwidW5maWx0ZXJlZERhdGEiLCJiaXRtYXBEYXRhIiwiZGF0YVRvQml0TWFwIiwibm9ybWFsaXNlZEJpdG1hcERhdGEiLCJkYXRhIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/pngjs/lib/parser-sync.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/pngjs/lib/parser.js":
/*!******************************************!*\
  !*** ./node_modules/pngjs/lib/parser.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nlet constants = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/pngjs/lib/constants.js\");\nlet CrcCalculator = __webpack_require__(/*! ./crc */ \"(ssr)/./node_modules/pngjs/lib/crc.js\");\nlet Parser = module.exports = function(options, dependencies) {\n    this._options = options;\n    options.checkCRC = options.checkCRC !== false;\n    this._hasIHDR = false;\n    this._hasIEND = false;\n    this._emittedHeadersFinished = false;\n    // input flags/metadata\n    this._palette = [];\n    this._colorType = 0;\n    this._chunks = {};\n    this._chunks[constants.TYPE_IHDR] = this._handleIHDR.bind(this);\n    this._chunks[constants.TYPE_IEND] = this._handleIEND.bind(this);\n    this._chunks[constants.TYPE_IDAT] = this._handleIDAT.bind(this);\n    this._chunks[constants.TYPE_PLTE] = this._handlePLTE.bind(this);\n    this._chunks[constants.TYPE_tRNS] = this._handleTRNS.bind(this);\n    this._chunks[constants.TYPE_gAMA] = this._handleGAMA.bind(this);\n    this.read = dependencies.read;\n    this.error = dependencies.error;\n    this.metadata = dependencies.metadata;\n    this.gamma = dependencies.gamma;\n    this.transColor = dependencies.transColor;\n    this.palette = dependencies.palette;\n    this.parsed = dependencies.parsed;\n    this.inflateData = dependencies.inflateData;\n    this.finished = dependencies.finished;\n    this.simpleTransparency = dependencies.simpleTransparency;\n    this.headersFinished = dependencies.headersFinished || function() {};\n};\nParser.prototype.start = function() {\n    this.read(constants.PNG_SIGNATURE.length, this._parseSignature.bind(this));\n};\nParser.prototype._parseSignature = function(data) {\n    let signature = constants.PNG_SIGNATURE;\n    for(let i = 0; i < signature.length; i++){\n        if (data[i] !== signature[i]) {\n            this.error(new Error(\"Invalid file signature\"));\n            return;\n        }\n    }\n    this.read(8, this._parseChunkBegin.bind(this));\n};\nParser.prototype._parseChunkBegin = function(data) {\n    // chunk content length\n    let length = data.readUInt32BE(0);\n    // chunk type\n    let type = data.readUInt32BE(4);\n    let name = \"\";\n    for(let i = 4; i < 8; i++){\n        name += String.fromCharCode(data[i]);\n    }\n    //console.log('chunk ', name, length);\n    // chunk flags\n    let ancillary = Boolean(data[4] & 0x20); // or critical\n    //    priv = Boolean(data[5] & 0x20), // or public\n    //    safeToCopy = Boolean(data[7] & 0x20); // or unsafe\n    if (!this._hasIHDR && type !== constants.TYPE_IHDR) {\n        this.error(new Error(\"Expected IHDR on beggining\"));\n        return;\n    }\n    this._crc = new CrcCalculator();\n    this._crc.write(Buffer.from(name));\n    if (this._chunks[type]) {\n        return this._chunks[type](length);\n    }\n    if (!ancillary) {\n        this.error(new Error(\"Unsupported critical chunk type \" + name));\n        return;\n    }\n    this.read(length + 4, this._skipChunk.bind(this));\n};\nParser.prototype._skipChunk = function() {\n    this.read(8, this._parseChunkBegin.bind(this));\n};\nParser.prototype._handleChunkEnd = function() {\n    this.read(4, this._parseChunkEnd.bind(this));\n};\nParser.prototype._parseChunkEnd = function(data) {\n    let fileCrc = data.readInt32BE(0);\n    let calcCrc = this._crc.crc32();\n    // check CRC\n    if (this._options.checkCRC && calcCrc !== fileCrc) {\n        this.error(new Error(\"Crc error - \" + fileCrc + \" - \" + calcCrc));\n        return;\n    }\n    if (!this._hasIEND) {\n        this.read(8, this._parseChunkBegin.bind(this));\n    }\n};\nParser.prototype._handleIHDR = function(length) {\n    this.read(length, this._parseIHDR.bind(this));\n};\nParser.prototype._parseIHDR = function(data) {\n    this._crc.write(data);\n    let width = data.readUInt32BE(0);\n    let height = data.readUInt32BE(4);\n    let depth = data[8];\n    let colorType = data[9]; // bits: 1 palette, 2 color, 4 alpha\n    let compr = data[10];\n    let filter = data[11];\n    let interlace = data[12];\n    // console.log('    width', width, 'height', height,\n    //     'depth', depth, 'colorType', colorType,\n    //     'compr', compr, 'filter', filter, 'interlace', interlace\n    // );\n    if (depth !== 8 && depth !== 4 && depth !== 2 && depth !== 1 && depth !== 16) {\n        this.error(new Error(\"Unsupported bit depth \" + depth));\n        return;\n    }\n    if (!(colorType in constants.COLORTYPE_TO_BPP_MAP)) {\n        this.error(new Error(\"Unsupported color type\"));\n        return;\n    }\n    if (compr !== 0) {\n        this.error(new Error(\"Unsupported compression method\"));\n        return;\n    }\n    if (filter !== 0) {\n        this.error(new Error(\"Unsupported filter method\"));\n        return;\n    }\n    if (interlace !== 0 && interlace !== 1) {\n        this.error(new Error(\"Unsupported interlace method\"));\n        return;\n    }\n    this._colorType = colorType;\n    let bpp = constants.COLORTYPE_TO_BPP_MAP[this._colorType];\n    this._hasIHDR = true;\n    this.metadata({\n        width: width,\n        height: height,\n        depth: depth,\n        interlace: Boolean(interlace),\n        palette: Boolean(colorType & constants.COLORTYPE_PALETTE),\n        color: Boolean(colorType & constants.COLORTYPE_COLOR),\n        alpha: Boolean(colorType & constants.COLORTYPE_ALPHA),\n        bpp: bpp,\n        colorType: colorType\n    });\n    this._handleChunkEnd();\n};\nParser.prototype._handlePLTE = function(length) {\n    this.read(length, this._parsePLTE.bind(this));\n};\nParser.prototype._parsePLTE = function(data) {\n    this._crc.write(data);\n    let entries = Math.floor(data.length / 3);\n    // console.log('Palette:', entries);\n    for(let i = 0; i < entries; i++){\n        this._palette.push([\n            data[i * 3],\n            data[i * 3 + 1],\n            data[i * 3 + 2],\n            0xff\n        ]);\n    }\n    this.palette(this._palette);\n    this._handleChunkEnd();\n};\nParser.prototype._handleTRNS = function(length) {\n    this.simpleTransparency();\n    this.read(length, this._parseTRNS.bind(this));\n};\nParser.prototype._parseTRNS = function(data) {\n    this._crc.write(data);\n    // palette\n    if (this._colorType === constants.COLORTYPE_PALETTE_COLOR) {\n        if (this._palette.length === 0) {\n            this.error(new Error(\"Transparency chunk must be after palette\"));\n            return;\n        }\n        if (data.length > this._palette.length) {\n            this.error(new Error(\"More transparent colors than palette size\"));\n            return;\n        }\n        for(let i = 0; i < data.length; i++){\n            this._palette[i][3] = data[i];\n        }\n        this.palette(this._palette);\n    }\n    // for colorType 0 (grayscale) and 2 (rgb)\n    // there might be one gray/color defined as transparent\n    if (this._colorType === constants.COLORTYPE_GRAYSCALE) {\n        // grey, 2 bytes\n        this.transColor([\n            data.readUInt16BE(0)\n        ]);\n    }\n    if (this._colorType === constants.COLORTYPE_COLOR) {\n        this.transColor([\n            data.readUInt16BE(0),\n            data.readUInt16BE(2),\n            data.readUInt16BE(4)\n        ]);\n    }\n    this._handleChunkEnd();\n};\nParser.prototype._handleGAMA = function(length) {\n    this.read(length, this._parseGAMA.bind(this));\n};\nParser.prototype._parseGAMA = function(data) {\n    this._crc.write(data);\n    this.gamma(data.readUInt32BE(0) / constants.GAMMA_DIVISION);\n    this._handleChunkEnd();\n};\nParser.prototype._handleIDAT = function(length) {\n    if (!this._emittedHeadersFinished) {\n        this._emittedHeadersFinished = true;\n        this.headersFinished();\n    }\n    this.read(-length, this._parseIDAT.bind(this, length));\n};\nParser.prototype._parseIDAT = function(length, data) {\n    this._crc.write(data);\n    if (this._colorType === constants.COLORTYPE_PALETTE_COLOR && this._palette.length === 0) {\n        throw new Error(\"Expected palette not found\");\n    }\n    this.inflateData(data);\n    let leftOverLength = length - data.length;\n    if (leftOverLength > 0) {\n        this._handleIDAT(leftOverLength);\n    } else {\n        this._handleChunkEnd();\n    }\n};\nParser.prototype._handleIEND = function(length) {\n    this.read(length, this._parseIEND.bind(this));\n};\nParser.prototype._parseIEND = function(data) {\n    this._crc.write(data);\n    this._hasIEND = true;\n    this._handleChunkEnd();\n    if (this.finished) {\n        this.finished();\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/pngjs/lib/parser.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/pngjs/lib/png-sync.js":
/*!********************************************!*\
  !*** ./node_modules/pngjs/lib/png-sync.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nlet parse = __webpack_require__(/*! ./parser-sync */ \"(ssr)/./node_modules/pngjs/lib/parser-sync.js\");\nlet pack = __webpack_require__(/*! ./packer-sync */ \"(ssr)/./node_modules/pngjs/lib/packer-sync.js\");\nexports.read = function(buffer, options) {\n    return parse(buffer, options || {});\n};\nexports.write = function(png, options) {\n    return pack(png, options);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcG5nanMvbGliL3BuZy1zeW5jLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBRWIsSUFBSUEsUUFBUUMsbUJBQU9BLENBQUMsb0VBQWU7QUFDbkMsSUFBSUMsT0FBT0QsbUJBQU9BLENBQUMsb0VBQWU7QUFFbENFLFlBQVksR0FBRyxTQUFVRSxNQUFNLEVBQUVDLE9BQU87SUFDdEMsT0FBT04sTUFBTUssUUFBUUMsV0FBVyxDQUFDO0FBQ25DO0FBRUFILGFBQWEsR0FBRyxTQUFVSyxHQUFHLEVBQUVGLE9BQU87SUFDcEMsT0FBT0osS0FBS00sS0FBS0Y7QUFDbkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90aGUtZ3JpZC0yLy4vbm9kZV9tb2R1bGVzL3BuZ2pzL2xpYi9wbmctc3luYy5qcz84YWVkIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5sZXQgcGFyc2UgPSByZXF1aXJlKFwiLi9wYXJzZXItc3luY1wiKTtcbmxldCBwYWNrID0gcmVxdWlyZShcIi4vcGFja2VyLXN5bmNcIik7XG5cbmV4cG9ydHMucmVhZCA9IGZ1bmN0aW9uIChidWZmZXIsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHBhcnNlKGJ1ZmZlciwgb3B0aW9ucyB8fCB7fSk7XG59O1xuXG5leHBvcnRzLndyaXRlID0gZnVuY3Rpb24gKHBuZywgb3B0aW9ucykge1xuICByZXR1cm4gcGFjayhwbmcsIG9wdGlvbnMpO1xufTtcbiJdLCJuYW1lcyI6WyJwYXJzZSIsInJlcXVpcmUiLCJwYWNrIiwiZXhwb3J0cyIsInJlYWQiLCJidWZmZXIiLCJvcHRpb25zIiwid3JpdGUiLCJwbmciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/pngjs/lib/png-sync.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/pngjs/lib/png.js":
/*!***************************************!*\
  !*** ./node_modules/pngjs/lib/png.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nlet util = __webpack_require__(/*! util */ \"util\");\nlet Stream = __webpack_require__(/*! stream */ \"stream\");\nlet Parser = __webpack_require__(/*! ./parser-async */ \"(ssr)/./node_modules/pngjs/lib/parser-async.js\");\nlet Packer = __webpack_require__(/*! ./packer-async */ \"(ssr)/./node_modules/pngjs/lib/packer-async.js\");\nlet PNGSync = __webpack_require__(/*! ./png-sync */ \"(ssr)/./node_modules/pngjs/lib/png-sync.js\");\nlet PNG = exports.PNG = function(options) {\n    Stream.call(this);\n    options = options || {}; // eslint-disable-line no-param-reassign\n    // coerce pixel dimensions to integers (also coerces undefined -> 0):\n    this.width = options.width | 0;\n    this.height = options.height | 0;\n    this.data = this.width > 0 && this.height > 0 ? Buffer.alloc(4 * this.width * this.height) : null;\n    if (options.fill && this.data) {\n        this.data.fill(0);\n    }\n    this.gamma = 0;\n    this.readable = this.writable = true;\n    this._parser = new Parser(options);\n    this._parser.on(\"error\", this.emit.bind(this, \"error\"));\n    this._parser.on(\"close\", this._handleClose.bind(this));\n    this._parser.on(\"metadata\", this._metadata.bind(this));\n    this._parser.on(\"gamma\", this._gamma.bind(this));\n    this._parser.on(\"parsed\", (function(data) {\n        this.data = data;\n        this.emit(\"parsed\", data);\n    }).bind(this));\n    this._packer = new Packer(options);\n    this._packer.on(\"data\", this.emit.bind(this, \"data\"));\n    this._packer.on(\"end\", this.emit.bind(this, \"end\"));\n    this._parser.on(\"close\", this._handleClose.bind(this));\n    this._packer.on(\"error\", this.emit.bind(this, \"error\"));\n};\nutil.inherits(PNG, Stream);\nPNG.sync = PNGSync;\nPNG.prototype.pack = function() {\n    if (!this.data || !this.data.length) {\n        this.emit(\"error\", \"No data provided\");\n        return this;\n    }\n    process.nextTick((function() {\n        this._packer.pack(this.data, this.width, this.height, this.gamma);\n    }).bind(this));\n    return this;\n};\nPNG.prototype.parse = function(data, callback) {\n    if (callback) {\n        let onParsed, onError;\n        onParsed = (function(parsedData) {\n            this.removeListener(\"error\", onError);\n            this.data = parsedData;\n            callback(null, this);\n        }).bind(this);\n        onError = (function(err) {\n            this.removeListener(\"parsed\", onParsed);\n            callback(err, null);\n        }).bind(this);\n        this.once(\"parsed\", onParsed);\n        this.once(\"error\", onError);\n    }\n    this.end(data);\n    return this;\n};\nPNG.prototype.write = function(data) {\n    this._parser.write(data);\n    return true;\n};\nPNG.prototype.end = function(data) {\n    this._parser.end(data);\n};\nPNG.prototype._metadata = function(metadata) {\n    this.width = metadata.width;\n    this.height = metadata.height;\n    this.emit(\"metadata\", metadata);\n};\nPNG.prototype._gamma = function(gamma) {\n    this.gamma = gamma;\n};\nPNG.prototype._handleClose = function() {\n    if (!this._parser.writable && !this._packer.readable) {\n        this.emit(\"close\");\n    }\n};\nPNG.bitblt = function(src, dst, srcX, srcY, width, height, deltaX, deltaY) {\n    // eslint-disable-line max-params\n    // coerce pixel dimensions to integers (also coerces undefined -> 0):\n    /* eslint-disable no-param-reassign */ srcX |= 0;\n    srcY |= 0;\n    width |= 0;\n    height |= 0;\n    deltaX |= 0;\n    deltaY |= 0;\n    /* eslint-enable no-param-reassign */ if (srcX > src.width || srcY > src.height || srcX + width > src.width || srcY + height > src.height) {\n        throw new Error(\"bitblt reading outside image\");\n    }\n    if (deltaX > dst.width || deltaY > dst.height || deltaX + width > dst.width || deltaY + height > dst.height) {\n        throw new Error(\"bitblt writing outside image\");\n    }\n    for(let y = 0; y < height; y++){\n        src.data.copy(dst.data, (deltaY + y) * dst.width + deltaX << 2, (srcY + y) * src.width + srcX << 2, (srcY + y) * src.width + srcX + width << 2);\n    }\n};\nPNG.prototype.bitblt = function(dst, srcX, srcY, width, height, deltaX, deltaY) {\n    // eslint-disable-line max-params\n    PNG.bitblt(this, dst, srcX, srcY, width, height, deltaX, deltaY);\n    return this;\n};\nPNG.adjustGamma = function(src) {\n    if (src.gamma) {\n        for(let y = 0; y < src.height; y++){\n            for(let x = 0; x < src.width; x++){\n                let idx = src.width * y + x << 2;\n                for(let i = 0; i < 3; i++){\n                    let sample = src.data[idx + i] / 255;\n                    sample = Math.pow(sample, 1 / 2.2 / src.gamma);\n                    src.data[idx + i] = Math.round(sample * 255);\n                }\n            }\n        }\n        src.gamma = 0;\n    }\n};\nPNG.prototype.adjustGamma = function() {\n    PNG.adjustGamma(this);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/pngjs/lib/png.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/pngjs/lib/sync-inflate.js":
/*!************************************************!*\
  !*** ./node_modules/pngjs/lib/sync-inflate.js ***!
  \************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\nlet assert = (__webpack_require__(/*! assert */ \"assert\").ok);\nlet zlib = __webpack_require__(/*! zlib */ \"zlib\");\nlet util = __webpack_require__(/*! util */ \"util\");\nlet kMaxLength = (__webpack_require__(/*! buffer */ \"buffer\").kMaxLength);\nfunction Inflate(opts) {\n    if (!(this instanceof Inflate)) {\n        return new Inflate(opts);\n    }\n    if (opts && opts.chunkSize < zlib.Z_MIN_CHUNK) {\n        opts.chunkSize = zlib.Z_MIN_CHUNK;\n    }\n    zlib.Inflate.call(this, opts);\n    // Node 8 --> 9 compatibility check\n    this._offset = this._offset === undefined ? this._outOffset : this._offset;\n    this._buffer = this._buffer || this._outBuffer;\n    if (opts && opts.maxLength != null) {\n        this._maxLength = opts.maxLength;\n    }\n}\nfunction createInflate(opts) {\n    return new Inflate(opts);\n}\nfunction _close(engine, callback) {\n    if (callback) {\n        process.nextTick(callback);\n    }\n    // Caller may invoke .close after a zlib error (which will null _handle).\n    if (!engine._handle) {\n        return;\n    }\n    engine._handle.close();\n    engine._handle = null;\n}\nInflate.prototype._processChunk = function(chunk, flushFlag, asyncCb) {\n    if (typeof asyncCb === \"function\") {\n        return zlib.Inflate._processChunk.call(this, chunk, flushFlag, asyncCb);\n    }\n    let self = this;\n    let availInBefore = chunk && chunk.length;\n    let availOutBefore = this._chunkSize - this._offset;\n    let leftToInflate = this._maxLength;\n    let inOff = 0;\n    let buffers = [];\n    let nread = 0;\n    let error;\n    this.on(\"error\", function(err) {\n        error = err;\n    });\n    function handleChunk(availInAfter, availOutAfter) {\n        if (self._hadError) {\n            return;\n        }\n        let have = availOutBefore - availOutAfter;\n        assert(have >= 0, \"have should not go down\");\n        if (have > 0) {\n            let out = self._buffer.slice(self._offset, self._offset + have);\n            self._offset += have;\n            if (out.length > leftToInflate) {\n                out = out.slice(0, leftToInflate);\n            }\n            buffers.push(out);\n            nread += out.length;\n            leftToInflate -= out.length;\n            if (leftToInflate === 0) {\n                return false;\n            }\n        }\n        if (availOutAfter === 0 || self._offset >= self._chunkSize) {\n            availOutBefore = self._chunkSize;\n            self._offset = 0;\n            self._buffer = Buffer.allocUnsafe(self._chunkSize);\n        }\n        if (availOutAfter === 0) {\n            inOff += availInBefore - availInAfter;\n            availInBefore = availInAfter;\n            return true;\n        }\n        return false;\n    }\n    assert(this._handle, \"zlib binding closed\");\n    let res;\n    do {\n        res = this._handle.writeSync(flushFlag, chunk, inOff, availInBefore, this._buffer, this._offset, availOutBefore); // out_len\n        // Node 8 --> 9 compatibility check\n        res = res || this._writeState;\n    }while (!this._hadError && handleChunk(res[0], res[1]));\n    if (this._hadError) {\n        throw error;\n    }\n    if (nread >= kMaxLength) {\n        _close(this);\n        throw new RangeError(\"Cannot create final Buffer. It would be larger than 0x\" + kMaxLength.toString(16) + \" bytes\");\n    }\n    let buf = Buffer.concat(buffers, nread);\n    _close(this);\n    return buf;\n};\nutil.inherits(Inflate, zlib.Inflate);\nfunction zlibBufferSync(engine, buffer) {\n    if (typeof buffer === \"string\") {\n        buffer = Buffer.from(buffer);\n    }\n    if (!(buffer instanceof Buffer)) {\n        throw new TypeError(\"Not a string or buffer\");\n    }\n    let flushFlag = engine._finishFlushFlag;\n    if (flushFlag == null) {\n        flushFlag = zlib.Z_FINISH;\n    }\n    return engine._processChunk(buffer, flushFlag);\n}\nfunction inflateSync(buffer, opts) {\n    return zlibBufferSync(new Inflate(opts), buffer);\n}\nmodule.exports = exports = inflateSync;\nexports.Inflate = Inflate;\nexports.createInflate = createInflate;\nexports.inflateSync = inflateSync;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/pngjs/lib/sync-inflate.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/pngjs/lib/sync-reader.js":
/*!***********************************************!*\
  !*** ./node_modules/pngjs/lib/sync-reader.js ***!
  \***********************************************/
/***/ ((module) => {

eval("\nlet SyncReader = module.exports = function(buffer) {\n    this._buffer = buffer;\n    this._reads = [];\n};\nSyncReader.prototype.read = function(length, callback) {\n    this._reads.push({\n        length: Math.abs(length),\n        allowLess: length < 0,\n        func: callback\n    });\n};\nSyncReader.prototype.process = function() {\n    // as long as there is any data and read requests\n    while(this._reads.length > 0 && this._buffer.length){\n        let read = this._reads[0];\n        if (this._buffer.length && (this._buffer.length >= read.length || read.allowLess)) {\n            // ok there is any data so that we can satisfy this request\n            this._reads.shift(); // == read\n            let buf = this._buffer;\n            this._buffer = buf.slice(read.length);\n            read.func.call(this, buf.slice(0, read.length));\n        } else {\n            break;\n        }\n    }\n    if (this._reads.length > 0) {\n        return new Error(\"There are some read requests waitng on finished stream\");\n    }\n    if (this._buffer.length > 0) {\n        return new Error(\"unrecognised content at end of stream\");\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcG5nanMvbGliL3N5bmMtcmVhZGVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBRWIsSUFBSUEsYUFBY0MsT0FBT0MsT0FBTyxHQUFHLFNBQVVDLE1BQU07SUFDakQsSUFBSSxDQUFDQyxPQUFPLEdBQUdEO0lBQ2YsSUFBSSxDQUFDRSxNQUFNLEdBQUcsRUFBRTtBQUNsQjtBQUVBTCxXQUFXTSxTQUFTLENBQUNDLElBQUksR0FBRyxTQUFVQyxNQUFNLEVBQUVDLFFBQVE7SUFDcEQsSUFBSSxDQUFDSixNQUFNLENBQUNLLElBQUksQ0FBQztRQUNmRixRQUFRRyxLQUFLQyxHQUFHLENBQUNKO1FBQ2pCSyxXQUFXTCxTQUFTO1FBQ3BCTSxNQUFNTDtJQUNSO0FBQ0Y7QUFFQVQsV0FBV00sU0FBUyxDQUFDUyxPQUFPLEdBQUc7SUFDN0IsaURBQWlEO0lBQ2pELE1BQU8sSUFBSSxDQUFDVixNQUFNLENBQUNHLE1BQU0sR0FBRyxLQUFLLElBQUksQ0FBQ0osT0FBTyxDQUFDSSxNQUFNLENBQUU7UUFDcEQsSUFBSUQsT0FBTyxJQUFJLENBQUNGLE1BQU0sQ0FBQyxFQUFFO1FBRXpCLElBQ0UsSUFBSSxDQUFDRCxPQUFPLENBQUNJLE1BQU0sSUFDbEIsS0FBSSxDQUFDSixPQUFPLENBQUNJLE1BQU0sSUFBSUQsS0FBS0MsTUFBTSxJQUFJRCxLQUFLTSxTQUFTLEdBQ3JEO1lBQ0EsMkRBQTJEO1lBQzNELElBQUksQ0FBQ1IsTUFBTSxDQUFDVyxLQUFLLElBQUksVUFBVTtZQUUvQixJQUFJQyxNQUFNLElBQUksQ0FBQ2IsT0FBTztZQUV0QixJQUFJLENBQUNBLE9BQU8sR0FBR2EsSUFBSUMsS0FBSyxDQUFDWCxLQUFLQyxNQUFNO1lBRXBDRCxLQUFLTyxJQUFJLENBQUNLLElBQUksQ0FBQyxJQUFJLEVBQUVGLElBQUlDLEtBQUssQ0FBQyxHQUFHWCxLQUFLQyxNQUFNO1FBQy9DLE9BQU87WUFDTDtRQUNGO0lBQ0Y7SUFFQSxJQUFJLElBQUksQ0FBQ0gsTUFBTSxDQUFDRyxNQUFNLEdBQUcsR0FBRztRQUMxQixPQUFPLElBQUlZLE1BQU07SUFDbkI7SUFFQSxJQUFJLElBQUksQ0FBQ2hCLE9BQU8sQ0FBQ0ksTUFBTSxHQUFHLEdBQUc7UUFDM0IsT0FBTyxJQUFJWSxNQUFNO0lBQ25CO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90aGUtZ3JpZC0yLy4vbm9kZV9tb2R1bGVzL3BuZ2pzL2xpYi9zeW5jLXJlYWRlci5qcz8yZjFhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5sZXQgU3luY1JlYWRlciA9IChtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChidWZmZXIpIHtcbiAgdGhpcy5fYnVmZmVyID0gYnVmZmVyO1xuICB0aGlzLl9yZWFkcyA9IFtdO1xufSk7XG5cblN5bmNSZWFkZXIucHJvdG90eXBlLnJlYWQgPSBmdW5jdGlvbiAobGVuZ3RoLCBjYWxsYmFjaykge1xuICB0aGlzLl9yZWFkcy5wdXNoKHtcbiAgICBsZW5ndGg6IE1hdGguYWJzKGxlbmd0aCksIC8vIGlmIGxlbmd0aCA8IDAgdGhlbiBhdCBtb3N0IHRoaXMgbGVuZ3RoXG4gICAgYWxsb3dMZXNzOiBsZW5ndGggPCAwLFxuICAgIGZ1bmM6IGNhbGxiYWNrLFxuICB9KTtcbn07XG5cblN5bmNSZWFkZXIucHJvdG90eXBlLnByb2Nlc3MgPSBmdW5jdGlvbiAoKSB7XG4gIC8vIGFzIGxvbmcgYXMgdGhlcmUgaXMgYW55IGRhdGEgYW5kIHJlYWQgcmVxdWVzdHNcbiAgd2hpbGUgKHRoaXMuX3JlYWRzLmxlbmd0aCA+IDAgJiYgdGhpcy5fYnVmZmVyLmxlbmd0aCkge1xuICAgIGxldCByZWFkID0gdGhpcy5fcmVhZHNbMF07XG5cbiAgICBpZiAoXG4gICAgICB0aGlzLl9idWZmZXIubGVuZ3RoICYmXG4gICAgICAodGhpcy5fYnVmZmVyLmxlbmd0aCA+PSByZWFkLmxlbmd0aCB8fCByZWFkLmFsbG93TGVzcylcbiAgICApIHtcbiAgICAgIC8vIG9rIHRoZXJlIGlzIGFueSBkYXRhIHNvIHRoYXQgd2UgY2FuIHNhdGlzZnkgdGhpcyByZXF1ZXN0XG4gICAgICB0aGlzLl9yZWFkcy5zaGlmdCgpOyAvLyA9PSByZWFkXG5cbiAgICAgIGxldCBidWYgPSB0aGlzLl9idWZmZXI7XG5cbiAgICAgIHRoaXMuX2J1ZmZlciA9IGJ1Zi5zbGljZShyZWFkLmxlbmd0aCk7XG5cbiAgICAgIHJlYWQuZnVuYy5jYWxsKHRoaXMsIGJ1Zi5zbGljZSgwLCByZWFkLmxlbmd0aCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBpZiAodGhpcy5fcmVhZHMubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiBuZXcgRXJyb3IoXCJUaGVyZSBhcmUgc29tZSByZWFkIHJlcXVlc3RzIHdhaXRuZyBvbiBmaW5pc2hlZCBzdHJlYW1cIik7XG4gIH1cblxuICBpZiAodGhpcy5fYnVmZmVyLmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4gbmV3IEVycm9yKFwidW5yZWNvZ25pc2VkIGNvbnRlbnQgYXQgZW5kIG9mIHN0cmVhbVwiKTtcbiAgfVxufTtcbiJdLCJuYW1lcyI6WyJTeW5jUmVhZGVyIiwibW9kdWxlIiwiZXhwb3J0cyIsImJ1ZmZlciIsIl9idWZmZXIiLCJfcmVhZHMiLCJwcm90b3R5cGUiLCJyZWFkIiwibGVuZ3RoIiwiY2FsbGJhY2siLCJwdXNoIiwiTWF0aCIsImFicyIsImFsbG93TGVzcyIsImZ1bmMiLCJwcm9jZXNzIiwic2hpZnQiLCJidWYiLCJzbGljZSIsImNhbGwiLCJFcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/pngjs/lib/sync-reader.js\n");

/***/ })

};
;