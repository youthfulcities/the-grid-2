"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/xstate";
exports.ids = ["vendor-chunks/xstate"];
exports.modules = {

/***/ "(ssr)/./node_modules/xstate/es/Actor.js":
/*!*****************************************!*\
  !*** ./node_modules/xstate/es/Actor.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createDeferredActor: () => (/* binding */ createDeferredActor),\n/* harmony export */   createInvocableActor: () => (/* binding */ createInvocableActor),\n/* harmony export */   createNullActor: () => (/* binding */ createNullActor),\n/* harmony export */   isActor: () => (/* binding */ isActor),\n/* harmony export */   isSpawnedActor: () => (/* binding */ isSpawnedActor),\n/* harmony export */   toActorRef: () => (/* binding */ toActorRef)\n/* harmony export */ });\n/* harmony import */ var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_virtual/_tslib.js */ \"(ssr)/./node_modules/xstate/es/_virtual/_tslib.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/xstate/es/utils.js\");\n/* harmony import */ var _serviceScope_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./serviceScope.js */ \"(ssr)/./node_modules/xstate/es/serviceScope.js\");\n\n\n\nfunction createNullActor(id) {\n    var _a;\n    return _a = {\n        id: id,\n        send: function() {\n            return void 0;\n        },\n        subscribe: function() {\n            return {\n                unsubscribe: function() {\n                    return void 0;\n                }\n            };\n        },\n        getSnapshot: function() {\n            return undefined;\n        },\n        toJSON: function() {\n            return {\n                id: id\n            };\n        }\n    }, _a[_utils_js__WEBPACK_IMPORTED_MODULE_0__.symbolObservable] = function() {\n        return this;\n    }, _a;\n}\n/**\r\n * Creates a deferred actor that is able to be invoked given the provided\r\n * invocation information in its `.meta` value.\r\n *\r\n * @param invokeDefinition The meta information needed to invoke the actor.\r\n */ function createInvocableActor(invokeDefinition, machine, context, _event) {\n    var _a;\n    var invokeSrc = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toInvokeSource)(invokeDefinition.src);\n    var serviceCreator = (_a = machine === null || machine === void 0 ? void 0 : machine.options.services) === null || _a === void 0 ? void 0 : _a[invokeSrc.type];\n    var resolvedData = invokeDefinition.data ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.mapContext)(invokeDefinition.data, context, _event) : undefined;\n    var tempActor = serviceCreator ? createDeferredActor(serviceCreator, invokeDefinition.id, resolvedData) : createNullActor(invokeDefinition.id); // @ts-ignore\n    tempActor.meta = invokeDefinition;\n    return tempActor;\n}\nfunction createDeferredActor(entity, id, data) {\n    var tempActor = createNullActor(id); // @ts-ignore\n    tempActor.deferred = true;\n    if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isMachine)(entity)) {\n        // \"mute\" the existing service scope so potential spawned actors within the `.initialState` stay deferred here\n        var initialState_1 = tempActor.state = (0,_serviceScope_js__WEBPACK_IMPORTED_MODULE_1__.provide)(undefined, function() {\n            return (data ? entity.withContext(data) : entity).initialState;\n        });\n        tempActor.getSnapshot = function() {\n            return initialState_1;\n        };\n    }\n    return tempActor;\n}\nfunction isActor(item) {\n    try {\n        return typeof item.send === \"function\";\n    } catch (e) {\n        return false;\n    }\n}\nfunction isSpawnedActor(item) {\n    return isActor(item) && \"id\" in item;\n} // TODO: refactor the return type, this could be written in a better way but it's best to avoid unneccessary breaking changes now\nfunction toActorRef(actorRefLike) {\n    var _a;\n    return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((_a = {\n        subscribe: function() {\n            return {\n                unsubscribe: function() {\n                    return void 0;\n                }\n            };\n        },\n        id: \"anonymous\",\n        getSnapshot: function() {\n            return undefined;\n        }\n    }, _a[_utils_js__WEBPACK_IMPORTED_MODULE_0__.symbolObservable] = function() {\n        return this;\n    }, _a), actorRefLike);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMveHN0YXRlL2VzL0FjdG9yLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFnRDtBQUNxQztBQUN6QztBQUU1QyxTQUFTTSxnQkFBZ0JDLEVBQUU7SUFDekIsSUFBSUM7SUFFSixPQUFPQSxLQUFLO1FBQ1ZELElBQUlBO1FBQ0pFLE1BQU07WUFDSixPQUFPLEtBQUs7UUFDZDtRQUNBQyxXQUFXO1lBQ1QsT0FBTztnQkFDTEMsYUFBYTtvQkFDWCxPQUFPLEtBQUs7Z0JBQ2Q7WUFDRjtRQUNGO1FBQ0FDLGFBQWE7WUFDWCxPQUFPQztRQUNUO1FBQ0FDLFFBQVE7WUFDTixPQUFPO2dCQUNMUCxJQUFJQTtZQUNOO1FBQ0Y7SUFDRixHQUFHQyxFQUFFLENBQUNQLHVEQUFnQkEsQ0FBQyxHQUFHO1FBQ3hCLE9BQU8sSUFBSTtJQUNiLEdBQUdPO0FBQ0w7QUFDQTs7Ozs7Q0FLQyxHQUVELFNBQVNPLHFCQUFxQkMsZ0JBQWdCLEVBQUVDLE9BQU8sRUFBRUMsT0FBTyxFQUFFQyxNQUFNO0lBQ3RFLElBQUlYO0lBRUosSUFBSVksWUFBWWxCLHlEQUFjQSxDQUFDYyxpQkFBaUJLLEdBQUc7SUFDbkQsSUFBSUMsaUJBQWlCLENBQUNkLEtBQUtTLFlBQVksUUFBUUEsWUFBWSxLQUFLLElBQUksS0FBSyxJQUFJQSxRQUFRTSxPQUFPLENBQUNDLFFBQVEsTUFBTSxRQUFRaEIsT0FBTyxLQUFLLElBQUksS0FBSyxJQUFJQSxFQUFFLENBQUNZLFVBQVVLLElBQUksQ0FBQztJQUM5SixJQUFJQyxlQUFlVixpQkFBaUJXLElBQUksR0FBR3hCLHFEQUFVQSxDQUFDYSxpQkFBaUJXLElBQUksRUFBRVQsU0FBU0MsVUFBVU47SUFDaEcsSUFBSWUsWUFBWU4saUJBQWlCTyxvQkFBb0JQLGdCQUFnQk4saUJBQWlCVCxFQUFFLEVBQUVtQixnQkFBZ0JwQixnQkFBZ0JVLGlCQUFpQlQsRUFBRSxHQUFHLGFBQWE7SUFFN0pxQixVQUFVRSxJQUFJLEdBQUdkO0lBQ2pCLE9BQU9ZO0FBQ1Q7QUFDQSxTQUFTQyxvQkFBb0JFLE1BQU0sRUFBRXhCLEVBQUUsRUFBRW9CLElBQUk7SUFDM0MsSUFBSUMsWUFBWXRCLGdCQUFnQkMsS0FBSyxhQUFhO0lBRWxEcUIsVUFBVUksUUFBUSxHQUFHO0lBRXJCLElBQUk1QixvREFBU0EsQ0FBQzJCLFNBQVM7UUFDckIsOEdBQThHO1FBQzlHLElBQUlFLGlCQUFpQkwsVUFBVU0sS0FBSyxHQUFHN0IseURBQU9BLENBQUNRLFdBQVc7WUFDeEQsT0FBTyxDQUFDYyxPQUFPSSxPQUFPSSxXQUFXLENBQUNSLFFBQVFJLE1BQUssRUFBR0ssWUFBWTtRQUNoRTtRQUVBUixVQUFVaEIsV0FBVyxHQUFHO1lBQ3RCLE9BQU9xQjtRQUNUO0lBQ0Y7SUFFQSxPQUFPTDtBQUNUO0FBQ0EsU0FBU1MsUUFBUUMsSUFBSTtJQUNuQixJQUFJO1FBQ0YsT0FBTyxPQUFPQSxLQUFLN0IsSUFBSSxLQUFLO0lBQzlCLEVBQUUsT0FBTzhCLEdBQUc7UUFDVixPQUFPO0lBQ1Q7QUFDRjtBQUNBLFNBQVNDLGVBQWVGLElBQUk7SUFDMUIsT0FBT0QsUUFBUUMsU0FBUyxRQUFRQTtBQUNsQyxFQUFFLGlJQUFpSTtBQUVuSSxTQUFTRyxXQUFXQyxZQUFZO0lBQzlCLElBQUlsQztJQUVKLE9BQU9SLDJEQUFRQSxDQUFFUSxDQUFBQSxLQUFLO1FBQ3BCRSxXQUFXO1lBQ1QsT0FBTztnQkFDTEMsYUFBYTtvQkFDWCxPQUFPLEtBQUs7Z0JBQ2Q7WUFDRjtRQUNGO1FBQ0FKLElBQUk7UUFDSkssYUFBYTtZQUNYLE9BQU9DO1FBQ1Q7SUFDRixHQUFHTCxFQUFFLENBQUNQLHVEQUFnQkEsQ0FBQyxHQUFHO1FBQ3hCLE9BQU8sSUFBSTtJQUNiLEdBQUdPLEVBQUMsR0FBSWtDO0FBQ1Y7QUFFMkciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90aGUtZ3JpZC0yLy4vbm9kZV9tb2R1bGVzL3hzdGF0ZS9lcy9BY3Rvci5qcz9iYjNiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IF9fYXNzaWduIH0gZnJvbSAnLi9fdmlydHVhbC9fdHNsaWIuanMnO1xuaW1wb3J0IHsgc3ltYm9sT2JzZXJ2YWJsZSwgdG9JbnZva2VTb3VyY2UsIG1hcENvbnRleHQsIGlzTWFjaGluZSB9IGZyb20gJy4vdXRpbHMuanMnO1xuaW1wb3J0IHsgcHJvdmlkZSB9IGZyb20gJy4vc2VydmljZVNjb3BlLmpzJztcblxuZnVuY3Rpb24gY3JlYXRlTnVsbEFjdG9yKGlkKSB7XG4gIHZhciBfYTtcblxuICByZXR1cm4gX2EgPSB7XG4gICAgaWQ6IGlkLFxuICAgIHNlbmQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgfSxcbiAgICBzdWJzY3JpYmU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHVuc3Vic2NyaWJlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9LFxuICAgIGdldFNuYXBzaG90OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH0sXG4gICAgdG9KU09OOiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBpZDogaWRcbiAgICAgIH07XG4gICAgfVxuICB9LCBfYVtzeW1ib2xPYnNlcnZhYmxlXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfSwgX2E7XG59XG4vKipcclxuICogQ3JlYXRlcyBhIGRlZmVycmVkIGFjdG9yIHRoYXQgaXMgYWJsZSB0byBiZSBpbnZva2VkIGdpdmVuIHRoZSBwcm92aWRlZFxyXG4gKiBpbnZvY2F0aW9uIGluZm9ybWF0aW9uIGluIGl0cyBgLm1ldGFgIHZhbHVlLlxyXG4gKlxyXG4gKiBAcGFyYW0gaW52b2tlRGVmaW5pdGlvbiBUaGUgbWV0YSBpbmZvcm1hdGlvbiBuZWVkZWQgdG8gaW52b2tlIHRoZSBhY3Rvci5cclxuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZUludm9jYWJsZUFjdG9yKGludm9rZURlZmluaXRpb24sIG1hY2hpbmUsIGNvbnRleHQsIF9ldmVudCkge1xuICB2YXIgX2E7XG5cbiAgdmFyIGludm9rZVNyYyA9IHRvSW52b2tlU291cmNlKGludm9rZURlZmluaXRpb24uc3JjKTtcbiAgdmFyIHNlcnZpY2VDcmVhdG9yID0gKF9hID0gbWFjaGluZSA9PT0gbnVsbCB8fCBtYWNoaW5lID09PSB2b2lkIDAgPyB2b2lkIDAgOiBtYWNoaW5lLm9wdGlvbnMuc2VydmljZXMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYVtpbnZva2VTcmMudHlwZV07XG4gIHZhciByZXNvbHZlZERhdGEgPSBpbnZva2VEZWZpbml0aW9uLmRhdGEgPyBtYXBDb250ZXh0KGludm9rZURlZmluaXRpb24uZGF0YSwgY29udGV4dCwgX2V2ZW50KSA6IHVuZGVmaW5lZDtcbiAgdmFyIHRlbXBBY3RvciA9IHNlcnZpY2VDcmVhdG9yID8gY3JlYXRlRGVmZXJyZWRBY3RvcihzZXJ2aWNlQ3JlYXRvciwgaW52b2tlRGVmaW5pdGlvbi5pZCwgcmVzb2x2ZWREYXRhKSA6IGNyZWF0ZU51bGxBY3RvcihpbnZva2VEZWZpbml0aW9uLmlkKTsgLy8gQHRzLWlnbm9yZVxuXG4gIHRlbXBBY3Rvci5tZXRhID0gaW52b2tlRGVmaW5pdGlvbjtcbiAgcmV0dXJuIHRlbXBBY3Rvcjtcbn1cbmZ1bmN0aW9uIGNyZWF0ZURlZmVycmVkQWN0b3IoZW50aXR5LCBpZCwgZGF0YSkge1xuICB2YXIgdGVtcEFjdG9yID0gY3JlYXRlTnVsbEFjdG9yKGlkKTsgLy8gQHRzLWlnbm9yZVxuXG4gIHRlbXBBY3Rvci5kZWZlcnJlZCA9IHRydWU7XG5cbiAgaWYgKGlzTWFjaGluZShlbnRpdHkpKSB7XG4gICAgLy8gXCJtdXRlXCIgdGhlIGV4aXN0aW5nIHNlcnZpY2Ugc2NvcGUgc28gcG90ZW50aWFsIHNwYXduZWQgYWN0b3JzIHdpdGhpbiB0aGUgYC5pbml0aWFsU3RhdGVgIHN0YXkgZGVmZXJyZWQgaGVyZVxuICAgIHZhciBpbml0aWFsU3RhdGVfMSA9IHRlbXBBY3Rvci5zdGF0ZSA9IHByb3ZpZGUodW5kZWZpbmVkLCBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gKGRhdGEgPyBlbnRpdHkud2l0aENvbnRleHQoZGF0YSkgOiBlbnRpdHkpLmluaXRpYWxTdGF0ZTtcbiAgICB9KTtcblxuICAgIHRlbXBBY3Rvci5nZXRTbmFwc2hvdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBpbml0aWFsU3RhdGVfMTtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIHRlbXBBY3Rvcjtcbn1cbmZ1bmN0aW9uIGlzQWN0b3IoaXRlbSkge1xuICB0cnkge1xuICAgIHJldHVybiB0eXBlb2YgaXRlbS5zZW5kID09PSAnZnVuY3Rpb24nO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5mdW5jdGlvbiBpc1NwYXduZWRBY3RvcihpdGVtKSB7XG4gIHJldHVybiBpc0FjdG9yKGl0ZW0pICYmICdpZCcgaW4gaXRlbTtcbn0gLy8gVE9ETzogcmVmYWN0b3IgdGhlIHJldHVybiB0eXBlLCB0aGlzIGNvdWxkIGJlIHdyaXR0ZW4gaW4gYSBiZXR0ZXIgd2F5IGJ1dCBpdCdzIGJlc3QgdG8gYXZvaWQgdW5uZWNjZXNzYXJ5IGJyZWFraW5nIGNoYW5nZXMgbm93XG5cbmZ1bmN0aW9uIHRvQWN0b3JSZWYoYWN0b3JSZWZMaWtlKSB7XG4gIHZhciBfYTtcblxuICByZXR1cm4gX19hc3NpZ24oKF9hID0ge1xuICAgIHN1YnNjcmliZTogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdW5zdWJzY3JpYmU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gdm9pZCAwO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0sXG4gICAgaWQ6ICdhbm9ueW1vdXMnLFxuICAgIGdldFNuYXBzaG90OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgfSwgX2Fbc3ltYm9sT2JzZXJ2YWJsZV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sIF9hKSwgYWN0b3JSZWZMaWtlKTtcbn1cblxuZXhwb3J0IHsgY3JlYXRlRGVmZXJyZWRBY3RvciwgY3JlYXRlSW52b2NhYmxlQWN0b3IsIGNyZWF0ZU51bGxBY3RvciwgaXNBY3RvciwgaXNTcGF3bmVkQWN0b3IsIHRvQWN0b3JSZWYgfTtcbiJdLCJuYW1lcyI6WyJfX2Fzc2lnbiIsInN5bWJvbE9ic2VydmFibGUiLCJ0b0ludm9rZVNvdXJjZSIsIm1hcENvbnRleHQiLCJpc01hY2hpbmUiLCJwcm92aWRlIiwiY3JlYXRlTnVsbEFjdG9yIiwiaWQiLCJfYSIsInNlbmQiLCJzdWJzY3JpYmUiLCJ1bnN1YnNjcmliZSIsImdldFNuYXBzaG90IiwidW5kZWZpbmVkIiwidG9KU09OIiwiY3JlYXRlSW52b2NhYmxlQWN0b3IiLCJpbnZva2VEZWZpbml0aW9uIiwibWFjaGluZSIsImNvbnRleHQiLCJfZXZlbnQiLCJpbnZva2VTcmMiLCJzcmMiLCJzZXJ2aWNlQ3JlYXRvciIsIm9wdGlvbnMiLCJzZXJ2aWNlcyIsInR5cGUiLCJyZXNvbHZlZERhdGEiLCJkYXRhIiwidGVtcEFjdG9yIiwiY3JlYXRlRGVmZXJyZWRBY3RvciIsIm1ldGEiLCJlbnRpdHkiLCJkZWZlcnJlZCIsImluaXRpYWxTdGF0ZV8xIiwic3RhdGUiLCJ3aXRoQ29udGV4dCIsImluaXRpYWxTdGF0ZSIsImlzQWN0b3IiLCJpdGVtIiwiZSIsImlzU3Bhd25lZEFjdG9yIiwidG9BY3RvclJlZiIsImFjdG9yUmVmTGlrZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xstate/es/Actor.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xstate/es/Machine.js":
/*!*******************************************!*\
  !*** ./node_modules/xstate/es/Machine.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Machine: () => (/* binding */ Machine),\n/* harmony export */   createMachine: () => (/* binding */ createMachine)\n/* harmony export */ });\n/* harmony import */ var _StateNode_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./StateNode.js */ \"(ssr)/./node_modules/xstate/es/StateNode.js\");\n/* harmony import */ var _environment_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./environment.js */ \"(ssr)/./node_modules/xstate/es/environment.js\");\n\n\nvar warned = false;\nfunction Machine(config, options, initialContext) {\n    if (initialContext === void 0) {\n        initialContext = config.context;\n    }\n    return new _StateNode_js__WEBPACK_IMPORTED_MODULE_0__.StateNode(config, options, initialContext);\n}\nfunction createMachine(config, options) {\n    if (!_environment_js__WEBPACK_IMPORTED_MODULE_1__.IS_PRODUCTION && !(\"predictableActionArguments\" in config) && !warned) {\n        warned = true;\n        console.warn(\"It is highly recommended to set `predictableActionArguments` to `true` when using `createMachine`. https://xstate.js.org/docs/guides/actions.html\");\n    }\n    return new _StateNode_js__WEBPACK_IMPORTED_MODULE_0__.StateNode(config, options);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMveHN0YXRlL2VzL01hY2hpbmUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUEyQztBQUNNO0FBRWpELElBQUlFLFNBQVM7QUFDYixTQUFTQyxRQUFRQyxNQUFNLEVBQUVDLE9BQU8sRUFBRUMsY0FBYztJQUM5QyxJQUFJQSxtQkFBbUIsS0FBSyxHQUFHO1FBQzdCQSxpQkFBaUJGLE9BQU9HLE9BQU87SUFDakM7SUFFQSxPQUFPLElBQUlQLG9EQUFTQSxDQUFDSSxRQUFRQyxTQUFTQztBQUN4QztBQUNBLFNBQVNFLGNBQWNKLE1BQU0sRUFBRUMsT0FBTztJQUNwQyxJQUFJLENBQUNKLDBEQUFhQSxJQUFJLENBQUUsaUNBQWdDRyxNQUFLLEtBQU0sQ0FBQ0YsUUFBUTtRQUMxRUEsU0FBUztRQUNUTyxRQUFRQyxJQUFJLENBQUM7SUFDZjtJQUVBLE9BQU8sSUFBSVYsb0RBQVNBLENBQUNJLFFBQVFDO0FBQy9CO0FBRWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGhlLWdyaWQtMi8uL25vZGVfbW9kdWxlcy94c3RhdGUvZXMvTWFjaGluZS5qcz83YjhhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFN0YXRlTm9kZSB9IGZyb20gJy4vU3RhdGVOb2RlLmpzJztcbmltcG9ydCB7IElTX1BST0RVQ1RJT04gfSBmcm9tICcuL2Vudmlyb25tZW50LmpzJztcblxudmFyIHdhcm5lZCA9IGZhbHNlO1xuZnVuY3Rpb24gTWFjaGluZShjb25maWcsIG9wdGlvbnMsIGluaXRpYWxDb250ZXh0KSB7XG4gIGlmIChpbml0aWFsQ29udGV4dCA9PT0gdm9pZCAwKSB7XG4gICAgaW5pdGlhbENvbnRleHQgPSBjb25maWcuY29udGV4dDtcbiAgfVxuXG4gIHJldHVybiBuZXcgU3RhdGVOb2RlKGNvbmZpZywgb3B0aW9ucywgaW5pdGlhbENvbnRleHQpO1xufVxuZnVuY3Rpb24gY3JlYXRlTWFjaGluZShjb25maWcsIG9wdGlvbnMpIHtcbiAgaWYgKCFJU19QUk9EVUNUSU9OICYmICEoJ3ByZWRpY3RhYmxlQWN0aW9uQXJndW1lbnRzJyBpbiBjb25maWcpICYmICF3YXJuZWQpIHtcbiAgICB3YXJuZWQgPSB0cnVlO1xuICAgIGNvbnNvbGUud2FybignSXQgaXMgaGlnaGx5IHJlY29tbWVuZGVkIHRvIHNldCBgcHJlZGljdGFibGVBY3Rpb25Bcmd1bWVudHNgIHRvIGB0cnVlYCB3aGVuIHVzaW5nIGBjcmVhdGVNYWNoaW5lYC4gaHR0cHM6Ly94c3RhdGUuanMub3JnL2RvY3MvZ3VpZGVzL2FjdGlvbnMuaHRtbCcpO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBTdGF0ZU5vZGUoY29uZmlnLCBvcHRpb25zKTtcbn1cblxuZXhwb3J0IHsgTWFjaGluZSwgY3JlYXRlTWFjaGluZSB9O1xuIl0sIm5hbWVzIjpbIlN0YXRlTm9kZSIsIklTX1BST0RVQ1RJT04iLCJ3YXJuZWQiLCJNYWNoaW5lIiwiY29uZmlnIiwib3B0aW9ucyIsImluaXRpYWxDb250ZXh0IiwiY29udGV4dCIsImNyZWF0ZU1hY2hpbmUiLCJjb25zb2xlIiwid2FybiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xstate/es/Machine.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xstate/es/State.js":
/*!*****************************************!*\
  !*** ./node_modules/xstate/es/State.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   State: () => (/* binding */ State),\n/* harmony export */   bindActionToState: () => (/* binding */ bindActionToState),\n/* harmony export */   isState: () => (/* binding */ isState),\n/* harmony export */   isStateConfig: () => (/* binding */ isStateConfig),\n/* harmony export */   stateValuesEqual: () => (/* binding */ stateValuesEqual)\n/* harmony export */ });\n/* harmony import */ var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_virtual/_tslib.js */ \"(ssr)/./node_modules/xstate/es/_virtual/_tslib.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constants.js */ \"(ssr)/./node_modules/xstate/es/constants.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/xstate/es/utils.js\");\n/* harmony import */ var _stateUtils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./stateUtils.js */ \"(ssr)/./node_modules/xstate/es/stateUtils.js\");\n/* harmony import */ var _actions_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./actions.js */ \"(ssr)/./node_modules/xstate/es/actions.js\");\n/* harmony import */ var _environment_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./environment.js */ \"(ssr)/./node_modules/xstate/es/environment.js\");\n\n\n\n\n\n\nfunction stateValuesEqual(a, b) {\n    if (a === b) {\n        return true;\n    }\n    if (a === undefined || b === undefined) {\n        return false;\n    }\n    if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(a) || (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(b)) {\n        return a === b;\n    }\n    var aKeys = Object.keys(a);\n    var bKeys = Object.keys(b);\n    return aKeys.length === bKeys.length && aKeys.every(function(key) {\n        return stateValuesEqual(a[key], b[key]);\n    });\n}\nfunction isStateConfig(state) {\n    if (typeof state !== \"object\" || state === null) {\n        return false;\n    }\n    return \"value\" in state && \"_event\" in state;\n}\n/**\r\n * @deprecated Use `isStateConfig(object)` or `state instanceof State` instead.\r\n */ var isState = isStateConfig;\nfunction bindActionToState(action, state) {\n    var exec = action.exec;\n    var boundAction = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, action), {\n        exec: exec !== undefined ? function() {\n            return exec(state.context, state.event, {\n                action: action,\n                state: state,\n                _event: state._event\n            });\n        } : undefined\n    });\n    return boundAction;\n}\nvar State = /*#__PURE__*/ /** @class */ function() {\n    /**\r\n   * Creates a new State instance.\r\n   * @param value The state value\r\n   * @param context The extended state\r\n   * @param historyValue The tree representing historical values of the state nodes\r\n   * @param history The previous state\r\n   * @param actions An array of action objects to execute as side-effects\r\n   * @param activities A mapping of activities and whether they are started (`true`) or stopped (`false`).\r\n   * @param meta\r\n   * @param events Internal event queue. Should be empty with run-to-completion semantics.\r\n   * @param configuration\r\n   */ function State(config) {\n        var _this = this;\n        var _a;\n        this.actions = [];\n        this.activities = _constants_js__WEBPACK_IMPORTED_MODULE_2__.EMPTY_ACTIVITY_MAP;\n        this.meta = {};\n        this.events = [];\n        this.value = config.value;\n        this.context = config.context;\n        this._event = config._event;\n        this._sessionid = config._sessionid;\n        this.event = this._event.data;\n        this.historyValue = config.historyValue;\n        this.history = config.history;\n        this.actions = config.actions || [];\n        this.activities = config.activities || _constants_js__WEBPACK_IMPORTED_MODULE_2__.EMPTY_ACTIVITY_MAP;\n        this.meta = (0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_3__.getMeta)(config.configuration);\n        this.events = config.events || [];\n        this.matches = this.matches.bind(this);\n        this.toStrings = this.toStrings.bind(this);\n        this.configuration = config.configuration;\n        this.transitions = config.transitions;\n        this.children = config.children;\n        this.done = !!config.done;\n        this.tags = (_a = Array.isArray(config.tags) ? new Set(config.tags) : config.tags) !== null && _a !== void 0 ? _a : new Set();\n        this.machine = config.machine;\n        Object.defineProperty(this, \"nextEvents\", {\n            get: function() {\n                return (0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_3__.nextEvents)(_this.configuration);\n            }\n        });\n    }\n    /**\r\n   * Creates a new State instance for the given `stateValue` and `context`.\r\n   * @param stateValue\r\n   * @param context\r\n   */ State.from = function(stateValue, context) {\n        if (stateValue instanceof State) {\n            if (stateValue.context !== context) {\n                return new State({\n                    value: stateValue.value,\n                    context: context,\n                    _event: stateValue._event,\n                    _sessionid: null,\n                    historyValue: stateValue.historyValue,\n                    history: stateValue.history,\n                    actions: [],\n                    activities: stateValue.activities,\n                    meta: {},\n                    events: [],\n                    configuration: [],\n                    transitions: [],\n                    children: {}\n                });\n            }\n            return stateValue;\n        }\n        var _event = _actions_js__WEBPACK_IMPORTED_MODULE_4__.initEvent;\n        return new State({\n            value: stateValue,\n            context: context,\n            _event: _event,\n            _sessionid: null,\n            historyValue: undefined,\n            history: undefined,\n            actions: [],\n            activities: undefined,\n            meta: undefined,\n            events: [],\n            configuration: [],\n            transitions: [],\n            children: {}\n        });\n    };\n    /**\r\n   * Creates a new State instance for the given `config`.\r\n   * @param config The state config\r\n   */ State.create = function(config) {\n        return new State(config);\n    };\n    /**\r\n   * Creates a new `State` instance for the given `stateValue` and `context` with no actions (side-effects).\r\n   * @param stateValue\r\n   * @param context\r\n   */ State.inert = function(stateValue, context) {\n        if (stateValue instanceof State) {\n            if (!stateValue.actions.length) {\n                return stateValue;\n            }\n            var _event = _actions_js__WEBPACK_IMPORTED_MODULE_4__.initEvent;\n            return new State({\n                value: stateValue.value,\n                context: context,\n                _event: _event,\n                _sessionid: null,\n                historyValue: stateValue.historyValue,\n                history: stateValue.history,\n                activities: stateValue.activities,\n                configuration: stateValue.configuration,\n                transitions: [],\n                children: {}\n            });\n        }\n        return State.from(stateValue, context);\n    };\n    /**\r\n   * Returns an array of all the string leaf state node paths.\r\n   * @param stateValue\r\n   * @param delimiter The character(s) that separate each subpath in the string state node path.\r\n   */ State.prototype.toStrings = function(stateValue, delimiter) {\n        var _this = this;\n        if (stateValue === void 0) {\n            stateValue = this.value;\n        }\n        if (delimiter === void 0) {\n            delimiter = \".\";\n        }\n        if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(stateValue)) {\n            return [\n                stateValue\n            ];\n        }\n        var valueKeys = Object.keys(stateValue);\n        return valueKeys.concat.apply(valueKeys, (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)([], (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__read)(valueKeys.map(function(key) {\n            return _this.toStrings(stateValue[key], delimiter).map(function(s) {\n                return key + delimiter + s;\n            });\n        })), false));\n    };\n    State.prototype.toJSON = function() {\n        var _a = this;\n        _a.configuration;\n        _a.transitions;\n        var tags = _a.tags;\n        _a.machine;\n        var jsonValues = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__rest)(_a, [\n            \"configuration\",\n            \"transitions\",\n            \"tags\",\n            \"machine\"\n        ]);\n        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, jsonValues), {\n            tags: Array.from(tags)\n        });\n    };\n    State.prototype.matches = function(parentStateValue) {\n        return (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.matchesState)(parentStateValue, this.value);\n    };\n    /**\r\n   * Whether the current state configuration has a state node with the specified `tag`.\r\n   * @param tag\r\n   */ State.prototype.hasTag = function(tag) {\n        return this.tags.has(tag);\n    };\n    /**\r\n   * Determines whether sending the `event` will cause a non-forbidden transition\r\n   * to be selected, even if the transitions have no actions nor\r\n   * change the state value.\r\n   *\r\n   * @param event The event to test\r\n   * @returns Whether the event will cause a transition\r\n   */ State.prototype.can = function(event) {\n        var _a;\n        if (_environment_js__WEBPACK_IMPORTED_MODULE_5__.IS_PRODUCTION) {\n            (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.warn)(!!this.machine, \"state.can(...) used outside of a machine-created State object; this will always return false.\");\n        }\n        var transitionData = (_a = this.machine) === null || _a === void 0 ? void 0 : _a.getTransitionData(this, event);\n        return !!(transitionData === null || transitionData === void 0 ? void 0 : transitionData.transitions.length) && // Check that at least one transition is not forbidden\n        transitionData.transitions.some(function(t) {\n            return t.target !== undefined || t.actions.length;\n        });\n    };\n    return State;\n}();\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xstate/es/State.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xstate/es/StateNode.js":
/*!*********************************************!*\
  !*** ./node_modules/xstate/es/StateNode.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StateNode: () => (/* binding */ StateNode)\n/* harmony export */ });\n/* harmony import */ var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_virtual/_tslib.js */ \"(ssr)/./node_modules/xstate/es/_virtual/_tslib.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/xstate/es/utils.js\");\n/* harmony import */ var _State_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./State.js */ \"(ssr)/./node_modules/xstate/es/State.js\");\n/* harmony import */ var _actionTypes_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./actionTypes.js */ \"(ssr)/./node_modules/xstate/es/actionTypes.js\");\n/* harmony import */ var _actions_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./actions.js */ \"(ssr)/./node_modules/xstate/es/actions.js\");\n/* harmony import */ var _environment_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./environment.js */ \"(ssr)/./node_modules/xstate/es/environment.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants.js */ \"(ssr)/./node_modules/xstate/es/constants.js\");\n/* harmony import */ var _stateUtils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./stateUtils.js */ \"(ssr)/./node_modules/xstate/es/stateUtils.js\");\n/* harmony import */ var _Actor_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./Actor.js */ \"(ssr)/./node_modules/xstate/es/Actor.js\");\n/* harmony import */ var _invokeUtils_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./invokeUtils.js */ \"(ssr)/./node_modules/xstate/es/invokeUtils.js\");\n\n\n\n\n\n\n\n\n\n\nvar NULL_EVENT = \"\";\nvar STATE_IDENTIFIER = \"#\";\nvar WILDCARD = \"*\";\nvar EMPTY_OBJECT = {};\nvar isStateId = function(str) {\n    return str[0] === STATE_IDENTIFIER;\n};\nvar createDefaultOptions = function() {\n    return {\n        actions: {},\n        guards: {},\n        services: {},\n        activities: {},\n        delays: {}\n    };\n};\nvar validateArrayifiedTransitions = function(stateNode, event, transitions) {\n    var hasNonLastUnguardedTarget = transitions.slice(0, -1).some(function(transition) {\n        return !(\"cond\" in transition) && !(\"in\" in transition) && ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(transition.target) || (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isMachine)(transition.target));\n    });\n    var eventText = event === NULL_EVENT ? \"the transient event\" : \"event '\".concat(event, \"'\");\n    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.warn)(!hasNonLastUnguardedTarget, \"One or more transitions for \".concat(eventText, \" on state '\").concat(stateNode.id, \"' are unreachable. \") + \"Make sure that the default transition is the last one defined.\");\n};\nvar StateNode = /*#__PURE__*/ /** @class */ function() {\n    function StateNode(/**\r\n   * The raw config used to create the machine.\r\n   */ config, options, /**\r\n   * The initial extended state\r\n   */ _context, _stateInfo) {\n        if (_context === void 0) {\n            _context = \"context\" in config ? config.context : undefined;\n        }\n        var _this = this;\n        var _a;\n        this.config = config;\n        this._context = _context;\n        /**\r\n     * The order this state node appears. Corresponds to the implicit SCXML document order.\r\n     */ this.order = -1;\n        this.__xstatenode = true;\n        this.__cache = {\n            events: undefined,\n            relativeValue: new Map(),\n            initialStateValue: undefined,\n            initialState: undefined,\n            on: undefined,\n            transitions: undefined,\n            candidates: {},\n            delayedTransitions: undefined\n        };\n        this.idMap = {};\n        this.tags = [];\n        this.options = Object.assign(createDefaultOptions(), options);\n        this.parent = _stateInfo === null || _stateInfo === void 0 ? void 0 : _stateInfo.parent;\n        this.key = this.config.key || (_stateInfo === null || _stateInfo === void 0 ? void 0 : _stateInfo.key) || this.config.id || \"(machine)\";\n        this.machine = this.parent ? this.parent.machine : this;\n        this.path = this.parent ? this.parent.path.concat(this.key) : [];\n        this.delimiter = this.config.delimiter || (this.parent ? this.parent.delimiter : _constants_js__WEBPACK_IMPORTED_MODULE_1__.STATE_DELIMITER);\n        this.id = this.config.id || (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([\n            this.machine.key\n        ], (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(this.path), false).join(this.delimiter);\n        this.version = this.parent ? this.parent.version : this.config.version;\n        this.type = this.config.type || (this.config.parallel ? \"parallel\" : this.config.states && Object.keys(this.config.states).length ? \"compound\" : this.config.history ? \"history\" : \"atomic\");\n        this.schema = this.parent ? this.machine.schema : (_a = this.config.schema) !== null && _a !== void 0 ? _a : {};\n        this.description = this.config.description;\n        if (!_environment_js__WEBPACK_IMPORTED_MODULE_3__.IS_PRODUCTION) {\n            (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.warn)(!(\"parallel\" in this.config), 'The \"parallel\" property is deprecated and will be removed in version 4.1. '.concat(this.config.parallel ? \"Replace with `type: 'parallel'`\" : \"Use `type: '\".concat(this.type, \"'`\"), \" in the config for state node '\").concat(this.id, \"' instead.\"));\n        }\n        this.initial = this.config.initial;\n        this.states = this.config.states ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.mapValues)(this.config.states, function(stateConfig, key) {\n            var _a;\n            var stateNode = new StateNode(stateConfig, {}, undefined, {\n                parent: _this,\n                key: key\n            });\n            Object.assign(_this.idMap, (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((_a = {}, _a[stateNode.id] = stateNode, _a), stateNode.idMap));\n            return stateNode;\n        }) : EMPTY_OBJECT; // Document order\n        var order = 0;\n        function dfs(stateNode) {\n            var e_1, _a;\n            stateNode.order = order++;\n            try {\n                for(var _b = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__values)((0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.getAllChildren)(stateNode)), _c = _b.next(); !_c.done; _c = _b.next()){\n                    var child = _c.value;\n                    dfs(child);\n                }\n            } catch (e_1_1) {\n                e_1 = {\n                    error: e_1_1\n                };\n            } finally{\n                try {\n                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n                } finally{\n                    if (e_1) throw e_1.error;\n                }\n            }\n        }\n        dfs(this); // History config\n        this.history = this.config.history === true ? \"shallow\" : this.config.history || false;\n        this._transient = !!this.config.always || (!this.config.on ? false : Array.isArray(this.config.on) ? this.config.on.some(function(_a) {\n            var event = _a.event;\n            return event === NULL_EVENT;\n        }) : NULL_EVENT in this.config.on);\n        this.strict = !!this.config.strict; // TODO: deprecate (entry)\n        this.onEntry = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toArray)(this.config.entry || this.config.onEntry).map(function(action) {\n            return (0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.toActionObject)(action);\n        }); // TODO: deprecate (exit)\n        this.onExit = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toArray)(this.config.exit || this.config.onExit).map(function(action) {\n            return (0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.toActionObject)(action);\n        });\n        this.meta = this.config.meta;\n        this.doneData = this.type === \"final\" ? this.config.data : undefined;\n        this.invoke = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toArray)(this.config.invoke).map(function(invokeConfig, i) {\n            var _a, _b;\n            if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isMachine)(invokeConfig)) {\n                var invokeId = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.createInvokeId)(_this.id, i);\n                _this.machine.options.services = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((_a = {}, _a[invokeId] = invokeConfig, _a), _this.machine.options.services);\n                return (0,_invokeUtils_js__WEBPACK_IMPORTED_MODULE_6__.toInvokeDefinition)({\n                    src: invokeId,\n                    id: invokeId\n                });\n            } else if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(invokeConfig.src)) {\n                var invokeId = invokeConfig.id || (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.createInvokeId)(_this.id, i);\n                return (0,_invokeUtils_js__WEBPACK_IMPORTED_MODULE_6__.toInvokeDefinition)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, invokeConfig), {\n                    id: invokeId,\n                    src: invokeConfig.src\n                }));\n            } else if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isMachine)(invokeConfig.src) || (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isFunction)(invokeConfig.src)) {\n                var invokeId = invokeConfig.id || (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.createInvokeId)(_this.id, i);\n                _this.machine.options.services = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((_b = {}, _b[invokeId] = invokeConfig.src, _b), _this.machine.options.services);\n                return (0,_invokeUtils_js__WEBPACK_IMPORTED_MODULE_6__.toInvokeDefinition)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({\n                    id: invokeId\n                }, invokeConfig), {\n                    src: invokeId\n                }));\n            } else {\n                var invokeSource = invokeConfig.src;\n                return (0,_invokeUtils_js__WEBPACK_IMPORTED_MODULE_6__.toInvokeDefinition)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({\n                    id: (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.createInvokeId)(_this.id, i)\n                }, invokeConfig), {\n                    src: invokeSource\n                }));\n            }\n        });\n        this.activities = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toArray)(this.config.activities).concat(this.invoke).map(function(activity) {\n            return (0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.toActivityDefinition)(activity);\n        });\n        this.transition = this.transition.bind(this);\n        this.tags = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toArray)(this.config.tags); // TODO: this is the real fix for initialization once\n    // state node getters are deprecated\n    // if (!this.parent) {\n    //   this._init();\n    // }\n    }\n    StateNode.prototype._init = function() {\n        if (this.__cache.transitions) {\n            return;\n        }\n        (0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.getAllStateNodes)(this).forEach(function(stateNode) {\n            return stateNode.on;\n        });\n    };\n    /**\r\n   * Clones this state machine with custom options and context.\r\n   *\r\n   * @param options Options (actions, guards, activities, services) to recursively merge with the existing options.\r\n   * @param context Custom context (will override predefined context)\r\n   */ StateNode.prototype.withConfig = function(options, context) {\n        var _a = this.options, actions = _a.actions, activities = _a.activities, guards = _a.guards, services = _a.services, delays = _a.delays;\n        return new StateNode(this.config, {\n            actions: (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, actions), options.actions),\n            activities: (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, activities), options.activities),\n            guards: (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, guards), options.guards),\n            services: (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, services), options.services),\n            delays: (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, delays), options.delays)\n        }, context !== null && context !== void 0 ? context : this.context);\n    };\n    /**\r\n   * Clones this state machine with custom context.\r\n   *\r\n   * @param context Custom context (will override predefined context, not recursive)\r\n   */ StateNode.prototype.withContext = function(context) {\n        return new StateNode(this.config, this.options, context);\n    };\n    Object.defineProperty(StateNode.prototype, \"context\", {\n        get: function() {\n            return (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isFunction)(this._context) ? this._context() : this._context;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(StateNode.prototype, \"definition\", {\n        /**\r\n     * The well-structured state node definition.\r\n     */ get: function() {\n            return {\n                id: this.id,\n                key: this.key,\n                version: this.version,\n                context: this.context,\n                type: this.type,\n                initial: this.initial,\n                history: this.history,\n                states: (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.mapValues)(this.states, function(state) {\n                    return state.definition;\n                }),\n                on: this.on,\n                transitions: this.transitions,\n                entry: this.onEntry,\n                exit: this.onExit,\n                activities: this.activities || [],\n                meta: this.meta,\n                order: this.order || -1,\n                data: this.doneData,\n                invoke: this.invoke,\n                description: this.description,\n                tags: this.tags\n            };\n        },\n        enumerable: false,\n        configurable: true\n    });\n    StateNode.prototype.toJSON = function() {\n        return this.definition;\n    };\n    Object.defineProperty(StateNode.prototype, \"on\", {\n        /**\r\n     * The mapping of events to transitions.\r\n     */ get: function() {\n            if (this.__cache.on) {\n                return this.__cache.on;\n            }\n            var transitions = this.transitions;\n            return this.__cache.on = transitions.reduce(function(map, transition) {\n                map[transition.eventType] = map[transition.eventType] || [];\n                map[transition.eventType].push(transition);\n                return map;\n            }, {});\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(StateNode.prototype, \"after\", {\n        get: function() {\n            return this.__cache.delayedTransitions || (this.__cache.delayedTransitions = this.getDelayedTransitions(), this.__cache.delayedTransitions);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(StateNode.prototype, \"transitions\", {\n        /**\r\n     * All the transitions that can be taken from this state node.\r\n     */ get: function() {\n            return this.__cache.transitions || (this.__cache.transitions = this.formatTransitions(), this.__cache.transitions);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    StateNode.prototype.getCandidates = function(eventName) {\n        if (this.__cache.candidates[eventName]) {\n            return this.__cache.candidates[eventName];\n        }\n        var transient = eventName === NULL_EVENT;\n        var candidates = this.transitions.filter(function(transition) {\n            var sameEventType = transition.eventType === eventName; // null events should only match against eventless transitions\n            return transient ? sameEventType : sameEventType || transition.eventType === WILDCARD;\n        });\n        this.__cache.candidates[eventName] = candidates;\n        return candidates;\n    };\n    /**\r\n   * All delayed transitions from the config.\r\n   */ StateNode.prototype.getDelayedTransitions = function() {\n        var _this = this;\n        var afterConfig = this.config.after;\n        if (!afterConfig) {\n            return [];\n        }\n        var mutateEntryExit = function(delay, i) {\n            var delayRef = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isFunction)(delay) ? \"\".concat(_this.id, \":delay[\").concat(i, \"]\") : delay;\n            var eventType = (0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.after)(delayRef, _this.id);\n            _this.onEntry.push((0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.send)(eventType, {\n                delay: delay\n            }));\n            _this.onExit.push((0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.cancel)(eventType));\n            return eventType;\n        };\n        var delayedTransitions = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isArray)(afterConfig) ? afterConfig.map(function(transition, i) {\n            var eventType = mutateEntryExit(transition.delay, i);\n            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, transition), {\n                event: eventType\n            });\n        }) : (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)(Object.keys(afterConfig).map(function(delay, i) {\n            var configTransition = afterConfig[delay];\n            var resolvedTransition = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(configTransition) ? {\n                target: configTransition\n            } : configTransition;\n            var resolvedDelay = !isNaN(+delay) ? +delay : delay;\n            var eventType = mutateEntryExit(resolvedDelay, i);\n            return (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toArray)(resolvedTransition).map(function(transition) {\n                return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, transition), {\n                    event: eventType,\n                    delay: resolvedDelay\n                });\n            });\n        }));\n        return delayedTransitions.map(function(delayedTransition) {\n            var delay = delayedTransition.delay;\n            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, _this.formatTransition(delayedTransition)), {\n                delay: delay\n            });\n        });\n    };\n    /**\r\n   * Returns the state nodes represented by the current state value.\r\n   *\r\n   * @param state The state value or State instance\r\n   */ StateNode.prototype.getStateNodes = function(state) {\n        var _a;\n        var _this = this;\n        if (!state) {\n            return [];\n        }\n        var stateValue = state instanceof _State_js__WEBPACK_IMPORTED_MODULE_7__.State ? state.value : (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toStateValue)(state, this.delimiter);\n        if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(stateValue)) {\n            var initialStateValue = this.getStateNode(stateValue).initial;\n            return initialStateValue !== undefined ? this.getStateNodes((_a = {}, _a[stateValue] = initialStateValue, _a)) : [\n                this,\n                this.states[stateValue]\n            ];\n        }\n        var subStateKeys = Object.keys(stateValue);\n        var subStateNodes = [\n            this\n        ];\n        subStateNodes.push.apply(subStateNodes, (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([], (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)(subStateKeys.map(function(subStateKey) {\n            return _this.getStateNode(subStateKey).getStateNodes(stateValue[subStateKey]);\n        }))), false));\n        return subStateNodes;\n    };\n    /**\r\n   * Returns `true` if this state node explicitly handles the given event.\r\n   *\r\n   * @param event The event in question\r\n   */ StateNode.prototype.handles = function(event) {\n        var eventType = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.getEventType)(event);\n        return this.events.includes(eventType);\n    };\n    /**\r\n   * Resolves the given `state` to a new `State` instance relative to this machine.\r\n   *\r\n   * This ensures that `.events` and `.nextEvents` represent the correct values.\r\n   *\r\n   * @param state The state to resolve\r\n   */ StateNode.prototype.resolveState = function(state) {\n        var stateFromConfig = state instanceof _State_js__WEBPACK_IMPORTED_MODULE_7__.State ? state : _State_js__WEBPACK_IMPORTED_MODULE_7__.State.create(state);\n        var configuration = Array.from((0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.getConfiguration)([], this.getStateNodes(stateFromConfig.value)));\n        return new _State_js__WEBPACK_IMPORTED_MODULE_7__.State((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, stateFromConfig), {\n            value: this.resolve(stateFromConfig.value),\n            configuration: configuration,\n            done: (0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.isInFinalState)(configuration, this),\n            tags: (0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.getTagsFromConfiguration)(configuration),\n            machine: this.machine\n        }));\n    };\n    StateNode.prototype.transitionLeafNode = function(stateValue, state, _event) {\n        var stateNode = this.getStateNode(stateValue);\n        var next = stateNode.next(state, _event);\n        if (!next || !next.transitions.length) {\n            return this.next(state, _event);\n        }\n        return next;\n    };\n    StateNode.prototype.transitionCompoundNode = function(stateValue, state, _event) {\n        var subStateKeys = Object.keys(stateValue);\n        var stateNode = this.getStateNode(subStateKeys[0]);\n        var next = stateNode._transition(stateValue[subStateKeys[0]], state, _event);\n        if (!next || !next.transitions.length) {\n            return this.next(state, _event);\n        }\n        return next;\n    };\n    StateNode.prototype.transitionParallelNode = function(stateValue, state, _event) {\n        var e_2, _a;\n        var transitionMap = {};\n        try {\n            for(var _b = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__values)(Object.keys(stateValue)), _c = _b.next(); !_c.done; _c = _b.next()){\n                var subStateKey = _c.value;\n                var subStateValue = stateValue[subStateKey];\n                if (!subStateValue) {\n                    continue;\n                }\n                var subStateNode = this.getStateNode(subStateKey);\n                var next = subStateNode._transition(subStateValue, state, _event);\n                if (next) {\n                    transitionMap[subStateKey] = next;\n                }\n            }\n        } catch (e_2_1) {\n            e_2 = {\n                error: e_2_1\n            };\n        } finally{\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            } finally{\n                if (e_2) throw e_2.error;\n            }\n        }\n        var stateTransitions = Object.keys(transitionMap).map(function(key) {\n            return transitionMap[key];\n        });\n        var enabledTransitions = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)(stateTransitions.map(function(st) {\n            return st.transitions;\n        }));\n        var willTransition = stateTransitions.some(function(st) {\n            return st.transitions.length > 0;\n        });\n        if (!willTransition) {\n            return this.next(state, _event);\n        }\n        var configuration = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)(Object.keys(transitionMap).map(function(key) {\n            return transitionMap[key].configuration;\n        }));\n        return {\n            transitions: enabledTransitions,\n            exitSet: (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)(stateTransitions.map(function(t) {\n                return t.exitSet;\n            })),\n            configuration: configuration,\n            source: state,\n            actions: (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)(Object.keys(transitionMap).map(function(key) {\n                return transitionMap[key].actions;\n            }))\n        };\n    };\n    StateNode.prototype._transition = function(stateValue, state, _event) {\n        // leaf node\n        if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(stateValue)) {\n            return this.transitionLeafNode(stateValue, state, _event);\n        } // hierarchical node\n        if (Object.keys(stateValue).length === 1) {\n            return this.transitionCompoundNode(stateValue, state, _event);\n        } // orthogonal node\n        return this.transitionParallelNode(stateValue, state, _event);\n    };\n    StateNode.prototype.getTransitionData = function(state, event) {\n        return this._transition(state.value, state, (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toSCXMLEvent)(event));\n    };\n    StateNode.prototype.next = function(state, _event) {\n        var e_3, _a;\n        var _this = this;\n        var eventName = _event.name;\n        var actions = [];\n        var nextStateNodes = [];\n        var selectedTransition;\n        try {\n            for(var _b = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__values)(this.getCandidates(eventName)), _c = _b.next(); !_c.done; _c = _b.next()){\n                var candidate = _c.value;\n                var cond = candidate.cond, stateIn = candidate.in;\n                var resolvedContext = state.context;\n                var isInState = stateIn ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(stateIn) && isStateId(stateIn) ? state.matches((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toStateValue)(this.getStateNodeById(stateIn).path, this.delimiter)) : (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.matchesState)((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toStateValue)(stateIn, this.delimiter), (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.path)(this.path.slice(0, -2))(state.value)) : true;\n                var guardPassed = false;\n                try {\n                    guardPassed = !cond || (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.evaluateGuard)(this.machine, cond, resolvedContext, _event, state);\n                } catch (err) {\n                    throw new Error(\"Unable to evaluate guard '\".concat(cond.name || cond.type, \"' in transition for event '\").concat(eventName, \"' in state node '\").concat(this.id, \"':\\n\").concat(err.message));\n                }\n                if (guardPassed && isInState) {\n                    if (candidate.target !== undefined) {\n                        nextStateNodes = candidate.target;\n                    }\n                    actions.push.apply(actions, (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([], (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(candidate.actions), false));\n                    selectedTransition = candidate;\n                    break;\n                }\n            }\n        } catch (e_3_1) {\n            e_3 = {\n                error: e_3_1\n            };\n        } finally{\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            } finally{\n                if (e_3) throw e_3.error;\n            }\n        }\n        if (!selectedTransition) {\n            return undefined;\n        }\n        if (!nextStateNodes.length) {\n            return {\n                transitions: [\n                    selectedTransition\n                ],\n                exitSet: [],\n                configuration: state.value ? [\n                    this\n                ] : [],\n                source: state,\n                actions: actions\n            };\n        }\n        var allNextStateNodes = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)(nextStateNodes.map(function(stateNode) {\n            return _this.getRelativeStateNodes(stateNode, state.historyValue);\n        }));\n        var isInternal = !!selectedTransition.internal;\n        return {\n            transitions: [\n                selectedTransition\n            ],\n            exitSet: isInternal ? [] : (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)(nextStateNodes.map(function(targetNode) {\n                return _this.getPotentiallyReenteringNodes(targetNode);\n            })),\n            configuration: allNextStateNodes,\n            source: state,\n            actions: actions\n        };\n    }; // even though the name of this function mentions reentry nodes\n    // we are pushing its result into `exitSet`\n    // that's because what we exit might be reentered (it's an invariant of reentrancy)\n    StateNode.prototype.getPotentiallyReenteringNodes = function(targetNode) {\n        if (this.order < targetNode.order) {\n            return [\n                this\n            ];\n        }\n        var nodes = [];\n        var marker = this;\n        var possibleAncestor = targetNode;\n        while(marker && marker !== possibleAncestor){\n            nodes.push(marker);\n            marker = marker.parent;\n        }\n        if (marker !== possibleAncestor) {\n            // we never got to `possibleAncestor`, therefore the initial `marker` \"escapes\" it\n            // it's in a different part of the tree so no states will be reentered for such an external transition\n            return [];\n        }\n        nodes.push(possibleAncestor);\n        return nodes;\n    };\n    StateNode.prototype.getActions = function(resolvedConfig, isDone, transition, currentContext, _event, prevState, predictableExec) {\n        var e_4, _a, e_5, _b;\n        var _this = this;\n        var prevConfig = prevState ? (0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.getConfiguration)([], this.getStateNodes(prevState.value)) : [];\n        var entrySet = new Set();\n        try {\n            for(var _c = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__values)(Array.from(resolvedConfig).sort(function(a, b) {\n                return a.order - b.order;\n            })), _d = _c.next(); !_d.done; _d = _c.next()){\n                var sn = _d.value;\n                if (!(0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.has)(prevConfig, sn) || (0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.has)(transition.exitSet, sn) || sn.parent && entrySet.has(sn.parent)) {\n                    entrySet.add(sn);\n                }\n            }\n        } catch (e_4_1) {\n            e_4 = {\n                error: e_4_1\n            };\n        } finally{\n            try {\n                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n            } finally{\n                if (e_4) throw e_4.error;\n            }\n        }\n        try {\n            for(var prevConfig_1 = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__values)(prevConfig), prevConfig_1_1 = prevConfig_1.next(); !prevConfig_1_1.done; prevConfig_1_1 = prevConfig_1.next()){\n                var sn = prevConfig_1_1.value;\n                if (!(0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.has)(resolvedConfig, sn) || (0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.has)(transition.exitSet, sn.parent)) {\n                    transition.exitSet.push(sn);\n                }\n            }\n        } catch (e_5_1) {\n            e_5 = {\n                error: e_5_1\n            };\n        } finally{\n            try {\n                if (prevConfig_1_1 && !prevConfig_1_1.done && (_b = prevConfig_1.return)) _b.call(prevConfig_1);\n            } finally{\n                if (e_5) throw e_5.error;\n            }\n        }\n        transition.exitSet.sort(function(a, b) {\n            return b.order - a.order;\n        });\n        var entryStates = Array.from(entrySet).sort(function(a, b) {\n            return a.order - b.order;\n        });\n        var exitStates = new Set(transition.exitSet);\n        var doneEvents = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)(entryStates.map(function(sn) {\n            var events = [];\n            if (sn.type !== \"final\") {\n                return events;\n            }\n            var parent = sn.parent;\n            if (!parent.parent) {\n                return events;\n            }\n            events.push((0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.done)(sn.id, sn.doneData), (0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.done)(parent.id, sn.doneData ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.mapContext)(sn.doneData, currentContext, _event) : undefined));\n            var grandparent = parent.parent;\n            if (grandparent.type === \"parallel\") {\n                if ((0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.getChildren)(grandparent).every(function(parentNode) {\n                    return (0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.isInFinalState)(transition.configuration, parentNode);\n                })) {\n                    events.push((0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.done)(grandparent.id));\n                }\n            }\n            return events;\n        }));\n        var entryActions = entryStates.map(function(stateNode) {\n            var entryActions = stateNode.onEntry;\n            var invokeActions = stateNode.activities.map(function(activity) {\n                return (0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.start)(activity);\n            });\n            return {\n                type: \"entry\",\n                actions: (0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.toActionObjects)(predictableExec ? (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([], (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(entryActions), false), (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(invokeActions), false) : (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([], (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(invokeActions), false), (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(entryActions), false), _this.machine.options.actions)\n            };\n        }).concat({\n            type: \"state_done\",\n            actions: doneEvents.map(function(event) {\n                return (0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.raise)(event);\n            })\n        });\n        var exitActions = Array.from(exitStates).map(function(stateNode) {\n            return {\n                type: \"exit\",\n                actions: (0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.toActionObjects)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([], (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(stateNode.onExit), false), (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(stateNode.activities.map(function(activity) {\n                    return (0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.stop)(activity);\n                })), false), _this.machine.options.actions)\n            };\n        });\n        var actions = exitActions.concat({\n            type: \"transition\",\n            actions: (0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.toActionObjects)(transition.actions, this.machine.options.actions)\n        }).concat(entryActions);\n        if (isDone) {\n            var stopActions = (0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.toActionObjects)((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([], (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(resolvedConfig), false).sort(function(a, b) {\n                return b.order - a.order;\n            }).map(function(stateNode) {\n                return stateNode.onExit;\n            })), this.machine.options.actions).filter(function(action) {\n                return !(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isRaisableAction)(action);\n            });\n            return actions.concat({\n                type: \"stop\",\n                actions: stopActions\n            });\n        }\n        return actions;\n    };\n    /**\r\n   * Determines the next state given the current `state` and sent `event`.\r\n   *\r\n   * @param state The current State instance or state value\r\n   * @param event The event that was sent at the current state\r\n   * @param context The current context (extended state) of the current state\r\n   */ StateNode.prototype.transition = function(state, event, context, exec) {\n        if (state === void 0) {\n            state = this.initialState;\n        }\n        var _event = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toSCXMLEvent)(event);\n        var currentState;\n        if (state instanceof _State_js__WEBPACK_IMPORTED_MODULE_7__.State) {\n            currentState = context === undefined ? state : this.resolveState(_State_js__WEBPACK_IMPORTED_MODULE_7__.State.from(state, context));\n        } else {\n            var resolvedStateValue = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(state) ? this.resolve((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.pathToStateValue)(this.getResolvedPath(state))) : this.resolve(state);\n            var resolvedContext = context !== null && context !== void 0 ? context : this.machine.context;\n            currentState = this.resolveState(_State_js__WEBPACK_IMPORTED_MODULE_7__.State.from(resolvedStateValue, resolvedContext));\n        }\n        if (!_environment_js__WEBPACK_IMPORTED_MODULE_3__.IS_PRODUCTION && _event.name === WILDCARD) {\n            throw new Error(\"An event cannot have the wildcard type ('\".concat(WILDCARD, \"')\"));\n        }\n        if (this.strict) {\n            if (!this.events.includes(_event.name) && !(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isBuiltInEvent)(_event.name)) {\n                throw new Error(\"Machine '\".concat(this.id, \"' does not accept event '\").concat(_event.name, \"'\"));\n            }\n        }\n        var stateTransition = this._transition(currentState.value, currentState, _event) || {\n            transitions: [],\n            configuration: [],\n            exitSet: [],\n            source: currentState,\n            actions: []\n        };\n        var prevConfig = (0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.getConfiguration)([], this.getStateNodes(currentState.value));\n        var resolvedConfig = stateTransition.configuration.length ? (0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.getConfiguration)(prevConfig, stateTransition.configuration) : prevConfig;\n        stateTransition.configuration = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([], (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(resolvedConfig), false);\n        return this.resolveTransition(stateTransition, currentState, currentState.context, exec, _event);\n    };\n    StateNode.prototype.resolveRaisedTransition = function(state, _event, originalEvent, predictableExec) {\n        var _a;\n        var currentActions = state.actions;\n        state = this.transition(state, _event, undefined, predictableExec); // Save original event to state\n        // TODO: this should be the raised event! Delete in V5 (breaking)\n        state._event = originalEvent;\n        state.event = originalEvent.data;\n        (_a = state.actions).unshift.apply(_a, (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([], (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(currentActions), false));\n        return state;\n    };\n    StateNode.prototype.resolveTransition = function(stateTransition, currentState, context, predictableExec, _event) {\n        var e_6, _a, e_7, _b;\n        var _this = this;\n        if (_event === void 0) {\n            _event = _actions_js__WEBPACK_IMPORTED_MODULE_5__.initEvent;\n        }\n        var configuration = stateTransition.configuration; // Transition will \"apply\" if:\n        // - this is the initial state (there is no current state)\n        // - OR there are transitions\n        var willTransition = !currentState || stateTransition.transitions.length > 0;\n        var resolvedConfiguration = willTransition ? stateTransition.configuration : currentState ? currentState.configuration : [];\n        var isDone = (0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.isInFinalState)(resolvedConfiguration, this);\n        var resolvedStateValue = willTransition ? (0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.getValue)(this.machine, configuration) : undefined;\n        var historyValue = currentState ? currentState.historyValue ? currentState.historyValue : stateTransition.source ? this.machine.historyValue(currentState.value) : undefined : undefined;\n        var actionBlocks = this.getActions(new Set(resolvedConfiguration), isDone, stateTransition, context, _event, currentState, predictableExec);\n        var activities = currentState ? (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, currentState.activities) : {};\n        try {\n            for(var actionBlocks_1 = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__values)(actionBlocks), actionBlocks_1_1 = actionBlocks_1.next(); !actionBlocks_1_1.done; actionBlocks_1_1 = actionBlocks_1.next()){\n                var block = actionBlocks_1_1.value;\n                try {\n                    for(var _c = (e_7 = void 0, (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__values)(block.actions)), _d = _c.next(); !_d.done; _d = _c.next()){\n                        var action = _d.value;\n                        if (action.type === _actionTypes_js__WEBPACK_IMPORTED_MODULE_8__.start) {\n                            activities[action.activity.id || action.activity.type] = action;\n                        } else if (action.type === _actionTypes_js__WEBPACK_IMPORTED_MODULE_8__.stop) {\n                            activities[action.activity.id || action.activity.type] = false;\n                        }\n                    }\n                } catch (e_7_1) {\n                    e_7 = {\n                        error: e_7_1\n                    };\n                } finally{\n                    try {\n                        if (_d && !_d.done && (_b = _c.return)) _b.call(_c);\n                    } finally{\n                        if (e_7) throw e_7.error;\n                    }\n                }\n            }\n        } catch (e_6_1) {\n            e_6 = {\n                error: e_6_1\n            };\n        } finally{\n            try {\n                if (actionBlocks_1_1 && !actionBlocks_1_1.done && (_a = actionBlocks_1.return)) _a.call(actionBlocks_1);\n            } finally{\n                if (e_6) throw e_6.error;\n            }\n        }\n        var _e = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)((0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.resolveActions)(this, currentState, context, _event, actionBlocks, predictableExec, this.machine.config.predictableActionArguments || this.machine.config.preserveActionOrder), 2), resolvedActions = _e[0], updatedContext = _e[1];\n        var _f = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.partition)(resolvedActions, _utils_js__WEBPACK_IMPORTED_MODULE_0__.isRaisableAction), 2), raisedEvents = _f[0], nonRaisedActions = _f[1];\n        var invokeActions = resolvedActions.filter(function(action) {\n            var _a;\n            return action.type === _actionTypes_js__WEBPACK_IMPORTED_MODULE_8__.start && ((_a = action.activity) === null || _a === void 0 ? void 0 : _a.type) === _actionTypes_js__WEBPACK_IMPORTED_MODULE_8__.invoke;\n        });\n        var children = invokeActions.reduce(function(acc, action) {\n            acc[action.activity.id] = (0,_Actor_js__WEBPACK_IMPORTED_MODULE_9__.createInvocableActor)(action.activity, _this.machine, updatedContext, _event);\n            return acc;\n        }, currentState ? (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, currentState.children) : {});\n        var nextState = new _State_js__WEBPACK_IMPORTED_MODULE_7__.State({\n            value: resolvedStateValue || currentState.value,\n            context: updatedContext,\n            _event: _event,\n            // Persist _sessionid between states\n            _sessionid: currentState ? currentState._sessionid : null,\n            historyValue: resolvedStateValue ? historyValue ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.updateHistoryValue)(historyValue, resolvedStateValue) : undefined : currentState ? currentState.historyValue : undefined,\n            history: !resolvedStateValue || stateTransition.source ? currentState : undefined,\n            actions: resolvedStateValue ? nonRaisedActions : [],\n            activities: resolvedStateValue ? activities : currentState ? currentState.activities : {},\n            events: [],\n            configuration: resolvedConfiguration,\n            transitions: stateTransition.transitions,\n            children: children,\n            done: isDone,\n            tags: (0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.getTagsFromConfiguration)(resolvedConfiguration),\n            machine: this\n        });\n        var didUpdateContext = context !== updatedContext;\n        nextState.changed = _event.name === _actionTypes_js__WEBPACK_IMPORTED_MODULE_8__.update || didUpdateContext; // Dispose of penultimate histories to prevent memory leaks\n        var history = nextState.history;\n        if (history) {\n            delete history.history;\n        } // There are transient transitions if the machine is not in a final state\n        // and if some of the state nodes have transient (\"always\") transitions.\n        var hasAlwaysTransitions = !isDone && (this._transient || configuration.some(function(stateNode) {\n            return stateNode._transient;\n        })); // If there are no enabled transitions, check if there are transient transitions.\n        // If there are transient transitions, continue checking for more transitions\n        // because an transient transition should be triggered even if there are no\n        // enabled transitions.\n        //\n        // If we're already working on an transient transition then stop to prevent an infinite loop.\n        //\n        // Otherwise, if there are no enabled nor transient transitions, we are done.\n        if (!willTransition && (!hasAlwaysTransitions || _event.name === NULL_EVENT)) {\n            return nextState;\n        }\n        var maybeNextState = nextState;\n        if (!isDone) {\n            if (hasAlwaysTransitions) {\n                maybeNextState = this.resolveRaisedTransition(maybeNextState, {\n                    type: _actionTypes_js__WEBPACK_IMPORTED_MODULE_8__.nullEvent\n                }, _event, predictableExec);\n            }\n            while(raisedEvents.length){\n                var raisedEvent = raisedEvents.shift();\n                maybeNextState = this.resolveRaisedTransition(maybeNextState, raisedEvent._event, _event, predictableExec);\n            }\n        } // Detect if state changed\n        var changed = maybeNextState.changed || (history ? !!maybeNextState.actions.length || didUpdateContext || typeof history.value !== typeof maybeNextState.value || !(0,_State_js__WEBPACK_IMPORTED_MODULE_7__.stateValuesEqual)(maybeNextState.value, history.value) : undefined);\n        maybeNextState.changed = changed; // Preserve original history after raised events\n        maybeNextState.history = history;\n        return maybeNextState;\n    };\n    /**\r\n   * Returns the child state node from its relative `stateKey`, or throws.\r\n   */ StateNode.prototype.getStateNode = function(stateKey) {\n        if (isStateId(stateKey)) {\n            return this.machine.getStateNodeById(stateKey);\n        }\n        if (!this.states) {\n            throw new Error(\"Unable to retrieve child state '\".concat(stateKey, \"' from '\").concat(this.id, \"'; no child states exist.\"));\n        }\n        var result = this.states[stateKey];\n        if (!result) {\n            throw new Error(\"Child state '\".concat(stateKey, \"' does not exist on '\").concat(this.id, \"'\"));\n        }\n        return result;\n    };\n    /**\r\n   * Returns the state node with the given `stateId`, or throws.\r\n   *\r\n   * @param stateId The state ID. The prefix \"#\" is removed.\r\n   */ StateNode.prototype.getStateNodeById = function(stateId) {\n        var resolvedStateId = isStateId(stateId) ? stateId.slice(STATE_IDENTIFIER.length) : stateId;\n        if (resolvedStateId === this.id) {\n            return this;\n        }\n        var stateNode = this.machine.idMap[resolvedStateId];\n        if (!stateNode) {\n            throw new Error(\"Child state node '#\".concat(resolvedStateId, \"' does not exist on machine '\").concat(this.id, \"'\"));\n        }\n        return stateNode;\n    };\n    /**\r\n   * Returns the relative state node from the given `statePath`, or throws.\r\n   *\r\n   * @param statePath The string or string array relative path to the state node.\r\n   */ StateNode.prototype.getStateNodeByPath = function(statePath) {\n        if (typeof statePath === \"string\" && isStateId(statePath)) {\n            try {\n                return this.getStateNodeById(statePath.slice(1));\n            } catch (e) {\n            // throw e;\n            }\n        }\n        var arrayStatePath = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toStatePath)(statePath, this.delimiter).slice();\n        var currentStateNode = this;\n        while(arrayStatePath.length){\n            var key = arrayStatePath.shift();\n            if (!key.length) {\n                break;\n            }\n            currentStateNode = currentStateNode.getStateNode(key);\n        }\n        return currentStateNode;\n    };\n    /**\r\n   * Resolves a partial state value with its full representation in this machine.\r\n   *\r\n   * @param stateValue The partial state value to resolve.\r\n   */ StateNode.prototype.resolve = function(stateValue) {\n        var _a;\n        var _this = this;\n        if (!stateValue) {\n            return this.initialStateValue || EMPTY_OBJECT; // TODO: type-specific properties\n        }\n        switch(this.type){\n            case \"parallel\":\n                return (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.mapValues)(this.initialStateValue, function(subStateValue, subStateKey) {\n                    return subStateValue ? _this.getStateNode(subStateKey).resolve(stateValue[subStateKey] || subStateValue) : EMPTY_OBJECT;\n                });\n            case \"compound\":\n                if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(stateValue)) {\n                    var subStateNode = this.getStateNode(stateValue);\n                    if (subStateNode.type === \"parallel\" || subStateNode.type === \"compound\") {\n                        return _a = {}, _a[stateValue] = subStateNode.initialStateValue, _a;\n                    }\n                    return stateValue;\n                }\n                if (!Object.keys(stateValue).length) {\n                    return this.initialStateValue || {};\n                }\n                return (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.mapValues)(stateValue, function(subStateValue, subStateKey) {\n                    return subStateValue ? _this.getStateNode(subStateKey).resolve(subStateValue) : EMPTY_OBJECT;\n                });\n            default:\n                return stateValue || EMPTY_OBJECT;\n        }\n    };\n    StateNode.prototype.getResolvedPath = function(stateIdentifier) {\n        if (isStateId(stateIdentifier)) {\n            var stateNode = this.machine.idMap[stateIdentifier.slice(STATE_IDENTIFIER.length)];\n            if (!stateNode) {\n                throw new Error(\"Unable to find state node '\".concat(stateIdentifier, \"'\"));\n            }\n            return stateNode.path;\n        }\n        return (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toStatePath)(stateIdentifier, this.delimiter);\n    };\n    Object.defineProperty(StateNode.prototype, \"initialStateValue\", {\n        get: function() {\n            var _a;\n            if (this.__cache.initialStateValue) {\n                return this.__cache.initialStateValue;\n            }\n            var initialStateValue;\n            if (this.type === \"parallel\") {\n                initialStateValue = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.mapFilterValues)(this.states, function(state) {\n                    return state.initialStateValue || EMPTY_OBJECT;\n                }, function(stateNode) {\n                    return !(stateNode.type === \"history\");\n                });\n            } else if (this.initial !== undefined) {\n                if (!this.states[this.initial]) {\n                    throw new Error(\"Initial state '\".concat(this.initial, \"' not found on '\").concat(this.key, \"'\"));\n                }\n                initialStateValue = (0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.isLeafNode)(this.states[this.initial]) ? this.initial : (_a = {}, _a[this.initial] = this.states[this.initial].initialStateValue, _a);\n            } else {\n                // The finite state value of a machine without child states is just an empty object\n                initialStateValue = {};\n            }\n            this.__cache.initialStateValue = initialStateValue;\n            return this.__cache.initialStateValue;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    StateNode.prototype.getInitialState = function(stateValue, context) {\n        this._init(); // TODO: this should be in the constructor (see note in constructor)\n        var configuration = this.getStateNodes(stateValue);\n        return this.resolveTransition({\n            configuration: configuration,\n            exitSet: [],\n            transitions: [],\n            source: undefined,\n            actions: []\n        }, undefined, context !== null && context !== void 0 ? context : this.machine.context, undefined);\n    };\n    Object.defineProperty(StateNode.prototype, \"initialState\", {\n        /**\r\n     * The initial State instance, which includes all actions to be executed from\r\n     * entering the initial state.\r\n     */ get: function() {\n            var initialStateValue = this.initialStateValue;\n            if (!initialStateValue) {\n                throw new Error(\"Cannot retrieve initial state from simple state '\".concat(this.id, \"'.\"));\n            }\n            return this.getInitialState(initialStateValue);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(StateNode.prototype, \"target\", {\n        /**\r\n     * The target state value of the history state node, if it exists. This represents the\r\n     * default state value to transition to if no history value exists yet.\r\n     */ get: function() {\n            var target;\n            if (this.type === \"history\") {\n                var historyConfig = this.config;\n                if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(historyConfig.target)) {\n                    target = isStateId(historyConfig.target) ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.pathToStateValue)(this.machine.getStateNodeById(historyConfig.target).path.slice(this.path.length - 1)) : historyConfig.target;\n                } else {\n                    target = historyConfig.target;\n                }\n            }\n            return target;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\r\n   * Returns the leaf nodes from a state path relative to this state node.\r\n   *\r\n   * @param relativeStateId The relative state path to retrieve the state nodes\r\n   * @param history The previous state to retrieve history\r\n   * @param resolve Whether state nodes should resolve to initial child state nodes\r\n   */ StateNode.prototype.getRelativeStateNodes = function(relativeStateId, historyValue, resolve) {\n        if (resolve === void 0) {\n            resolve = true;\n        }\n        return resolve ? relativeStateId.type === \"history\" ? relativeStateId.resolveHistory(historyValue) : relativeStateId.initialStateNodes : [\n            relativeStateId\n        ];\n    };\n    Object.defineProperty(StateNode.prototype, \"initialStateNodes\", {\n        get: function() {\n            var _this = this;\n            if ((0,_stateUtils_js__WEBPACK_IMPORTED_MODULE_4__.isLeafNode)(this)) {\n                return [\n                    this\n                ];\n            } // Case when state node is compound but no initial state is defined\n            if (this.type === \"compound\" && !this.initial) {\n                if (!_environment_js__WEBPACK_IMPORTED_MODULE_3__.IS_PRODUCTION) {\n                    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.warn)(false, \"Compound state node '\".concat(this.id, \"' has no initial state.\"));\n                }\n                return [\n                    this\n                ];\n            }\n            var initialStateNodePaths = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toStatePaths)(this.initialStateValue);\n            return (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)(initialStateNodePaths.map(function(initialPath) {\n                return _this.getFromRelativePath(initialPath);\n            }));\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\r\n   * Retrieves state nodes from a relative path to this state node.\r\n   *\r\n   * @param relativePath The relative path from this state node\r\n   * @param historyValue\r\n   */ StateNode.prototype.getFromRelativePath = function(relativePath) {\n        if (!relativePath.length) {\n            return [\n                this\n            ];\n        }\n        var _a = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(relativePath), stateKey = _a[0], childStatePath = _a.slice(1);\n        if (!this.states) {\n            throw new Error(\"Cannot retrieve subPath '\".concat(stateKey, \"' from node with no states\"));\n        }\n        var childStateNode = this.getStateNode(stateKey);\n        if (childStateNode.type === \"history\") {\n            return childStateNode.resolveHistory();\n        }\n        if (!this.states[stateKey]) {\n            throw new Error(\"Child state '\".concat(stateKey, \"' does not exist on '\").concat(this.id, \"'\"));\n        }\n        return this.states[stateKey].getFromRelativePath(childStatePath);\n    };\n    StateNode.prototype.historyValue = function(relativeStateValue) {\n        if (!Object.keys(this.states).length) {\n            return undefined;\n        }\n        return {\n            current: relativeStateValue || this.initialStateValue,\n            states: (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.mapFilterValues)(this.states, function(stateNode, key) {\n                if (!relativeStateValue) {\n                    return stateNode.historyValue();\n                }\n                var subStateValue = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(relativeStateValue) ? undefined : relativeStateValue[key];\n                return stateNode.historyValue(subStateValue || stateNode.initialStateValue);\n            }, function(stateNode) {\n                return !stateNode.history;\n            })\n        };\n    };\n    /**\r\n   * Resolves to the historical value(s) of the parent state node,\r\n   * represented by state nodes.\r\n   *\r\n   * @param historyValue\r\n   */ StateNode.prototype.resolveHistory = function(historyValue) {\n        var _this = this;\n        if (this.type !== \"history\") {\n            return [\n                this\n            ];\n        }\n        var parent = this.parent;\n        if (!historyValue) {\n            var historyTarget = this.target;\n            return historyTarget ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toStatePaths)(historyTarget).map(function(relativeChildPath) {\n                return parent.getFromRelativePath(relativeChildPath);\n            })) : parent.initialStateNodes;\n        }\n        var subHistoryValue = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.nestedPath)(parent.path, \"states\")(historyValue).current;\n        if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(subHistoryValue)) {\n            return [\n                parent.getStateNode(subHistoryValue)\n            ];\n        }\n        return (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toStatePaths)(subHistoryValue).map(function(subStatePath) {\n            return _this.history === \"deep\" ? parent.getFromRelativePath(subStatePath) : [\n                parent.states[subStatePath[0]]\n            ];\n        }));\n    };\n    Object.defineProperty(StateNode.prototype, \"stateIds\", {\n        /**\r\n     * All the state node IDs of this state node and its descendant state nodes.\r\n     */ get: function() {\n            var _this = this;\n            var childStateIds = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)(Object.keys(this.states).map(function(stateKey) {\n                return _this.states[stateKey].stateIds;\n            }));\n            return [\n                this.id\n            ].concat(childStateIds);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(StateNode.prototype, \"events\", {\n        /**\r\n     * All the event types accepted by this state node and its descendants.\r\n     */ get: function() {\n            var e_8, _a, e_9, _b;\n            if (this.__cache.events) {\n                return this.__cache.events;\n            }\n            var states = this.states;\n            var events = new Set(this.ownEvents);\n            if (states) {\n                try {\n                    for(var _c = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__values)(Object.keys(states)), _d = _c.next(); !_d.done; _d = _c.next()){\n                        var stateId = _d.value;\n                        var state = states[stateId];\n                        if (state.states) {\n                            try {\n                                for(var _e = (e_9 = void 0, (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__values)(state.events)), _f = _e.next(); !_f.done; _f = _e.next()){\n                                    var event_1 = _f.value;\n                                    events.add(\"\".concat(event_1));\n                                }\n                            } catch (e_9_1) {\n                                e_9 = {\n                                    error: e_9_1\n                                };\n                            } finally{\n                                try {\n                                    if (_f && !_f.done && (_b = _e.return)) _b.call(_e);\n                                } finally{\n                                    if (e_9) throw e_9.error;\n                                }\n                            }\n                        }\n                    }\n                } catch (e_8_1) {\n                    e_8 = {\n                        error: e_8_1\n                    };\n                } finally{\n                    try {\n                        if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n                    } finally{\n                        if (e_8) throw e_8.error;\n                    }\n                }\n            }\n            return this.__cache.events = Array.from(events);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(StateNode.prototype, \"ownEvents\", {\n        /**\r\n     * All the events that have transitions directly from this state node.\r\n     *\r\n     * Excludes any inert events.\r\n     */ get: function() {\n            var events = new Set(this.transitions.filter(function(transition) {\n                return !(!transition.target && !transition.actions.length && transition.internal);\n            }).map(function(transition) {\n                return transition.eventType;\n            }));\n            return Array.from(events);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    StateNode.prototype.resolveTarget = function(_target) {\n        var _this = this;\n        if (_target === undefined) {\n            // an undefined target signals that the state node should not transition from that state when receiving that event\n            return undefined;\n        }\n        return _target.map(function(target) {\n            if (!(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(target)) {\n                return target;\n            }\n            var isInternalTarget = target[0] === _this.delimiter; // If internal target is defined on machine,\n            // do not include machine key on target\n            if (isInternalTarget && !_this.parent) {\n                return _this.getStateNodeByPath(target.slice(1));\n            }\n            var resolvedTarget = isInternalTarget ? _this.key + target : target;\n            if (_this.parent) {\n                try {\n                    var targetStateNode = _this.parent.getStateNodeByPath(resolvedTarget);\n                    return targetStateNode;\n                } catch (err) {\n                    throw new Error(\"Invalid transition definition for state node '\".concat(_this.id, \"':\\n\").concat(err.message));\n                }\n            } else {\n                return _this.getStateNodeByPath(resolvedTarget);\n            }\n        });\n    };\n    StateNode.prototype.formatTransition = function(transitionConfig) {\n        var _this = this;\n        var normalizedTarget = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.normalizeTarget)(transitionConfig.target);\n        var internal = \"internal\" in transitionConfig ? transitionConfig.internal : normalizedTarget ? normalizedTarget.some(function(_target) {\n            return (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(_target) && _target[0] === _this.delimiter;\n        }) : true;\n        var guards = this.machine.options.guards;\n        var target = this.resolveTarget(normalizedTarget);\n        var transition = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, transitionConfig), {\n            actions: (0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.toActionObjects)((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toArray)(transitionConfig.actions)),\n            cond: (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toGuard)(transitionConfig.cond, guards),\n            target: target,\n            source: this,\n            internal: internal,\n            eventType: transitionConfig.event,\n            toJSON: function() {\n                return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, transition), {\n                    target: transition.target ? transition.target.map(function(t) {\n                        return \"#\".concat(t.id);\n                    }) : undefined,\n                    source: \"#\".concat(_this.id)\n                });\n            }\n        });\n        return transition;\n    };\n    StateNode.prototype.formatTransitions = function() {\n        var e_10, _a;\n        var _this = this;\n        var onConfig;\n        if (!this.config.on) {\n            onConfig = [];\n        } else if (Array.isArray(this.config.on)) {\n            onConfig = this.config.on;\n        } else {\n            var _b = this.config.on, _c = WILDCARD, _d = _b[_c], wildcardConfigs = _d === void 0 ? [] : _d, strictTransitionConfigs_1 = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__rest)(_b, [\n                typeof _c === \"symbol\" ? _c : _c + \"\"\n            ]);\n            onConfig = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)(Object.keys(strictTransitionConfigs_1).map(function(key) {\n                if (!_environment_js__WEBPACK_IMPORTED_MODULE_3__.IS_PRODUCTION && key === NULL_EVENT) {\n                    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.warn)(false, \"Empty string transition configs (e.g., `{ on: { '': ... }}`) for transient transitions are deprecated. Specify the transition in the `{ always: ... }` property instead. \" + 'Please check the `on` configuration for \"#'.concat(_this.id, '\".'));\n                }\n                var transitionConfigArray = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toTransitionConfigArray)(key, strictTransitionConfigs_1[key]);\n                if (!_environment_js__WEBPACK_IMPORTED_MODULE_3__.IS_PRODUCTION) {\n                    validateArrayifiedTransitions(_this, key, transitionConfigArray);\n                }\n                return transitionConfigArray;\n            }).concat((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toTransitionConfigArray)(WILDCARD, wildcardConfigs)));\n        }\n        var eventlessConfig = this.config.always ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toTransitionConfigArray)(\"\", this.config.always) : [];\n        var doneConfig = this.config.onDone ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toTransitionConfigArray)(String((0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.done)(this.id)), this.config.onDone) : [];\n        if (!_environment_js__WEBPACK_IMPORTED_MODULE_3__.IS_PRODUCTION) {\n            (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.warn)(!(this.config.onDone && !this.parent), 'Root nodes cannot have an \".onDone\" transition. Please check the config of \"'.concat(this.id, '\".'));\n        }\n        var invokeConfig = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)(this.invoke.map(function(invokeDef) {\n            var settleTransitions = [];\n            if (invokeDef.onDone) {\n                settleTransitions.push.apply(settleTransitions, (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([], (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toTransitionConfigArray)(String((0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.doneInvoke)(invokeDef.id)), invokeDef.onDone)), false));\n            }\n            if (invokeDef.onError) {\n                settleTransitions.push.apply(settleTransitions, (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([], (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toTransitionConfigArray)(String((0,_actions_js__WEBPACK_IMPORTED_MODULE_5__.error)(invokeDef.id)), invokeDef.onError)), false));\n            }\n            return settleTransitions;\n        }));\n        var delayedTransitions = this.after;\n        var formattedTransitions = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([], (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(doneConfig), false), (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(invokeConfig), false), (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(onConfig), false), (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(eventlessConfig), false).map(function(transitionConfig) {\n            return (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toArray)(transitionConfig).map(function(transition) {\n                return _this.formatTransition(transition);\n            });\n        }));\n        try {\n            for(var delayedTransitions_1 = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__values)(delayedTransitions), delayedTransitions_1_1 = delayedTransitions_1.next(); !delayedTransitions_1_1.done; delayedTransitions_1_1 = delayedTransitions_1.next()){\n                var delayedTransition = delayedTransitions_1_1.value;\n                formattedTransitions.push(delayedTransition);\n            }\n        } catch (e_10_1) {\n            e_10 = {\n                error: e_10_1\n            };\n        } finally{\n            try {\n                if (delayedTransitions_1_1 && !delayedTransitions_1_1.done && (_a = delayedTransitions_1.return)) _a.call(delayedTransitions_1);\n            } finally{\n                if (e_10) throw e_10.error;\n            }\n        }\n        return formattedTransitions;\n    };\n    return StateNode;\n}();\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xstate/es/StateNode.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xstate/es/_virtual/_tslib.js":
/*!***************************************************!*\
  !*** ./node_modules/xstate/es/_virtual/_tslib.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   __assign: () => (/* binding */ __assign),\n/* harmony export */   __read: () => (/* binding */ __read),\n/* harmony export */   __rest: () => (/* binding */ __rest),\n/* harmony export */   __spreadArray: () => (/* binding */ __spreadArray),\n/* harmony export */   __values: () => (/* binding */ __values)\n/* harmony export */ });\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */ var __assign = function() {\n    __assign = Object.assign || function __assign(t) {\n        for(var s, i = 1, n = arguments.length; i < n; i++){\n            s = arguments[i];\n            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nfunction __rest(s, e) {\n    var t = {};\n    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++){\n        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n    }\n    return t;\n}\nfunction __values(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function() {\n            if (o && i >= o.length) o = void 0;\n            return {\n                value: o && o[i++],\n                done: !o\n            };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\nfunction __read(o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);\n    } catch (error) {\n        e = {\n            error: error\n        };\n    } finally{\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        } finally{\n            if (e) throw e.error;\n        }\n    }\n    return ar;\n}\nfunction __spreadArray(to, from, pack) {\n    if (pack || arguments.length === 2) for(var i = 0, l = from.length, ar; i < l; i++){\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xstate/es/_virtual/_tslib.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xstate/es/actionTypes.js":
/*!***********************************************!*\
  !*** ./node_modules/xstate/es/actionTypes.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   after: () => (/* binding */ after),\n/* harmony export */   assign: () => (/* binding */ assign),\n/* harmony export */   cancel: () => (/* binding */ cancel),\n/* harmony export */   choose: () => (/* binding */ choose),\n/* harmony export */   doneState: () => (/* binding */ doneState),\n/* harmony export */   error: () => (/* binding */ error),\n/* harmony export */   errorExecution: () => (/* binding */ errorExecution),\n/* harmony export */   errorPlatform: () => (/* binding */ errorPlatform),\n/* harmony export */   init: () => (/* binding */ init),\n/* harmony export */   invoke: () => (/* binding */ invoke),\n/* harmony export */   log: () => (/* binding */ log),\n/* harmony export */   nullEvent: () => (/* binding */ nullEvent),\n/* harmony export */   pure: () => (/* binding */ pure),\n/* harmony export */   raise: () => (/* binding */ raise),\n/* harmony export */   send: () => (/* binding */ send),\n/* harmony export */   start: () => (/* binding */ start),\n/* harmony export */   stop: () => (/* binding */ stop),\n/* harmony export */   update: () => (/* binding */ update)\n/* harmony export */ });\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./types.js */ \"(ssr)/./node_modules/xstate/es/types.js\");\n\nvar start = _types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.Start;\nvar stop = _types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.Stop;\nvar raise = _types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.Raise;\nvar send = _types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.Send;\nvar cancel = _types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.Cancel;\nvar nullEvent = _types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.NullEvent;\nvar assign = _types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.Assign;\nvar after = _types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.After;\nvar doneState = _types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.DoneState;\nvar log = _types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.Log;\nvar init = _types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.Init;\nvar invoke = _types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.Invoke;\nvar errorExecution = _types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.ErrorExecution;\nvar errorPlatform = _types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.ErrorPlatform;\nvar error = _types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.ErrorCustom;\nvar update = _types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.Update;\nvar choose = _types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.Choose;\nvar pure = _types_js__WEBPACK_IMPORTED_MODULE_0__.ActionTypes.Pure;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMveHN0YXRlL2VzL2FjdGlvblR5cGVzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBeUM7QUFFekMsSUFBSUMsUUFBUUQsa0RBQVdBLENBQUNFLEtBQUs7QUFDN0IsSUFBSUMsT0FBT0gsa0RBQVdBLENBQUNJLElBQUk7QUFDM0IsSUFBSUMsUUFBUUwsa0RBQVdBLENBQUNNLEtBQUs7QUFDN0IsSUFBSUMsT0FBT1Asa0RBQVdBLENBQUNRLElBQUk7QUFDM0IsSUFBSUMsU0FBU1Qsa0RBQVdBLENBQUNVLE1BQU07QUFDL0IsSUFBSUMsWUFBWVgsa0RBQVdBLENBQUNZLFNBQVM7QUFDckMsSUFBSUMsU0FBU2Isa0RBQVdBLENBQUNjLE1BQU07QUFDL0IsSUFBSUMsUUFBUWYsa0RBQVdBLENBQUNnQixLQUFLO0FBQzdCLElBQUlDLFlBQVlqQixrREFBV0EsQ0FBQ2tCLFNBQVM7QUFDckMsSUFBSUMsTUFBTW5CLGtEQUFXQSxDQUFDb0IsR0FBRztBQUN6QixJQUFJQyxPQUFPckIsa0RBQVdBLENBQUNzQixJQUFJO0FBQzNCLElBQUlDLFNBQVN2QixrREFBV0EsQ0FBQ3dCLE1BQU07QUFDL0IsSUFBSUMsaUJBQWlCekIsa0RBQVdBLENBQUMwQixjQUFjO0FBQy9DLElBQUlDLGdCQUFnQjNCLGtEQUFXQSxDQUFDNEIsYUFBYTtBQUM3QyxJQUFJQyxRQUFRN0Isa0RBQVdBLENBQUM4QixXQUFXO0FBQ25DLElBQUlDLFNBQVMvQixrREFBV0EsQ0FBQ2dDLE1BQU07QUFDL0IsSUFBSUMsU0FBU2pDLGtEQUFXQSxDQUFDa0MsTUFBTTtBQUMvQixJQUFJQyxPQUFPbkMsa0RBQVdBLENBQUNvQyxJQUFJO0FBRXFJIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGhlLWdyaWQtMi8uL25vZGVfbW9kdWxlcy94c3RhdGUvZXMvYWN0aW9uVHlwZXMuanM/OGNiNyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBY3Rpb25UeXBlcyB9IGZyb20gJy4vdHlwZXMuanMnO1xuXG52YXIgc3RhcnQgPSBBY3Rpb25UeXBlcy5TdGFydDtcbnZhciBzdG9wID0gQWN0aW9uVHlwZXMuU3RvcDtcbnZhciByYWlzZSA9IEFjdGlvblR5cGVzLlJhaXNlO1xudmFyIHNlbmQgPSBBY3Rpb25UeXBlcy5TZW5kO1xudmFyIGNhbmNlbCA9IEFjdGlvblR5cGVzLkNhbmNlbDtcbnZhciBudWxsRXZlbnQgPSBBY3Rpb25UeXBlcy5OdWxsRXZlbnQ7XG52YXIgYXNzaWduID0gQWN0aW9uVHlwZXMuQXNzaWduO1xudmFyIGFmdGVyID0gQWN0aW9uVHlwZXMuQWZ0ZXI7XG52YXIgZG9uZVN0YXRlID0gQWN0aW9uVHlwZXMuRG9uZVN0YXRlO1xudmFyIGxvZyA9IEFjdGlvblR5cGVzLkxvZztcbnZhciBpbml0ID0gQWN0aW9uVHlwZXMuSW5pdDtcbnZhciBpbnZva2UgPSBBY3Rpb25UeXBlcy5JbnZva2U7XG52YXIgZXJyb3JFeGVjdXRpb24gPSBBY3Rpb25UeXBlcy5FcnJvckV4ZWN1dGlvbjtcbnZhciBlcnJvclBsYXRmb3JtID0gQWN0aW9uVHlwZXMuRXJyb3JQbGF0Zm9ybTtcbnZhciBlcnJvciA9IEFjdGlvblR5cGVzLkVycm9yQ3VzdG9tO1xudmFyIHVwZGF0ZSA9IEFjdGlvblR5cGVzLlVwZGF0ZTtcbnZhciBjaG9vc2UgPSBBY3Rpb25UeXBlcy5DaG9vc2U7XG52YXIgcHVyZSA9IEFjdGlvblR5cGVzLlB1cmU7XG5cbmV4cG9ydCB7IGFmdGVyLCBhc3NpZ24sIGNhbmNlbCwgY2hvb3NlLCBkb25lU3RhdGUsIGVycm9yLCBlcnJvckV4ZWN1dGlvbiwgZXJyb3JQbGF0Zm9ybSwgaW5pdCwgaW52b2tlLCBsb2csIG51bGxFdmVudCwgcHVyZSwgcmFpc2UsIHNlbmQsIHN0YXJ0LCBzdG9wLCB1cGRhdGUgfTtcbiJdLCJuYW1lcyI6WyJBY3Rpb25UeXBlcyIsInN0YXJ0IiwiU3RhcnQiLCJzdG9wIiwiU3RvcCIsInJhaXNlIiwiUmFpc2UiLCJzZW5kIiwiU2VuZCIsImNhbmNlbCIsIkNhbmNlbCIsIm51bGxFdmVudCIsIk51bGxFdmVudCIsImFzc2lnbiIsIkFzc2lnbiIsImFmdGVyIiwiQWZ0ZXIiLCJkb25lU3RhdGUiLCJEb25lU3RhdGUiLCJsb2ciLCJMb2ciLCJpbml0IiwiSW5pdCIsImludm9rZSIsIkludm9rZSIsImVycm9yRXhlY3V0aW9uIiwiRXJyb3JFeGVjdXRpb24iLCJlcnJvclBsYXRmb3JtIiwiRXJyb3JQbGF0Zm9ybSIsImVycm9yIiwiRXJyb3JDdXN0b20iLCJ1cGRhdGUiLCJVcGRhdGUiLCJjaG9vc2UiLCJDaG9vc2UiLCJwdXJlIiwiUHVyZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xstate/es/actionTypes.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xstate/es/actions.js":
/*!*******************************************!*\
  !*** ./node_modules/xstate/es/actions.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   actionTypes: () => (/* reexport module object */ _actionTypes_js__WEBPACK_IMPORTED_MODULE_0__),\n/* harmony export */   after: () => (/* binding */ after),\n/* harmony export */   assign: () => (/* binding */ assign),\n/* harmony export */   cancel: () => (/* binding */ cancel),\n/* harmony export */   choose: () => (/* binding */ choose),\n/* harmony export */   done: () => (/* binding */ done),\n/* harmony export */   doneInvoke: () => (/* binding */ doneInvoke),\n/* harmony export */   error: () => (/* binding */ error),\n/* harmony export */   escalate: () => (/* binding */ escalate),\n/* harmony export */   forwardTo: () => (/* binding */ forwardTo),\n/* harmony export */   getActionFunction: () => (/* binding */ getActionFunction),\n/* harmony export */   initEvent: () => (/* binding */ initEvent),\n/* harmony export */   isActionObject: () => (/* binding */ isActionObject),\n/* harmony export */   log: () => (/* binding */ log),\n/* harmony export */   pure: () => (/* binding */ pure),\n/* harmony export */   raise: () => (/* binding */ raise),\n/* harmony export */   resolveActions: () => (/* binding */ resolveActions),\n/* harmony export */   resolveLog: () => (/* binding */ resolveLog),\n/* harmony export */   resolveRaise: () => (/* binding */ resolveRaise),\n/* harmony export */   resolveSend: () => (/* binding */ resolveSend),\n/* harmony export */   resolveStop: () => (/* binding */ resolveStop),\n/* harmony export */   respond: () => (/* binding */ respond),\n/* harmony export */   send: () => (/* binding */ send),\n/* harmony export */   sendParent: () => (/* binding */ sendParent),\n/* harmony export */   sendTo: () => (/* binding */ sendTo),\n/* harmony export */   sendUpdate: () => (/* binding */ sendUpdate),\n/* harmony export */   start: () => (/* binding */ start),\n/* harmony export */   stop: () => (/* binding */ stop),\n/* harmony export */   toActionObject: () => (/* binding */ toActionObject),\n/* harmony export */   toActionObjects: () => (/* binding */ toActionObjects),\n/* harmony export */   toActivityDefinition: () => (/* binding */ toActivityDefinition)\n/* harmony export */ });\n/* harmony import */ var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_virtual/_tslib.js */ \"(ssr)/./node_modules/xstate/es/_virtual/_tslib.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./types.js */ \"(ssr)/./node_modules/xstate/es/types.js\");\n/* harmony import */ var _actionTypes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./actionTypes.js */ \"(ssr)/./node_modules/xstate/es/actionTypes.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/xstate/es/utils.js\");\n/* harmony import */ var _environment_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./environment.js */ \"(ssr)/./node_modules/xstate/es/environment.js\");\n\n\n\n\n\n\n\nvar initEvent = /*#__PURE__*/ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.toSCXMLEvent)({\n    type: _actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.init\n});\nfunction getActionFunction(actionType, actionFunctionMap) {\n    return actionFunctionMap ? actionFunctionMap[actionType] || undefined : undefined;\n}\nfunction toActionObject(action, actionFunctionMap) {\n    var actionObject;\n    if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isString)(action) || typeof action === \"number\") {\n        var exec = getActionFunction(action, actionFunctionMap);\n        if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(exec)) {\n            actionObject = {\n                type: action,\n                exec: exec\n            };\n        } else if (exec) {\n            actionObject = exec;\n        } else {\n            actionObject = {\n                type: action,\n                exec: undefined\n            };\n        }\n    } else if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(action)) {\n        actionObject = {\n            // Convert action to string if unnamed\n            type: action.name || action.toString(),\n            exec: action\n        };\n    } else {\n        var exec = getActionFunction(action.type, actionFunctionMap);\n        if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(exec)) {\n            actionObject = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, action), {\n                exec: exec\n            });\n        } else if (exec) {\n            var actionType = exec.type || action.type;\n            actionObject = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, exec), action), {\n                type: actionType\n            });\n        } else {\n            actionObject = action;\n        }\n    }\n    return actionObject;\n}\nvar toActionObjects = function(action, actionFunctionMap) {\n    if (!action) {\n        return [];\n    }\n    var actions = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isArray)(action) ? action : [\n        action\n    ];\n    return actions.map(function(subAction) {\n        return toActionObject(subAction, actionFunctionMap);\n    });\n};\nfunction toActivityDefinition(action) {\n    var actionObject = toActionObject(action);\n    return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({\n        id: (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isString)(action) ? action : actionObject.id\n    }, actionObject), {\n        type: actionObject.type\n    });\n}\n/**\r\n * Raises an event. This places the event in the internal event queue, so that\r\n * the event is immediately consumed by the machine in the current step.\r\n *\r\n * @param eventType The event to raise.\r\n */ function raise(event, options) {\n    return {\n        type: _actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.raise,\n        event: typeof event === \"function\" ? event : (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.toEventObject)(event),\n        delay: options ? options.delay : undefined,\n        id: options === null || options === void 0 ? void 0 : options.id\n    };\n}\nfunction resolveRaise(action, ctx, _event, delaysMap) {\n    var meta = {\n        _event: _event\n    };\n    var resolvedEvent = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.toSCXMLEvent)((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(action.event) ? action.event(ctx, _event.data, meta) : action.event);\n    var resolvedDelay;\n    if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isString)(action.delay)) {\n        var configDelay = delaysMap && delaysMap[action.delay];\n        resolvedDelay = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(configDelay) ? configDelay(ctx, _event.data, meta) : configDelay;\n    } else {\n        resolvedDelay = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(action.delay) ? action.delay(ctx, _event.data, meta) : action.delay;\n    }\n    return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, action), {\n        type: _actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.raise,\n        _event: resolvedEvent,\n        delay: resolvedDelay\n    });\n}\n/**\r\n * Sends an event. This returns an action that will be read by an interpreter to\r\n * send the event in the next step, after the current step is finished executing.\r\n *\r\n * @deprecated Use the `sendTo(...)` action creator instead.\r\n *\r\n * @param event The event to send.\r\n * @param options Options to pass into the send event:\r\n *  - `id` - The unique send event identifier (used with `cancel()`).\r\n *  - `delay` - The number of milliseconds to delay the sending of the event.\r\n *  - `to` - The target of this event (by default, the machine the event was sent from).\r\n */ function send(event, options) {\n    return {\n        to: options ? options.to : undefined,\n        type: _actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.send,\n        event: (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(event) ? event : (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.toEventObject)(event),\n        delay: options ? options.delay : undefined,\n        // TODO: don't auto-generate IDs here like that\n        // there is too big chance of the ID collision\n        id: options && options.id !== undefined ? options.id : (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(event) ? event.name : (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.getEventType)(event)\n    };\n}\nfunction resolveSend(action, ctx, _event, delaysMap) {\n    var meta = {\n        _event: _event\n    }; // TODO: helper function for resolving Expr\n    var resolvedEvent = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.toSCXMLEvent)((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(action.event) ? action.event(ctx, _event.data, meta) : action.event);\n    var resolvedDelay;\n    if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isString)(action.delay)) {\n        var configDelay = delaysMap && delaysMap[action.delay];\n        resolvedDelay = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(configDelay) ? configDelay(ctx, _event.data, meta) : configDelay;\n    } else {\n        resolvedDelay = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(action.delay) ? action.delay(ctx, _event.data, meta) : action.delay;\n    }\n    var resolvedTarget = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(action.to) ? action.to(ctx, _event.data, meta) : action.to;\n    return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, action), {\n        to: resolvedTarget,\n        _event: resolvedEvent,\n        event: resolvedEvent.data,\n        delay: resolvedDelay\n    });\n}\n/**\r\n * Sends an event to this machine's parent.\r\n *\r\n * @param event The event to send to the parent machine.\r\n * @param options Options to pass into the send event.\r\n */ function sendParent(event, options) {\n    return send(event, (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, options), {\n        to: _types_js__WEBPACK_IMPORTED_MODULE_3__.SpecialTargets.Parent\n    }));\n}\n/**\r\n * Sends an event to an actor.\r\n *\r\n * @param actor The `ActorRef` to send the event to.\r\n * @param event The event to send, or an expression that evaluates to the event to send\r\n * @param options Send action options\r\n * @returns An XState send action object\r\n */ function sendTo(actor, event, options) {\n    return send(event, (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, options), {\n        to: actor\n    }));\n}\n/**\r\n * Sends an update event to this machine's parent.\r\n */ function sendUpdate() {\n    return sendParent(_actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.update);\n}\n/**\r\n * Sends an event back to the sender of the original event.\r\n *\r\n * @param event The event to send back to the sender\r\n * @param options Options to pass into the send event\r\n */ function respond(event, options) {\n    return send(event, (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, options), {\n        to: function(_, __, _a) {\n            var _event = _a._event;\n            return _event.origin; // TODO: handle when _event.origin is undefined\n        }\n    }));\n}\nvar defaultLogExpr = function(context, event) {\n    return {\n        context: context,\n        event: event\n    };\n};\n/**\r\n *\r\n * @param expr The expression function to evaluate which will be logged.\r\n *  Takes in 2 arguments:\r\n *  - `ctx` - the current state context\r\n *  - `event` - the event that caused this action to be executed.\r\n * @param label The label to give to the logged expression.\r\n */ function log(expr, label) {\n    if (expr === void 0) {\n        expr = defaultLogExpr;\n    }\n    return {\n        type: _actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.log,\n        label: label,\n        expr: expr\n    };\n}\nvar resolveLog = function(action, ctx, _event) {\n    return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, action), {\n        value: (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isString)(action.expr) ? action.expr : action.expr(ctx, _event.data, {\n            _event: _event\n        })\n    });\n};\n/**\r\n * Cancels an in-flight `send(...)` action. A canceled sent action will not\r\n * be executed, nor will its event be sent, unless it has already been sent\r\n * (e.g., if `cancel(...)` is called after the `send(...)` action's `delay`).\r\n *\r\n * @param sendId The `id` of the `send(...)` action to cancel.\r\n */ var cancel = function(sendId) {\n    return {\n        type: _actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.cancel,\n        sendId: sendId\n    };\n};\n/**\r\n * Starts an activity.\r\n *\r\n * @param activity The activity to start.\r\n */ function start(activity) {\n    var activityDef = toActivityDefinition(activity);\n    return {\n        type: _types_js__WEBPACK_IMPORTED_MODULE_3__.ActionTypes.Start,\n        activity: activityDef,\n        exec: undefined\n    };\n}\n/**\r\n * Stops an activity.\r\n *\r\n * @param actorRef The activity to stop.\r\n */ function stop(actorRef) {\n    var activity = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(actorRef) ? actorRef : toActivityDefinition(actorRef);\n    return {\n        type: _types_js__WEBPACK_IMPORTED_MODULE_3__.ActionTypes.Stop,\n        activity: activity,\n        exec: undefined\n    };\n}\nfunction resolveStop(action, context, _event) {\n    var actorRefOrString = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(action.activity) ? action.activity(context, _event.data) : action.activity;\n    var resolvedActorRef = typeof actorRefOrString === \"string\" ? {\n        id: actorRefOrString\n    } : actorRefOrString;\n    var actionObject = {\n        type: _types_js__WEBPACK_IMPORTED_MODULE_3__.ActionTypes.Stop,\n        activity: resolvedActorRef\n    };\n    return actionObject;\n}\n/**\r\n * Updates the current context of the machine.\r\n *\r\n * @param assignment An object that represents the partial context to update.\r\n */ var assign = function(assignment) {\n    return {\n        type: _actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.assign,\n        assignment: assignment\n    };\n};\nfunction isActionObject(action) {\n    return typeof action === \"object\" && \"type\" in action;\n}\n/**\r\n * Returns an event type that represents an implicit event that\r\n * is sent after the specified `delay`.\r\n *\r\n * @param delayRef The delay in milliseconds\r\n * @param id The state node ID where this event is handled\r\n */ function after(delayRef, id) {\n    var idSuffix = id ? \"#\".concat(id) : \"\";\n    return \"\".concat(_types_js__WEBPACK_IMPORTED_MODULE_3__.ActionTypes.After, \"(\").concat(delayRef, \")\").concat(idSuffix);\n}\n/**\r\n * Returns an event that represents that a final state node\r\n * has been reached in the parent state node.\r\n *\r\n * @param id The final state node's parent state node `id`\r\n * @param data The data to pass into the event\r\n */ function done(id, data) {\n    var type = \"\".concat(_types_js__WEBPACK_IMPORTED_MODULE_3__.ActionTypes.DoneState, \".\").concat(id);\n    var eventObject = {\n        type: type,\n        data: data\n    };\n    eventObject.toString = function() {\n        return type;\n    };\n    return eventObject;\n}\n/**\r\n * Returns an event that represents that an invoked service has terminated.\r\n *\r\n * An invoked service is terminated when it has reached a top-level final state node,\r\n * but not when it is canceled.\r\n *\r\n * @param id The final state node ID\r\n * @param data The data to pass into the event\r\n */ function doneInvoke(id, data) {\n    var type = \"\".concat(_types_js__WEBPACK_IMPORTED_MODULE_3__.ActionTypes.DoneInvoke, \".\").concat(id);\n    var eventObject = {\n        type: type,\n        data: data\n    };\n    eventObject.toString = function() {\n        return type;\n    };\n    return eventObject;\n}\nfunction error(id, data) {\n    var type = \"\".concat(_types_js__WEBPACK_IMPORTED_MODULE_3__.ActionTypes.ErrorPlatform, \".\").concat(id);\n    var eventObject = {\n        type: type,\n        data: data\n    };\n    eventObject.toString = function() {\n        return type;\n    };\n    return eventObject;\n}\nfunction pure(getActions) {\n    return {\n        type: _types_js__WEBPACK_IMPORTED_MODULE_3__.ActionTypes.Pure,\n        get: getActions\n    };\n}\n/**\r\n * Forwards (sends) an event to a specified service.\r\n *\r\n * @param target The target service to forward the event to.\r\n * @param options Options to pass into the send action creator.\r\n */ function forwardTo(target, options) {\n    if (!_environment_js__WEBPACK_IMPORTED_MODULE_4__.IS_PRODUCTION && (!target || typeof target === \"function\")) {\n        var originalTarget_1 = target;\n        target = function() {\n            var args = [];\n            for(var _i = 0; _i < arguments.length; _i++){\n                args[_i] = arguments[_i];\n            }\n            var resolvedTarget = typeof originalTarget_1 === \"function\" ? originalTarget_1.apply(void 0, (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([], (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(args), false)) : originalTarget_1;\n            if (!resolvedTarget) {\n                throw new Error(\"Attempted to forward event to undefined actor. This risks an infinite loop in the sender.\");\n            }\n            return resolvedTarget;\n        };\n    }\n    return send(function(_, event) {\n        return event;\n    }, (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, options), {\n        to: target\n    }));\n}\n/**\r\n * Escalates an error by sending it as an event to this machine's parent.\r\n *\r\n * @param errorData The error data to send, or the expression function that\r\n * takes in the `context`, `event`, and `meta`, and returns the error data to send.\r\n * @param options Options to pass into the send action creator.\r\n */ function escalate(errorData, options) {\n    return sendParent(function(context, event, meta) {\n        return {\n            type: _actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.error,\n            data: (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isFunction)(errorData) ? errorData(context, event, meta) : errorData\n        };\n    }, (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, options), {\n        to: _types_js__WEBPACK_IMPORTED_MODULE_3__.SpecialTargets.Parent\n    }));\n}\nfunction choose(conds) {\n    return {\n        type: _types_js__WEBPACK_IMPORTED_MODULE_3__.ActionTypes.Choose,\n        conds: conds\n    };\n}\nvar pluckAssigns = function(actionBlocks) {\n    var e_1, _a;\n    var assignActions = [];\n    try {\n        for(var actionBlocks_1 = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__values)(actionBlocks), actionBlocks_1_1 = actionBlocks_1.next(); !actionBlocks_1_1.done; actionBlocks_1_1 = actionBlocks_1.next()){\n            var block = actionBlocks_1_1.value;\n            var i = 0;\n            while(i < block.actions.length){\n                if (block.actions[i].type === _actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.assign) {\n                    assignActions.push(block.actions[i]);\n                    block.actions.splice(i, 1);\n                    continue;\n                }\n                i++;\n            }\n        }\n    } catch (e_1_1) {\n        e_1 = {\n            error: e_1_1\n        };\n    } finally{\n        try {\n            if (actionBlocks_1_1 && !actionBlocks_1_1.done && (_a = actionBlocks_1.return)) _a.call(actionBlocks_1);\n        } finally{\n            if (e_1) throw e_1.error;\n        }\n    }\n    return assignActions;\n};\nfunction resolveActions(machine, currentState, currentContext, _event, actionBlocks, predictableExec, preserveActionOrder) {\n    if (preserveActionOrder === void 0) {\n        preserveActionOrder = false;\n    }\n    var assignActions = preserveActionOrder ? [] : pluckAssigns(actionBlocks);\n    var updatedContext = assignActions.length ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.updateContext)(currentContext, _event, assignActions, currentState) : currentContext;\n    var preservedContexts = preserveActionOrder ? [\n        currentContext\n    ] : undefined;\n    var deferredToBlockEnd = [];\n    function handleAction(blockType, actionObject) {\n        var _a;\n        switch(actionObject.type){\n            case _actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.raise:\n                {\n                    var raisedAction = resolveRaise(actionObject, updatedContext, _event, machine.options.delays);\n                    if (predictableExec && typeof raisedAction.delay === \"number\") {\n                        predictableExec(raisedAction, updatedContext, _event);\n                    }\n                    return raisedAction;\n                }\n            case _actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.send:\n                var sendAction = resolveSend(actionObject, updatedContext, _event, machine.options.delays); // TODO: fix ActionTypes.Init\n                if (!_environment_js__WEBPACK_IMPORTED_MODULE_4__.IS_PRODUCTION) {\n                    var configuredDelay = actionObject.delay; // warn after resolving as we can create better contextual message here\n                    (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.warn)(!(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isString)(configuredDelay) || typeof sendAction.delay === \"number\", \"No delay reference for delay expression '\".concat(configuredDelay, \"' was found on machine '\").concat(machine.id, \"'\"));\n                }\n                if (predictableExec && sendAction.to !== _types_js__WEBPACK_IMPORTED_MODULE_3__.SpecialTargets.Internal) {\n                    if (blockType === \"entry\") {\n                        deferredToBlockEnd.push(sendAction);\n                    } else {\n                        predictableExec(sendAction, updatedContext, _event);\n                    }\n                }\n                return sendAction;\n            case _actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.log:\n                {\n                    var resolved = resolveLog(actionObject, updatedContext, _event);\n                    predictableExec === null || predictableExec === void 0 ? void 0 : predictableExec(resolved, updatedContext, _event);\n                    return resolved;\n                }\n            case _actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.choose:\n                {\n                    var chooseAction = actionObject;\n                    var matchedActions = (_a = chooseAction.conds.find(function(condition) {\n                        var guard = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.toGuard)(condition.cond, machine.options.guards);\n                        return !guard || (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.evaluateGuard)(machine, guard, updatedContext, _event, !predictableExec ? currentState : undefined);\n                    })) === null || _a === void 0 ? void 0 : _a.actions;\n                    if (!matchedActions) {\n                        return [];\n                    }\n                    var _b = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(resolveActions(machine, currentState, updatedContext, _event, [\n                        {\n                            type: blockType,\n                            actions: toActionObjects((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.toArray)(matchedActions), machine.options.actions)\n                        }\n                    ], predictableExec, preserveActionOrder), 2), resolvedActionsFromChoose = _b[0], resolvedContextFromChoose = _b[1];\n                    updatedContext = resolvedContextFromChoose;\n                    preservedContexts === null || preservedContexts === void 0 ? void 0 : preservedContexts.push(updatedContext);\n                    return resolvedActionsFromChoose;\n                }\n            case _actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.pure:\n                {\n                    var matchedActions = actionObject.get(updatedContext, _event.data);\n                    if (!matchedActions) {\n                        return [];\n                    }\n                    var _c = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(resolveActions(machine, currentState, updatedContext, _event, [\n                        {\n                            type: blockType,\n                            actions: toActionObjects((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.toArray)(matchedActions), machine.options.actions)\n                        }\n                    ], predictableExec, preserveActionOrder), 2), resolvedActionsFromPure = _c[0], resolvedContext = _c[1];\n                    updatedContext = resolvedContext;\n                    preservedContexts === null || preservedContexts === void 0 ? void 0 : preservedContexts.push(updatedContext);\n                    return resolvedActionsFromPure;\n                }\n            case _actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.stop:\n                {\n                    var resolved = resolveStop(actionObject, updatedContext, _event);\n                    predictableExec === null || predictableExec === void 0 ? void 0 : predictableExec(resolved, currentContext, _event);\n                    return resolved;\n                }\n            case _actionTypes_js__WEBPACK_IMPORTED_MODULE_0__.assign:\n                {\n                    updatedContext = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.updateContext)(updatedContext, _event, [\n                        actionObject\n                    ], !predictableExec ? currentState : undefined);\n                    preservedContexts === null || preservedContexts === void 0 ? void 0 : preservedContexts.push(updatedContext);\n                    break;\n                }\n            default:\n                var resolvedActionObject = toActionObject(actionObject, machine.options.actions);\n                var exec_1 = resolvedActionObject.exec;\n                if (predictableExec) {\n                    predictableExec(resolvedActionObject, updatedContext, _event);\n                } else if (exec_1 && preservedContexts) {\n                    var contextIndex_1 = preservedContexts.length - 1;\n                    var wrapped = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, resolvedActionObject), {\n                        exec: function(_ctx) {\n                            var args = [];\n                            for(var _i = 1; _i < arguments.length; _i++){\n                                args[_i - 1] = arguments[_i];\n                            }\n                            exec_1.apply(void 0, (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([\n                                preservedContexts[contextIndex_1]\n                            ], (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__read)(args), false));\n                        }\n                    });\n                    resolvedActionObject = wrapped;\n                }\n                return resolvedActionObject;\n        }\n    }\n    function processBlock(block) {\n        var e_2, _a;\n        var resolvedActions = [];\n        try {\n            for(var _b = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_2__.__values)(block.actions), _c = _b.next(); !_c.done; _c = _b.next()){\n                var action = _c.value;\n                var resolved = handleAction(block.type, action);\n                if (resolved) {\n                    resolvedActions = resolvedActions.concat(resolved);\n                }\n            }\n        } catch (e_2_1) {\n            e_2 = {\n                error: e_2_1\n            };\n        } finally{\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            } finally{\n                if (e_2) throw e_2.error;\n            }\n        }\n        deferredToBlockEnd.forEach(function(action) {\n            predictableExec(action, updatedContext, _event);\n        });\n        deferredToBlockEnd.length = 0;\n        return resolvedActions;\n    }\n    var resolvedActions = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.flatten)(actionBlocks.map(processBlock));\n    return [\n        resolvedActions,\n        updatedContext\n    ];\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xstate/es/actions.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xstate/es/behaviors.js":
/*!*********************************************!*\
  !*** ./node_modules/xstate/es/behaviors.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fromPromise: () => (/* binding */ fromPromise),\n/* harmony export */   fromReducer: () => (/* binding */ fromReducer),\n/* harmony export */   spawnBehavior: () => (/* binding */ spawnBehavior)\n/* harmony export */ });\n/* harmony import */ var _actions_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./actions.js */ \"(ssr)/./node_modules/xstate/es/actions.js\");\n/* harmony import */ var _Actor_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Actor.js */ \"(ssr)/./node_modules/xstate/es/Actor.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/xstate/es/utils.js\");\n\n\n\n/**\r\n * Returns an actor behavior from a reducer and its initial state.\r\n *\r\n * @param transition The pure reducer that returns the next state given the current state and event.\r\n * @param initialState The initial state of the reducer.\r\n * @returns An actor behavior\r\n */ function fromReducer(transition, initialState) {\n    return {\n        transition: transition,\n        initialState: initialState\n    };\n}\nfunction fromPromise(promiseFn) {\n    var initialState = {\n        error: undefined,\n        data: undefined,\n        status: \"pending\"\n    };\n    return {\n        transition: function(state, event, _a) {\n            var parent = _a.parent, id = _a.id, observers = _a.observers;\n            switch(event.type){\n                case \"fulfill\":\n                    parent === null || parent === void 0 ? void 0 : parent.send((0,_actions_js__WEBPACK_IMPORTED_MODULE_0__.doneInvoke)(id, event.data));\n                    return {\n                        error: undefined,\n                        data: event.data,\n                        status: \"fulfilled\"\n                    };\n                case \"reject\":\n                    parent === null || parent === void 0 ? void 0 : parent.send((0,_actions_js__WEBPACK_IMPORTED_MODULE_0__.error)(id, event.error));\n                    observers.forEach(function(observer) {\n                        observer.error(event.error);\n                    });\n                    return {\n                        error: event.error,\n                        data: undefined,\n                        status: \"rejected\"\n                    };\n                default:\n                    return state;\n            }\n        },\n        initialState: initialState,\n        start: function(_a) {\n            var self = _a.self;\n            promiseFn().then(function(data) {\n                self.send({\n                    type: \"fulfill\",\n                    data: data\n                });\n            }, function(reason) {\n                self.send({\n                    type: \"reject\",\n                    error: reason\n                });\n            });\n            return initialState;\n        }\n    };\n}\nfunction spawnBehavior(behavior, options) {\n    if (options === void 0) {\n        options = {};\n    }\n    var state = behavior.initialState;\n    var observers = new Set();\n    var mailbox = [];\n    var flushing = false;\n    var flush = function() {\n        if (flushing) {\n            return;\n        }\n        flushing = true;\n        while(mailbox.length > 0){\n            var event_1 = mailbox.shift();\n            state = behavior.transition(state, event_1, actorCtx);\n            observers.forEach(function(observer) {\n                return observer.next(state);\n            });\n        }\n        flushing = false;\n    };\n    var actor = (0,_Actor_js__WEBPACK_IMPORTED_MODULE_1__.toActorRef)({\n        id: options.id,\n        send: function(event) {\n            mailbox.push(event);\n            flush();\n        },\n        getSnapshot: function() {\n            return state;\n        },\n        subscribe: function(next, handleError, complete) {\n            var observer = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.toObserver)(next, handleError, complete);\n            observers.add(observer);\n            observer.next(state);\n            return {\n                unsubscribe: function() {\n                    observers.delete(observer);\n                }\n            };\n        }\n    });\n    var actorCtx = {\n        parent: options.parent,\n        self: actor,\n        id: options.id || \"anonymous\",\n        observers: observers\n    };\n    state = behavior.start ? behavior.start(actorCtx) : state;\n    return actor;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMveHN0YXRlL2VzL2JlaGF2aW9ycy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBaUQ7QUFDVDtBQUNBO0FBRXhDOzs7Ozs7Q0FNQyxHQUVELFNBQVNJLFlBQVlDLFVBQVUsRUFBRUMsWUFBWTtJQUMzQyxPQUFPO1FBQ0xELFlBQVlBO1FBQ1pDLGNBQWNBO0lBQ2hCO0FBQ0Y7QUFDQSxTQUFTQyxZQUFZQyxTQUFTO0lBQzVCLElBQUlGLGVBQWU7UUFDakJOLE9BQU9TO1FBQ1BDLE1BQU1EO1FBQ05FLFFBQVE7SUFDVjtJQUNBLE9BQU87UUFDTE4sWUFBWSxTQUFVTyxLQUFLLEVBQUVDLEtBQUssRUFBRUMsRUFBRTtZQUNwQyxJQUFJQyxTQUFTRCxHQUFHQyxNQUFNLEVBQ2xCQyxLQUFLRixHQUFHRSxFQUFFLEVBQ1ZDLFlBQVlILEdBQUdHLFNBQVM7WUFFNUIsT0FBUUosTUFBTUssSUFBSTtnQkFDaEIsS0FBSztvQkFDSEgsV0FBVyxRQUFRQSxXQUFXLEtBQUssSUFBSSxLQUFLLElBQUlBLE9BQU9JLElBQUksQ0FBQ2xCLHVEQUFVQSxDQUFDZSxJQUFJSCxNQUFNSCxJQUFJO29CQUNyRixPQUFPO3dCQUNMVixPQUFPUzt3QkFDUEMsTUFBTUcsTUFBTUgsSUFBSTt3QkFDaEJDLFFBQVE7b0JBQ1Y7Z0JBRUYsS0FBSztvQkFDSEksV0FBVyxRQUFRQSxXQUFXLEtBQUssSUFBSSxLQUFLLElBQUlBLE9BQU9JLElBQUksQ0FBQ25CLGtEQUFLQSxDQUFDZ0IsSUFBSUgsTUFBTWIsS0FBSztvQkFDakZpQixVQUFVRyxPQUFPLENBQUMsU0FBVUMsUUFBUTt3QkFDbENBLFNBQVNyQixLQUFLLENBQUNhLE1BQU1iLEtBQUs7b0JBQzVCO29CQUNBLE9BQU87d0JBQ0xBLE9BQU9hLE1BQU1iLEtBQUs7d0JBQ2xCVSxNQUFNRDt3QkFDTkUsUUFBUTtvQkFDVjtnQkFFRjtvQkFDRSxPQUFPQztZQUNYO1FBQ0Y7UUFDQU4sY0FBY0E7UUFDZGdCLE9BQU8sU0FBVVIsRUFBRTtZQUNqQixJQUFJUyxPQUFPVCxHQUFHUyxJQUFJO1lBQ2xCZixZQUFZZ0IsSUFBSSxDQUFDLFNBQVVkLElBQUk7Z0JBQzdCYSxLQUFLSixJQUFJLENBQUM7b0JBQ1JELE1BQU07b0JBQ05SLE1BQU1BO2dCQUNSO1lBQ0YsR0FBRyxTQUFVZSxNQUFNO2dCQUNqQkYsS0FBS0osSUFBSSxDQUFDO29CQUNSRCxNQUFNO29CQUNObEIsT0FBT3lCO2dCQUNUO1lBQ0Y7WUFDQSxPQUFPbkI7UUFDVDtJQUNGO0FBQ0Y7QUFDQSxTQUFTb0IsY0FBY0MsUUFBUSxFQUFFQyxPQUFPO0lBQ3RDLElBQUlBLFlBQVksS0FBSyxHQUFHO1FBQ3RCQSxVQUFVLENBQUM7SUFDYjtJQUVBLElBQUloQixRQUFRZSxTQUFTckIsWUFBWTtJQUNqQyxJQUFJVyxZQUFZLElBQUlZO0lBQ3BCLElBQUlDLFVBQVUsRUFBRTtJQUNoQixJQUFJQyxXQUFXO0lBRWYsSUFBSUMsUUFBUTtRQUNWLElBQUlELFVBQVU7WUFDWjtRQUNGO1FBRUFBLFdBQVc7UUFFWCxNQUFPRCxRQUFRRyxNQUFNLEdBQUcsRUFBRztZQUN6QixJQUFJQyxVQUFVSixRQUFRSyxLQUFLO1lBQzNCdkIsUUFBUWUsU0FBU3RCLFVBQVUsQ0FBQ08sT0FBT3NCLFNBQVNFO1lBQzVDbkIsVUFBVUcsT0FBTyxDQUFDLFNBQVVDLFFBQVE7Z0JBQ2xDLE9BQU9BLFNBQVNnQixJQUFJLENBQUN6QjtZQUN2QjtRQUNGO1FBRUFtQixXQUFXO0lBQ2I7SUFFQSxJQUFJTyxRQUFRcEMscURBQVVBLENBQUM7UUFDckJjLElBQUlZLFFBQVFaLEVBQUU7UUFDZEcsTUFBTSxTQUFVTixLQUFLO1lBQ25CaUIsUUFBUVMsSUFBSSxDQUFDMUI7WUFDYm1CO1FBQ0Y7UUFDQVEsYUFBYTtZQUNYLE9BQU81QjtRQUNUO1FBQ0E2QixXQUFXLFNBQVVKLElBQUksRUFBRUssV0FBVyxFQUFFQyxRQUFRO1lBQzlDLElBQUl0QixXQUFXbEIscURBQVVBLENBQUNrQyxNQUFNSyxhQUFhQztZQUM3QzFCLFVBQVUyQixHQUFHLENBQUN2QjtZQUNkQSxTQUFTZ0IsSUFBSSxDQUFDekI7WUFDZCxPQUFPO2dCQUNMaUMsYUFBYTtvQkFDWDVCLFVBQVU2QixNQUFNLENBQUN6QjtnQkFDbkI7WUFDRjtRQUNGO0lBQ0Y7SUFDQSxJQUFJZSxXQUFXO1FBQ2JyQixRQUFRYSxRQUFRYixNQUFNO1FBQ3RCUSxNQUFNZTtRQUNOdEIsSUFBSVksUUFBUVosRUFBRSxJQUFJO1FBQ2xCQyxXQUFXQTtJQUNiO0lBQ0FMLFFBQVFlLFNBQVNMLEtBQUssR0FBR0ssU0FBU0wsS0FBSyxDQUFDYyxZQUFZeEI7SUFDcEQsT0FBTzBCO0FBQ1Q7QUFFbUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90aGUtZ3JpZC0yLy4vbm9kZV9tb2R1bGVzL3hzdGF0ZS9lcy9iZWhhdmlvcnMuanM/NzNlYiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBlcnJvciwgZG9uZUludm9rZSB9IGZyb20gJy4vYWN0aW9ucy5qcyc7XG5pbXBvcnQgeyB0b0FjdG9yUmVmIH0gZnJvbSAnLi9BY3Rvci5qcyc7XG5pbXBvcnQgeyB0b09ic2VydmVyIH0gZnJvbSAnLi91dGlscy5qcyc7XG5cbi8qKlxyXG4gKiBSZXR1cm5zIGFuIGFjdG9yIGJlaGF2aW9yIGZyb20gYSByZWR1Y2VyIGFuZCBpdHMgaW5pdGlhbCBzdGF0ZS5cclxuICpcclxuICogQHBhcmFtIHRyYW5zaXRpb24gVGhlIHB1cmUgcmVkdWNlciB0aGF0IHJldHVybnMgdGhlIG5leHQgc3RhdGUgZ2l2ZW4gdGhlIGN1cnJlbnQgc3RhdGUgYW5kIGV2ZW50LlxyXG4gKiBAcGFyYW0gaW5pdGlhbFN0YXRlIFRoZSBpbml0aWFsIHN0YXRlIG9mIHRoZSByZWR1Y2VyLlxyXG4gKiBAcmV0dXJucyBBbiBhY3RvciBiZWhhdmlvclxyXG4gKi9cblxuZnVuY3Rpb24gZnJvbVJlZHVjZXIodHJhbnNpdGlvbiwgaW5pdGlhbFN0YXRlKSB7XG4gIHJldHVybiB7XG4gICAgdHJhbnNpdGlvbjogdHJhbnNpdGlvbixcbiAgICBpbml0aWFsU3RhdGU6IGluaXRpYWxTdGF0ZVxuICB9O1xufVxuZnVuY3Rpb24gZnJvbVByb21pc2UocHJvbWlzZUZuKSB7XG4gIHZhciBpbml0aWFsU3RhdGUgPSB7XG4gICAgZXJyb3I6IHVuZGVmaW5lZCxcbiAgICBkYXRhOiB1bmRlZmluZWQsXG4gICAgc3RhdHVzOiAncGVuZGluZydcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICB0cmFuc2l0aW9uOiBmdW5jdGlvbiAoc3RhdGUsIGV2ZW50LCBfYSkge1xuICAgICAgdmFyIHBhcmVudCA9IF9hLnBhcmVudCxcbiAgICAgICAgICBpZCA9IF9hLmlkLFxuICAgICAgICAgIG9ic2VydmVycyA9IF9hLm9ic2VydmVycztcblxuICAgICAgc3dpdGNoIChldmVudC50eXBlKSB7XG4gICAgICAgIGNhc2UgJ2Z1bGZpbGwnOlxuICAgICAgICAgIHBhcmVudCA9PT0gbnVsbCB8fCBwYXJlbnQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHBhcmVudC5zZW5kKGRvbmVJbnZva2UoaWQsIGV2ZW50LmRhdGEpKTtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZXJyb3I6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGRhdGE6IGV2ZW50LmRhdGEsXG4gICAgICAgICAgICBzdGF0dXM6ICdmdWxmaWxsZWQnXG4gICAgICAgICAgfTtcblxuICAgICAgICBjYXNlICdyZWplY3QnOlxuICAgICAgICAgIHBhcmVudCA9PT0gbnVsbCB8fCBwYXJlbnQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHBhcmVudC5zZW5kKGVycm9yKGlkLCBldmVudC5lcnJvcikpO1xuICAgICAgICAgIG9ic2VydmVycy5mb3JFYWNoKGZ1bmN0aW9uIChvYnNlcnZlcikge1xuICAgICAgICAgICAgb2JzZXJ2ZXIuZXJyb3IoZXZlbnQuZXJyb3IpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBlcnJvcjogZXZlbnQuZXJyb3IsXG4gICAgICAgICAgICBkYXRhOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBzdGF0dXM6ICdyZWplY3RlZCdcbiAgICAgICAgICB9O1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIHN0YXRlO1xuICAgICAgfVxuICAgIH0sXG4gICAgaW5pdGlhbFN0YXRlOiBpbml0aWFsU3RhdGUsXG4gICAgc3RhcnQ6IGZ1bmN0aW9uIChfYSkge1xuICAgICAgdmFyIHNlbGYgPSBfYS5zZWxmO1xuICAgICAgcHJvbWlzZUZuKCkudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICBzZWxmLnNlbmQoe1xuICAgICAgICAgIHR5cGU6ICdmdWxmaWxsJyxcbiAgICAgICAgICBkYXRhOiBkYXRhXG4gICAgICAgIH0pO1xuICAgICAgfSwgZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgICBzZWxmLnNlbmQoe1xuICAgICAgICAgIHR5cGU6ICdyZWplY3QnLFxuICAgICAgICAgIGVycm9yOiByZWFzb25cbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBpbml0aWFsU3RhdGU7XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gc3Bhd25CZWhhdmlvcihiZWhhdmlvciwgb3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgdmFyIHN0YXRlID0gYmVoYXZpb3IuaW5pdGlhbFN0YXRlO1xuICB2YXIgb2JzZXJ2ZXJzID0gbmV3IFNldCgpO1xuICB2YXIgbWFpbGJveCA9IFtdO1xuICB2YXIgZmx1c2hpbmcgPSBmYWxzZTtcblxuICB2YXIgZmx1c2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGZsdXNoaW5nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZmx1c2hpbmcgPSB0cnVlO1xuXG4gICAgd2hpbGUgKG1haWxib3gubGVuZ3RoID4gMCkge1xuICAgICAgdmFyIGV2ZW50XzEgPSBtYWlsYm94LnNoaWZ0KCk7XG4gICAgICBzdGF0ZSA9IGJlaGF2aW9yLnRyYW5zaXRpb24oc3RhdGUsIGV2ZW50XzEsIGFjdG9yQ3R4KTtcbiAgICAgIG9ic2VydmVycy5mb3JFYWNoKGZ1bmN0aW9uIChvYnNlcnZlcikge1xuICAgICAgICByZXR1cm4gb2JzZXJ2ZXIubmV4dChzdGF0ZSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmbHVzaGluZyA9IGZhbHNlO1xuICB9O1xuXG4gIHZhciBhY3RvciA9IHRvQWN0b3JSZWYoe1xuICAgIGlkOiBvcHRpb25zLmlkLFxuICAgIHNlbmQ6IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgbWFpbGJveC5wdXNoKGV2ZW50KTtcbiAgICAgIGZsdXNoKCk7XG4gICAgfSxcbiAgICBnZXRTbmFwc2hvdDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHN0YXRlO1xuICAgIH0sXG4gICAgc3Vic2NyaWJlOiBmdW5jdGlvbiAobmV4dCwgaGFuZGxlRXJyb3IsIGNvbXBsZXRlKSB7XG4gICAgICB2YXIgb2JzZXJ2ZXIgPSB0b09ic2VydmVyKG5leHQsIGhhbmRsZUVycm9yLCBjb21wbGV0ZSk7XG4gICAgICBvYnNlcnZlcnMuYWRkKG9ic2VydmVyKTtcbiAgICAgIG9ic2VydmVyLm5leHQoc3RhdGUpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdW5zdWJzY3JpYmU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBvYnNlcnZlcnMuZGVsZXRlKG9ic2VydmVyKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG4gIH0pO1xuICB2YXIgYWN0b3JDdHggPSB7XG4gICAgcGFyZW50OiBvcHRpb25zLnBhcmVudCxcbiAgICBzZWxmOiBhY3RvcixcbiAgICBpZDogb3B0aW9ucy5pZCB8fCAnYW5vbnltb3VzJyxcbiAgICBvYnNlcnZlcnM6IG9ic2VydmVyc1xuICB9O1xuICBzdGF0ZSA9IGJlaGF2aW9yLnN0YXJ0ID8gYmVoYXZpb3Iuc3RhcnQoYWN0b3JDdHgpIDogc3RhdGU7XG4gIHJldHVybiBhY3Rvcjtcbn1cblxuZXhwb3J0IHsgZnJvbVByb21pc2UsIGZyb21SZWR1Y2VyLCBzcGF3bkJlaGF2aW9yIH07XG4iXSwibmFtZXMiOlsiZXJyb3IiLCJkb25lSW52b2tlIiwidG9BY3RvclJlZiIsInRvT2JzZXJ2ZXIiLCJmcm9tUmVkdWNlciIsInRyYW5zaXRpb24iLCJpbml0aWFsU3RhdGUiLCJmcm9tUHJvbWlzZSIsInByb21pc2VGbiIsInVuZGVmaW5lZCIsImRhdGEiLCJzdGF0dXMiLCJzdGF0ZSIsImV2ZW50IiwiX2EiLCJwYXJlbnQiLCJpZCIsIm9ic2VydmVycyIsInR5cGUiLCJzZW5kIiwiZm9yRWFjaCIsIm9ic2VydmVyIiwic3RhcnQiLCJzZWxmIiwidGhlbiIsInJlYXNvbiIsInNwYXduQmVoYXZpb3IiLCJiZWhhdmlvciIsIm9wdGlvbnMiLCJTZXQiLCJtYWlsYm94IiwiZmx1c2hpbmciLCJmbHVzaCIsImxlbmd0aCIsImV2ZW50XzEiLCJzaGlmdCIsImFjdG9yQ3R4IiwibmV4dCIsImFjdG9yIiwicHVzaCIsImdldFNuYXBzaG90Iiwic3Vic2NyaWJlIiwiaGFuZGxlRXJyb3IiLCJjb21wbGV0ZSIsImFkZCIsInVuc3Vic2NyaWJlIiwiZGVsZXRlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xstate/es/behaviors.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xstate/es/constants.js":
/*!*********************************************!*\
  !*** ./node_modules/xstate/es/constants.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_GUARD_TYPE: () => (/* binding */ DEFAULT_GUARD_TYPE),\n/* harmony export */   EMPTY_ACTIVITY_MAP: () => (/* binding */ EMPTY_ACTIVITY_MAP),\n/* harmony export */   STATE_DELIMITER: () => (/* binding */ STATE_DELIMITER),\n/* harmony export */   TARGETLESS_KEY: () => (/* binding */ TARGETLESS_KEY)\n/* harmony export */ });\nvar STATE_DELIMITER = \".\";\nvar EMPTY_ACTIVITY_MAP = {};\nvar DEFAULT_GUARD_TYPE = \"xstate.guard\";\nvar TARGETLESS_KEY = \"\";\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMveHN0YXRlL2VzL2NvbnN0YW50cy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsSUFBSUEsa0JBQWtCO0FBQ3RCLElBQUlDLHFCQUFxQixDQUFDO0FBQzFCLElBQUlDLHFCQUFxQjtBQUN6QixJQUFJQyxpQkFBaUI7QUFFOEQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90aGUtZ3JpZC0yLy4vbm9kZV9tb2R1bGVzL3hzdGF0ZS9lcy9jb25zdGFudHMuanM/ZTI5NCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgU1RBVEVfREVMSU1JVEVSID0gJy4nO1xudmFyIEVNUFRZX0FDVElWSVRZX01BUCA9IHt9O1xudmFyIERFRkFVTFRfR1VBUkRfVFlQRSA9ICd4c3RhdGUuZ3VhcmQnO1xudmFyIFRBUkdFVExFU1NfS0VZID0gJyc7XG5cbmV4cG9ydCB7IERFRkFVTFRfR1VBUkRfVFlQRSwgRU1QVFlfQUNUSVZJVFlfTUFQLCBTVEFURV9ERUxJTUlURVIsIFRBUkdFVExFU1NfS0VZIH07XG4iXSwibmFtZXMiOlsiU1RBVEVfREVMSU1JVEVSIiwiRU1QVFlfQUNUSVZJVFlfTUFQIiwiREVGQVVMVF9HVUFSRF9UWVBFIiwiVEFSR0VUTEVTU19LRVkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xstate/es/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xstate/es/devTools.js":
/*!********************************************!*\
  !*** ./node_modules/xstate/es/devTools.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getGlobal: () => (/* binding */ getGlobal),\n/* harmony export */   registerService: () => (/* binding */ registerService)\n/* harmony export */ });\n/* harmony import */ var _environment_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./environment.js */ \"(ssr)/./node_modules/xstate/es/environment.js\");\n\nfunction getGlobal() {\n    if (typeof globalThis !== \"undefined\") {\n        return globalThis;\n    }\n    if (typeof self !== \"undefined\") {\n        return self;\n    }\n    if (false) {}\n    if (typeof global !== \"undefined\") {\n        return global;\n    }\n    if (!_environment_js__WEBPACK_IMPORTED_MODULE_0__.IS_PRODUCTION) {\n        console.warn(\"XState could not find a global object in this environment. Please let the maintainers know and raise an issue here: https://github.com/statelyai/xstate/issues\");\n    }\n}\nfunction getDevTools() {\n    var global1 = getGlobal();\n    if (global1 && \"__xstate__\" in global1) {\n        return global1.__xstate__;\n    }\n    return undefined;\n}\nfunction registerService(service) {\n    if (!getGlobal()) {\n        return;\n    }\n    var devTools = getDevTools();\n    if (devTools) {\n        devTools.register(service);\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMveHN0YXRlL2VzL2RldlRvb2xzLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFpRDtBQUVqRCxTQUFTQztJQUNQLElBQUksT0FBT0MsZUFBZSxhQUFhO1FBQ3JDLE9BQU9BO0lBQ1Q7SUFFQSxJQUFJLE9BQU9DLFNBQVMsYUFBYTtRQUMvQixPQUFPQTtJQUNUO0lBRUEsSUFBSSxLQUFrQixFQUFhLEVBRWxDO0lBRUQsSUFBSSxPQUFPRSxXQUFXLGFBQWE7UUFDakMsT0FBT0E7SUFDVDtJQUVBLElBQUksQ0FBQ0wsMERBQWFBLEVBQUU7UUFDbEJNLFFBQVFDLElBQUksQ0FBQztJQUNmO0FBQ0Y7QUFFQSxTQUFTQztJQUNQLElBQUlILFVBQVNKO0lBRWIsSUFBSUksV0FBVSxnQkFBZ0JBLFNBQVE7UUFDcEMsT0FBT0EsUUFBT0ksVUFBVTtJQUMxQjtJQUVBLE9BQU9DO0FBQ1Q7QUFFQSxTQUFTQyxnQkFBZ0JDLE9BQU87SUFDOUIsSUFBSSxDQUFDWCxhQUFhO1FBQ2hCO0lBQ0Y7SUFFQSxJQUFJWSxXQUFXTDtJQUVmLElBQUlLLFVBQVU7UUFDWkEsU0FBU0MsUUFBUSxDQUFDRjtJQUNwQjtBQUNGO0FBRXNDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGhlLWdyaWQtMi8uL25vZGVfbW9kdWxlcy94c3RhdGUvZXMvZGV2VG9vbHMuanM/N2JiYyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJU19QUk9EVUNUSU9OIH0gZnJvbSAnLi9lbnZpcm9ubWVudC5qcyc7XG5cbmZ1bmN0aW9uIGdldEdsb2JhbCgpIHtcbiAgaWYgKHR5cGVvZiBnbG9iYWxUaGlzICE9PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBnbG9iYWxUaGlzO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBzZWxmO1xuICB9XG5cbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIHdpbmRvdztcbiAgfVxuXG4gIGlmICh0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBnbG9iYWw7XG4gIH1cblxuICBpZiAoIUlTX1BST0RVQ1RJT04pIHtcbiAgICBjb25zb2xlLndhcm4oJ1hTdGF0ZSBjb3VsZCBub3QgZmluZCBhIGdsb2JhbCBvYmplY3QgaW4gdGhpcyBlbnZpcm9ubWVudC4gUGxlYXNlIGxldCB0aGUgbWFpbnRhaW5lcnMga25vdyBhbmQgcmFpc2UgYW4gaXNzdWUgaGVyZTogaHR0cHM6Ly9naXRodWIuY29tL3N0YXRlbHlhaS94c3RhdGUvaXNzdWVzJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0RGV2VG9vbHMoKSB7XG4gIHZhciBnbG9iYWwgPSBnZXRHbG9iYWwoKTtcblxuICBpZiAoZ2xvYmFsICYmICdfX3hzdGF0ZV9fJyBpbiBnbG9iYWwpIHtcbiAgICByZXR1cm4gZ2xvYmFsLl9feHN0YXRlX187XG4gIH1cblxuICByZXR1cm4gdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiByZWdpc3RlclNlcnZpY2Uoc2VydmljZSkge1xuICBpZiAoIWdldEdsb2JhbCgpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGRldlRvb2xzID0gZ2V0RGV2VG9vbHMoKTtcblxuICBpZiAoZGV2VG9vbHMpIHtcbiAgICBkZXZUb29scy5yZWdpc3RlcihzZXJ2aWNlKTtcbiAgfVxufVxuXG5leHBvcnQgeyBnZXRHbG9iYWwsIHJlZ2lzdGVyU2VydmljZSB9O1xuIl0sIm5hbWVzIjpbIklTX1BST0RVQ1RJT04iLCJnZXRHbG9iYWwiLCJnbG9iYWxUaGlzIiwic2VsZiIsIndpbmRvdyIsImdsb2JhbCIsImNvbnNvbGUiLCJ3YXJuIiwiZ2V0RGV2VG9vbHMiLCJfX3hzdGF0ZV9fIiwidW5kZWZpbmVkIiwicmVnaXN0ZXJTZXJ2aWNlIiwic2VydmljZSIsImRldlRvb2xzIiwicmVnaXN0ZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xstate/es/devTools.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xstate/es/environment.js":
/*!***********************************************!*\
  !*** ./node_modules/xstate/es/environment.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IS_PRODUCTION: () => (/* binding */ IS_PRODUCTION)\n/* harmony export */ });\nvar IS_PRODUCTION = \"development\" === \"production\";\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMveHN0YXRlL2VzL2Vudmlyb25tZW50LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxJQUFJQSxnQkFBZ0JDLGtCQUF5QjtBQUVwQiIsInNvdXJjZXMiOlsid2VicGFjazovL3RoZS1ncmlkLTIvLi9ub2RlX21vZHVsZXMveHN0YXRlL2VzL2Vudmlyb25tZW50LmpzPzE1ODEiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIElTX1BST0RVQ1RJT04gPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nO1xuXG5leHBvcnQgeyBJU19QUk9EVUNUSU9OIH07XG4iXSwibmFtZXMiOlsiSVNfUFJPRFVDVElPTiIsInByb2Nlc3MiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xstate/es/environment.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xstate/es/index.js":
/*!*****************************************!*\
  !*** ./node_modules/xstate/es/index.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ActionTypes: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_10__.ActionTypes),\n/* harmony export */   Interpreter: () => (/* reexport safe */ _interpreter_js__WEBPACK_IMPORTED_MODULE_2__.Interpreter),\n/* harmony export */   InterpreterStatus: () => (/* reexport safe */ _interpreter_js__WEBPACK_IMPORTED_MODULE_2__.InterpreterStatus),\n/* harmony export */   Machine: () => (/* reexport safe */ _Machine_js__WEBPACK_IMPORTED_MODULE_3__.Machine),\n/* harmony export */   SpecialTargets: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_10__.SpecialTargets),\n/* harmony export */   State: () => (/* reexport safe */ _State_js__WEBPACK_IMPORTED_MODULE_7__.State),\n/* harmony export */   StateNode: () => (/* reexport safe */ _StateNode_js__WEBPACK_IMPORTED_MODULE_8__.StateNode),\n/* harmony export */   actions: () => (/* reexport module object */ _actions_js__WEBPACK_IMPORTED_MODULE_0__),\n/* harmony export */   assign: () => (/* binding */ assign),\n/* harmony export */   cancel: () => (/* binding */ cancel),\n/* harmony export */   choose: () => (/* binding */ choose),\n/* harmony export */   createMachine: () => (/* reexport safe */ _Machine_js__WEBPACK_IMPORTED_MODULE_3__.createMachine),\n/* harmony export */   createSchema: () => (/* reexport safe */ _schema_js__WEBPACK_IMPORTED_MODULE_6__.createSchema),\n/* harmony export */   doneInvoke: () => (/* binding */ doneInvoke),\n/* harmony export */   forwardTo: () => (/* binding */ forwardTo),\n/* harmony export */   interpret: () => (/* reexport safe */ _interpreter_js__WEBPACK_IMPORTED_MODULE_2__.interpret),\n/* harmony export */   log: () => (/* binding */ log),\n/* harmony export */   mapState: () => (/* reexport safe */ _mapState_js__WEBPACK_IMPORTED_MODULE_4__.mapState),\n/* harmony export */   matchState: () => (/* reexport safe */ _match_js__WEBPACK_IMPORTED_MODULE_5__.matchState),\n/* harmony export */   matchesState: () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_11__.matchesState),\n/* harmony export */   pure: () => (/* binding */ pure),\n/* harmony export */   raise: () => (/* binding */ raise),\n/* harmony export */   send: () => (/* binding */ send),\n/* harmony export */   sendParent: () => (/* binding */ sendParent),\n/* harmony export */   sendTo: () => (/* binding */ sendTo),\n/* harmony export */   sendUpdate: () => (/* binding */ sendUpdate),\n/* harmony export */   spawn: () => (/* reexport safe */ _interpreter_js__WEBPACK_IMPORTED_MODULE_2__.spawn),\n/* harmony export */   spawnBehavior: () => (/* reexport safe */ _behaviors_js__WEBPACK_IMPORTED_MODULE_9__.spawnBehavior),\n/* harmony export */   stop: () => (/* binding */ stop),\n/* harmony export */   t: () => (/* reexport safe */ _schema_js__WEBPACK_IMPORTED_MODULE_6__.t),\n/* harmony export */   toActorRef: () => (/* reexport safe */ _Actor_js__WEBPACK_IMPORTED_MODULE_1__.toActorRef),\n/* harmony export */   toEventObject: () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_11__.toEventObject),\n/* harmony export */   toObserver: () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_11__.toObserver),\n/* harmony export */   toSCXMLEvent: () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_11__.toSCXMLEvent)\n/* harmony export */ });\n/* harmony import */ var _actions_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./actions.js */ \"(ssr)/./node_modules/xstate/es/actions.js\");\n/* harmony import */ var _Actor_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Actor.js */ \"(ssr)/./node_modules/xstate/es/Actor.js\");\n/* harmony import */ var _interpreter_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./interpreter.js */ \"(ssr)/./node_modules/xstate/es/interpreter.js\");\n/* harmony import */ var _Machine_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Machine.js */ \"(ssr)/./node_modules/xstate/es/Machine.js\");\n/* harmony import */ var _mapState_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./mapState.js */ \"(ssr)/./node_modules/xstate/es/mapState.js\");\n/* harmony import */ var _match_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./match.js */ \"(ssr)/./node_modules/xstate/es/match.js\");\n/* harmony import */ var _schema_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./schema.js */ \"(ssr)/./node_modules/xstate/es/schema.js\");\n/* harmony import */ var _State_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./State.js */ \"(ssr)/./node_modules/xstate/es/State.js\");\n/* harmony import */ var _StateNode_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./StateNode.js */ \"(ssr)/./node_modules/xstate/es/StateNode.js\");\n/* harmony import */ var _behaviors_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./behaviors.js */ \"(ssr)/./node_modules/xstate/es/behaviors.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./types.js */ \"(ssr)/./node_modules/xstate/es/types.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/xstate/es/utils.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar assign = _actions_js__WEBPACK_IMPORTED_MODULE_0__.assign, cancel = _actions_js__WEBPACK_IMPORTED_MODULE_0__.cancel, send = _actions_js__WEBPACK_IMPORTED_MODULE_0__.send, sendTo = _actions_js__WEBPACK_IMPORTED_MODULE_0__.sendTo, sendParent = _actions_js__WEBPACK_IMPORTED_MODULE_0__.sendParent, sendUpdate = _actions_js__WEBPACK_IMPORTED_MODULE_0__.sendUpdate, forwardTo = _actions_js__WEBPACK_IMPORTED_MODULE_0__.forwardTo, doneInvoke = _actions_js__WEBPACK_IMPORTED_MODULE_0__.doneInvoke, raise = _actions_js__WEBPACK_IMPORTED_MODULE_0__.raise, log = _actions_js__WEBPACK_IMPORTED_MODULE_0__.log, pure = _actions_js__WEBPACK_IMPORTED_MODULE_0__.pure, choose = _actions_js__WEBPACK_IMPORTED_MODULE_0__.choose, stop = _actions_js__WEBPACK_IMPORTED_MODULE_0__.stop;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMveHN0YXRlL2VzL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBNFM7QUFDcFE7QUFDckI7QUFDcUI7QUFDNEM7QUFDOUI7QUFDYjtBQUNEO0FBQ007QUFDWDtBQUNRO0FBQ0k7QUFDVTtBQUMwQjtBQUVuRixJQUFJQSxTQUFTQywrQ0FBUUEsRUFDakJDLFNBQVNDLCtDQUFRQSxFQUNqQkMsT0FBT0MsNkNBQU1BLEVBQ2JDLFNBQVNDLCtDQUFRQSxFQUNqQkMsYUFBYUMsbURBQVlBLEVBQ3pCQyxhQUFhQyxtREFBWUEsRUFDekJDLFlBQVlDLGtEQUFXQSxFQUN2QkMsYUFBYUMsbURBQVlBLEVBQ3pCQyxRQUFRQyw4Q0FBT0EsRUFDZkMsTUFBTUMsNENBQUtBLEVBQ1hDLE9BQU9DLDZDQUFNQSxFQUNiQyxTQUFTQywrQ0FBUUEsRUFDakJDLE9BQU9DLDZDQUFNQTtBQUVzRyIsInNvdXJjZXMiOlsid2VicGFjazovL3RoZS1ncmlkLTIvLi9ub2RlX21vZHVsZXMveHN0YXRlL2VzL2luZGV4LmpzPzg4N2EiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYXNzaWduIGFzIGFzc2lnbiQxLCBjYW5jZWwgYXMgY2FuY2VsJDEsIHNlbmQgYXMgc2VuZCQxLCBzZW5kVG8gYXMgc2VuZFRvJDEsIHNlbmRQYXJlbnQgYXMgc2VuZFBhcmVudCQxLCBzZW5kVXBkYXRlIGFzIHNlbmRVcGRhdGUkMSwgZm9yd2FyZFRvIGFzIGZvcndhcmRUbyQxLCBkb25lSW52b2tlIGFzIGRvbmVJbnZva2UkMSwgcmFpc2UgYXMgcmFpc2UkMSwgbG9nIGFzIGxvZyQxLCBwdXJlIGFzIHB1cmUkMSwgY2hvb3NlIGFzIGNob29zZSQxLCBzdG9wIGFzIHN0b3AkMSB9IGZyb20gJy4vYWN0aW9ucy5qcyc7XG5pbXBvcnQgKiBhcyBhY3Rpb25zIGZyb20gJy4vYWN0aW9ucy5qcyc7XG5leHBvcnQgeyBhY3Rpb25zIH07XG5leHBvcnQgeyB0b0FjdG9yUmVmIH0gZnJvbSAnLi9BY3Rvci5qcyc7XG5leHBvcnQgeyBJbnRlcnByZXRlciwgSW50ZXJwcmV0ZXJTdGF0dXMsIGludGVycHJldCwgc3Bhd24gfSBmcm9tICcuL2ludGVycHJldGVyLmpzJztcbmV4cG9ydCB7IE1hY2hpbmUsIGNyZWF0ZU1hY2hpbmUgfSBmcm9tICcuL01hY2hpbmUuanMnO1xuZXhwb3J0IHsgbWFwU3RhdGUgfSBmcm9tICcuL21hcFN0YXRlLmpzJztcbmV4cG9ydCB7IG1hdGNoU3RhdGUgfSBmcm9tICcuL21hdGNoLmpzJztcbmV4cG9ydCB7IGNyZWF0ZVNjaGVtYSwgdCB9IGZyb20gJy4vc2NoZW1hLmpzJztcbmV4cG9ydCB7IFN0YXRlIH0gZnJvbSAnLi9TdGF0ZS5qcyc7XG5leHBvcnQgeyBTdGF0ZU5vZGUgfSBmcm9tICcuL1N0YXRlTm9kZS5qcyc7XG5leHBvcnQgeyBzcGF3bkJlaGF2aW9yIH0gZnJvbSAnLi9iZWhhdmlvcnMuanMnO1xuZXhwb3J0IHsgQWN0aW9uVHlwZXMsIFNwZWNpYWxUYXJnZXRzIH0gZnJvbSAnLi90eXBlcy5qcyc7XG5leHBvcnQgeyBtYXRjaGVzU3RhdGUsIHRvRXZlbnRPYmplY3QsIHRvT2JzZXJ2ZXIsIHRvU0NYTUxFdmVudCB9IGZyb20gJy4vdXRpbHMuanMnO1xuXG52YXIgYXNzaWduID0gYXNzaWduJDEsXG4gICAgY2FuY2VsID0gY2FuY2VsJDEsXG4gICAgc2VuZCA9IHNlbmQkMSxcbiAgICBzZW5kVG8gPSBzZW5kVG8kMSxcbiAgICBzZW5kUGFyZW50ID0gc2VuZFBhcmVudCQxLFxuICAgIHNlbmRVcGRhdGUgPSBzZW5kVXBkYXRlJDEsXG4gICAgZm9yd2FyZFRvID0gZm9yd2FyZFRvJDEsXG4gICAgZG9uZUludm9rZSA9IGRvbmVJbnZva2UkMSxcbiAgICByYWlzZSA9IHJhaXNlJDEsXG4gICAgbG9nID0gbG9nJDEsXG4gICAgcHVyZSA9IHB1cmUkMSxcbiAgICBjaG9vc2UgPSBjaG9vc2UkMSxcbiAgICBzdG9wID0gc3RvcCQxO1xuXG5leHBvcnQgeyBhc3NpZ24sIGNhbmNlbCwgY2hvb3NlLCBkb25lSW52b2tlLCBmb3J3YXJkVG8sIGxvZywgcHVyZSwgcmFpc2UsIHNlbmQsIHNlbmRQYXJlbnQsIHNlbmRUbywgc2VuZFVwZGF0ZSwgc3RvcCB9O1xuIl0sIm5hbWVzIjpbImFzc2lnbiIsImFzc2lnbiQxIiwiY2FuY2VsIiwiY2FuY2VsJDEiLCJzZW5kIiwic2VuZCQxIiwic2VuZFRvIiwic2VuZFRvJDEiLCJzZW5kUGFyZW50Iiwic2VuZFBhcmVudCQxIiwic2VuZFVwZGF0ZSIsInNlbmRVcGRhdGUkMSIsImZvcndhcmRUbyIsImZvcndhcmRUbyQxIiwiZG9uZUludm9rZSIsImRvbmVJbnZva2UkMSIsInJhaXNlIiwicmFpc2UkMSIsImxvZyIsImxvZyQxIiwicHVyZSIsInB1cmUkMSIsImNob29zZSIsImNob29zZSQxIiwic3RvcCIsInN0b3AkMSIsImFjdGlvbnMiLCJ0b0FjdG9yUmVmIiwiSW50ZXJwcmV0ZXIiLCJJbnRlcnByZXRlclN0YXR1cyIsImludGVycHJldCIsInNwYXduIiwiTWFjaGluZSIsImNyZWF0ZU1hY2hpbmUiLCJtYXBTdGF0ZSIsIm1hdGNoU3RhdGUiLCJjcmVhdGVTY2hlbWEiLCJ0IiwiU3RhdGUiLCJTdGF0ZU5vZGUiLCJzcGF3bkJlaGF2aW9yIiwiQWN0aW9uVHlwZXMiLCJTcGVjaWFsVGFyZ2V0cyIsIm1hdGNoZXNTdGF0ZSIsInRvRXZlbnRPYmplY3QiLCJ0b09ic2VydmVyIiwidG9TQ1hNTEV2ZW50Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xstate/es/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xstate/es/interpreter.js":
/*!***********************************************!*\
  !*** ./node_modules/xstate/es/interpreter.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Interpreter: () => (/* binding */ Interpreter),\n/* harmony export */   InterpreterStatus: () => (/* binding */ InterpreterStatus),\n/* harmony export */   interpret: () => (/* binding */ interpret),\n/* harmony export */   spawn: () => (/* binding */ spawn)\n/* harmony export */ });\n/* harmony import */ var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./_virtual/_tslib.js */ \"(ssr)/./node_modules/xstate/es/_virtual/_tslib.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./types.js */ \"(ssr)/./node_modules/xstate/es/types.js\");\n/* harmony import */ var _State_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./State.js */ \"(ssr)/./node_modules/xstate/es/State.js\");\n/* harmony import */ var _actionTypes_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./actionTypes.js */ \"(ssr)/./node_modules/xstate/es/actionTypes.js\");\n/* harmony import */ var _actions_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./actions.js */ \"(ssr)/./node_modules/xstate/es/actions.js\");\n/* harmony import */ var _environment_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./environment.js */ \"(ssr)/./node_modules/xstate/es/environment.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/xstate/es/utils.js\");\n/* harmony import */ var _scheduler_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./scheduler.js */ \"(ssr)/./node_modules/xstate/es/scheduler.js\");\n/* harmony import */ var _Actor_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./Actor.js */ \"(ssr)/./node_modules/xstate/es/Actor.js\");\n/* harmony import */ var _registry_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./registry.js */ \"(ssr)/./node_modules/xstate/es/registry.js\");\n/* harmony import */ var _devTools_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./devTools.js */ \"(ssr)/./node_modules/xstate/es/devTools.js\");\n/* harmony import */ var _serviceScope_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./serviceScope.js */ \"(ssr)/./node_modules/xstate/es/serviceScope.js\");\n/* harmony import */ var _behaviors_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./behaviors.js */ \"(ssr)/./node_modules/xstate/es/behaviors.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar DEFAULT_SPAWN_OPTIONS = {\n    sync: false,\n    autoForward: false\n};\nvar InterpreterStatus;\n(function(InterpreterStatus) {\n    InterpreterStatus[InterpreterStatus[\"NotStarted\"] = 0] = \"NotStarted\";\n    InterpreterStatus[InterpreterStatus[\"Running\"] = 1] = \"Running\";\n    InterpreterStatus[InterpreterStatus[\"Stopped\"] = 2] = \"Stopped\";\n})(InterpreterStatus || (InterpreterStatus = {}));\nvar Interpreter = /*#__PURE__*/ /** @class */ function() {\n    /**\r\n   * Creates a new Interpreter instance (i.e., service) for the given machine with the provided options, if any.\r\n   *\r\n   * @param machine The machine to be interpreted\r\n   * @param options Interpreter options\r\n   */ function Interpreter(machine, options) {\n        if (options === void 0) {\n            options = Interpreter.defaultOptions;\n        }\n        var _this = this;\n        this.machine = machine;\n        this.delayedEventsMap = {};\n        this.listeners = new Set();\n        this.contextListeners = new Set();\n        this.stopListeners = new Set();\n        this.doneListeners = new Set();\n        this.eventListeners = new Set();\n        this.sendListeners = new Set();\n        /**\r\n     * Whether the service is started.\r\n     */ this.initialized = false;\n        this.status = InterpreterStatus.NotStarted;\n        this.children = new Map();\n        this.forwardTo = new Set();\n        this._outgoingQueue = [];\n        /**\r\n     * Alias for Interpreter.prototype.start\r\n     */ this.init = this.start;\n        /**\r\n     * Sends an event to the running interpreter to trigger a transition.\r\n     *\r\n     * An array of events (batched) can be sent as well, which will send all\r\n     * batched events to the running interpreter. The listeners will be\r\n     * notified only **once** when all events are processed.\r\n     *\r\n     * @param event The event(s) to send\r\n     */ this.send = function(event1, payload) {\n            if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isArray)(event1)) {\n                _this.batch(event1);\n                return _this.state;\n            }\n            var _event = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toSCXMLEvent)((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toEventObject)(event1, payload));\n            if (_this.status === InterpreterStatus.Stopped) {\n                // do nothing\n                if (!_environment_js__WEBPACK_IMPORTED_MODULE_1__.IS_PRODUCTION) {\n                    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.warn)(false, 'Event \"'.concat(_event.name, '\" was sent to stopped service \"').concat(_this.machine.id, '\". This service has already reached its final state, and will not transition.\\nEvent: ').concat(JSON.stringify(_event.data)));\n                }\n                return _this.state;\n            }\n            if (_this.status !== InterpreterStatus.Running && !_this.options.deferEvents) {\n                throw new Error('Event \"'.concat(_event.name, '\" was sent to uninitialized service \"').concat(_this.machine.id // tslint:disable-next-line:max-line-length\n                , '\". Make sure .start() is called for this service, or set { deferEvents: true } in the service options.\\nEvent: ').concat(JSON.stringify(_event.data)));\n            }\n            _this.scheduler.schedule(function() {\n                // Forward copy of event to child actors\n                _this.forward(_event);\n                var nextState = _this._nextState(_event);\n                _this.update(nextState, _event);\n            });\n            return _this._state; // TODO: deprecate (should return void)\n        // tslint:disable-next-line:semicolon\n        };\n        this.sendTo = function(event1, to, immediate) {\n            var isParent = _this.parent && (to === _types_js__WEBPACK_IMPORTED_MODULE_2__.SpecialTargets.Parent || _this.parent.id === to);\n            var target = isParent ? _this.parent : (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(to) ? to === _types_js__WEBPACK_IMPORTED_MODULE_2__.SpecialTargets.Internal ? _this : _this.children.get(to) || _registry_js__WEBPACK_IMPORTED_MODULE_3__.registry.get(to) : (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isActor)(to) ? to : undefined;\n            if (!target) {\n                if (!isParent) {\n                    throw new Error(\"Unable to send event to child '\".concat(to, \"' from service '\").concat(_this.id, \"'.\"));\n                } // tslint:disable-next-line:no-console\n                if (!_environment_js__WEBPACK_IMPORTED_MODULE_1__.IS_PRODUCTION) {\n                    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.warn)(false, \"Service '\".concat(_this.id, \"' has no parent: unable to send event \").concat(event1.type));\n                }\n                return;\n            }\n            if (\"machine\" in target) {\n                // perhaps those events should be rejected in the parent\n                // but atm it doesn't have easy access to all of the information that is required to do it reliably\n                if (_this.status !== InterpreterStatus.Stopped || _this.parent !== target || // we need to send events to the parent from exit handlers of a machine that reached its final state\n                _this.state.done) {\n                    // Send SCXML events to machines\n                    var scxmlEvent = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)({}, event1), {\n                        name: event1.name === _actionTypes_js__WEBPACK_IMPORTED_MODULE_5__.error ? \"\".concat((0,_actions_js__WEBPACK_IMPORTED_MODULE_6__.error)(_this.id)) : event1.name,\n                        origin: _this.sessionId\n                    });\n                    if (!immediate && _this.machine.config.predictableActionArguments) {\n                        _this._outgoingQueue.push([\n                            target,\n                            scxmlEvent\n                        ]);\n                    } else {\n                        target.send(scxmlEvent);\n                    }\n                }\n            } else {\n                // Send normal events to other targets\n                if (!immediate && _this.machine.config.predictableActionArguments) {\n                    _this._outgoingQueue.push([\n                        target,\n                        event1.data\n                    ]);\n                } else {\n                    target.send(event1.data);\n                }\n            }\n        };\n        this._exec = function(action, context, _event, actionFunctionMap) {\n            if (actionFunctionMap === void 0) {\n                actionFunctionMap = _this.machine.options.actions;\n            }\n            var actionOrExec = action.exec || (0,_actions_js__WEBPACK_IMPORTED_MODULE_6__.getActionFunction)(action.type, actionFunctionMap);\n            var exec = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isFunction)(actionOrExec) ? actionOrExec : actionOrExec ? actionOrExec.exec : action.exec;\n            if (exec) {\n                try {\n                    return exec(context, _event.data, !_this.machine.config.predictableActionArguments ? {\n                        action: action,\n                        state: _this.state,\n                        _event: _event\n                    } : {\n                        action: action,\n                        _event: _event\n                    });\n                } catch (err) {\n                    if (_this.parent) {\n                        _this.parent.send({\n                            type: \"xstate.error\",\n                            data: err\n                        });\n                    }\n                    throw err;\n                }\n            }\n            switch(action.type){\n                case _actionTypes_js__WEBPACK_IMPORTED_MODULE_5__.raise:\n                    {\n                        // if raise action reached the interpreter then it's a delayed one\n                        var sendAction_1 = action;\n                        _this.defer(sendAction_1);\n                        break;\n                    }\n                case _actionTypes_js__WEBPACK_IMPORTED_MODULE_5__.send:\n                    var sendAction = action;\n                    if (typeof sendAction.delay === \"number\") {\n                        _this.defer(sendAction);\n                        return;\n                    } else {\n                        if (sendAction.to) {\n                            _this.sendTo(sendAction._event, sendAction.to, _event === _actions_js__WEBPACK_IMPORTED_MODULE_6__.initEvent);\n                        } else {\n                            _this.send(sendAction._event);\n                        }\n                    }\n                    break;\n                case _actionTypes_js__WEBPACK_IMPORTED_MODULE_5__.cancel:\n                    _this.cancel(action.sendId);\n                    break;\n                case _actionTypes_js__WEBPACK_IMPORTED_MODULE_5__.start:\n                    {\n                        if (_this.status !== InterpreterStatus.Running) {\n                            return;\n                        }\n                        var activity = action.activity; // If the activity will be stopped right after it's started\n                        // (such as in transient states)\n                        // don't bother starting the activity.\n                        if (!_this.machine.config.predictableActionArguments && !_this.state.activities[activity.id || activity.type]) {\n                            break;\n                        } // Invoked services\n                        if (activity.type === _types_js__WEBPACK_IMPORTED_MODULE_2__.ActionTypes.Invoke) {\n                            var invokeSource = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toInvokeSource)(activity.src);\n                            var serviceCreator = _this.machine.options.services ? _this.machine.options.services[invokeSource.type] : undefined;\n                            var id = activity.id, data = activity.data;\n                            if (!_environment_js__WEBPACK_IMPORTED_MODULE_1__.IS_PRODUCTION) {\n                                (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.warn)(!(\"forward\" in activity), \"`forward` property is deprecated (found in invocation of '\".concat(activity.src, \"' in in machine '\").concat(_this.machine.id, \"'). \") + \"Please use `autoForward` instead.\");\n                            }\n                            var autoForward = \"autoForward\" in activity ? activity.autoForward : !!activity.forward;\n                            if (!serviceCreator) {\n                                // tslint:disable-next-line:no-console\n                                if (!_environment_js__WEBPACK_IMPORTED_MODULE_1__.IS_PRODUCTION) {\n                                    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.warn)(false, \"No service found for invocation '\".concat(activity.src, \"' in machine '\").concat(_this.machine.id, \"'.\"));\n                                }\n                                return;\n                            }\n                            var resolvedData = data ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.mapContext)(data, context, _event) : undefined;\n                            if (typeof serviceCreator === \"string\") {\n                                // TODO: warn\n                                return;\n                            }\n                            var source = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isFunction)(serviceCreator) ? serviceCreator(context, _event.data, {\n                                data: resolvedData,\n                                src: invokeSource,\n                                meta: activity.meta\n                            }) : serviceCreator;\n                            if (!source) {\n                                // TODO: warn?\n                                return;\n                            }\n                            var options = void 0;\n                            if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isMachine)(source)) {\n                                source = resolvedData ? source.withContext(resolvedData) : source;\n                                options = {\n                                    autoForward: autoForward\n                                };\n                            }\n                            _this.spawn(source, id, options);\n                        } else {\n                            _this.spawnActivity(activity);\n                        }\n                        break;\n                    }\n                case _actionTypes_js__WEBPACK_IMPORTED_MODULE_5__.stop:\n                    {\n                        _this.stopChild(action.activity.id);\n                        break;\n                    }\n                case _actionTypes_js__WEBPACK_IMPORTED_MODULE_5__.log:\n                    var _a = action, label = _a.label, value = _a.value;\n                    if (label) {\n                        _this.logger(label, value);\n                    } else {\n                        _this.logger(value);\n                    }\n                    break;\n                default:\n                    if (!_environment_js__WEBPACK_IMPORTED_MODULE_1__.IS_PRODUCTION) {\n                        (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.warn)(false, \"No implementation found for action type '\".concat(action.type, \"'\"));\n                    }\n                    break;\n            }\n        };\n        var resolvedOptions = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)({}, Interpreter.defaultOptions), options);\n        var clock = resolvedOptions.clock, logger = resolvedOptions.logger, parent = resolvedOptions.parent, id = resolvedOptions.id;\n        var resolvedId = id !== undefined ? id : machine.id;\n        this.id = resolvedId;\n        this.logger = logger;\n        this.clock = clock;\n        this.parent = parent;\n        this.options = resolvedOptions;\n        this.scheduler = new _scheduler_js__WEBPACK_IMPORTED_MODULE_7__.Scheduler({\n            deferEvents: this.options.deferEvents\n        });\n        this.sessionId = _registry_js__WEBPACK_IMPORTED_MODULE_3__.registry.bookId();\n    }\n    Object.defineProperty(Interpreter.prototype, \"initialState\", {\n        get: function() {\n            var _this = this;\n            if (this._initialState) {\n                return this._initialState;\n            }\n            return (0,_serviceScope_js__WEBPACK_IMPORTED_MODULE_8__.provide)(this, function() {\n                _this._initialState = _this.machine.initialState;\n                return _this._initialState;\n            });\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Interpreter.prototype, \"state\", {\n        /**\r\n     * @deprecated Use `.getSnapshot()` instead.\r\n     */ get: function() {\n            if (!_environment_js__WEBPACK_IMPORTED_MODULE_1__.IS_PRODUCTION) {\n                (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.warn)(this.status !== InterpreterStatus.NotStarted, \"Attempted to read state from uninitialized service '\".concat(this.id, \"'. Make sure the service is started first.\"));\n            }\n            return this._state;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\r\n   * Executes the actions of the given state, with that state's `context` and `event`.\r\n   *\r\n   * @param state The state whose actions will be executed\r\n   * @param actionsConfig The action implementations to use\r\n   */ Interpreter.prototype.execute = function(state, actionsConfig) {\n        var e_1, _a;\n        try {\n            for(var _b = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__values)(state.actions), _c = _b.next(); !_c.done; _c = _b.next()){\n                var action = _c.value;\n                this.exec(action, state, actionsConfig);\n            }\n        } catch (e_1_1) {\n            e_1 = {\n                error: e_1_1\n            };\n        } finally{\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            } finally{\n                if (e_1) throw e_1.error;\n            }\n        }\n    };\n    Interpreter.prototype.update = function(state, _event) {\n        var e_2, _a, e_3, _b, e_4, _c, e_5, _d;\n        var _this = this; // Attach session ID to state\n        state._sessionid = this.sessionId; // Update state\n        this._state = state; // Execute actions\n        if ((!this.machine.config.predictableActionArguments || // this is currently required to execute initial actions as the `initialState` gets cached\n        // we can't just recompute it (and execute actions while doing so) because we try to preserve identity of actors created within initial assigns\n        _event === _actions_js__WEBPACK_IMPORTED_MODULE_6__.initEvent) && this.options.execute) {\n            this.execute(this.state);\n        } else {\n            var item = void 0;\n            while(item = this._outgoingQueue.shift()){\n                item[0].send(item[1]);\n            }\n        } // Update children\n        this.children.forEach(function(child) {\n            _this.state.children[child.id] = child;\n        }); // Dev tools\n        if (this.devTools) {\n            this.devTools.send(_event.data, state);\n        } // Execute listeners\n        if (state.event) {\n            try {\n                for(var _e = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__values)(this.eventListeners), _f = _e.next(); !_f.done; _f = _e.next()){\n                    var listener = _f.value;\n                    listener(state.event);\n                }\n            } catch (e_2_1) {\n                e_2 = {\n                    error: e_2_1\n                };\n            } finally{\n                try {\n                    if (_f && !_f.done && (_a = _e.return)) _a.call(_e);\n                } finally{\n                    if (e_2) throw e_2.error;\n                }\n            }\n        }\n        try {\n            for(var _g = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__values)(this.listeners), _h = _g.next(); !_h.done; _h = _g.next()){\n                var listener = _h.value;\n                listener(state, state.event);\n            }\n        } catch (e_3_1) {\n            e_3 = {\n                error: e_3_1\n            };\n        } finally{\n            try {\n                if (_h && !_h.done && (_b = _g.return)) _b.call(_g);\n            } finally{\n                if (e_3) throw e_3.error;\n            }\n        }\n        try {\n            for(var _j = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__values)(this.contextListeners), _k = _j.next(); !_k.done; _k = _j.next()){\n                var contextListener = _k.value;\n                contextListener(this.state.context, this.state.history ? this.state.history.context : undefined);\n            }\n        } catch (e_4_1) {\n            e_4 = {\n                error: e_4_1\n            };\n        } finally{\n            try {\n                if (_k && !_k.done && (_c = _j.return)) _c.call(_j);\n            } finally{\n                if (e_4) throw e_4.error;\n            }\n        }\n        if (this.state.done) {\n            // get final child state node\n            var finalChildStateNode = state.configuration.find(function(sn) {\n                return sn.type === \"final\" && sn.parent === _this.machine;\n            });\n            var doneData = finalChildStateNode && finalChildStateNode.doneData ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.mapContext)(finalChildStateNode.doneData, state.context, _event) : undefined;\n            this._doneEvent = (0,_actions_js__WEBPACK_IMPORTED_MODULE_6__.doneInvoke)(this.id, doneData);\n            try {\n                for(var _l = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__values)(this.doneListeners), _m = _l.next(); !_m.done; _m = _l.next()){\n                    var listener = _m.value;\n                    listener(this._doneEvent);\n                }\n            } catch (e_5_1) {\n                e_5 = {\n                    error: e_5_1\n                };\n            } finally{\n                try {\n                    if (_m && !_m.done && (_d = _l.return)) _d.call(_l);\n                } finally{\n                    if (e_5) throw e_5.error;\n                }\n            }\n            this._stop();\n            this._stopChildren();\n            _registry_js__WEBPACK_IMPORTED_MODULE_3__.registry.free(this.sessionId);\n        }\n    };\n    /*\r\n   * Adds a listener that is notified whenever a state transition happens. The listener is called with\r\n   * the next state and the event object that caused the state transition.\r\n   *\r\n   * @param listener The state listener\r\n   */ Interpreter.prototype.onTransition = function(listener) {\n        this.listeners.add(listener); // Send current state to listener\n        if (this.status === InterpreterStatus.Running) {\n            listener(this.state, this.state.event);\n        }\n        return this;\n    };\n    Interpreter.prototype.subscribe = function(nextListenerOrObserver, _, completeListener) {\n        var _this = this;\n        var observer = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toObserver)(nextListenerOrObserver, _, completeListener);\n        this.listeners.add(observer.next); // Send current state to listener\n        if (this.status !== InterpreterStatus.NotStarted) {\n            observer.next(this.state);\n        }\n        var completeOnce = function() {\n            _this.doneListeners.delete(completeOnce);\n            _this.stopListeners.delete(completeOnce);\n            observer.complete();\n        };\n        if (this.status === InterpreterStatus.Stopped) {\n            observer.complete();\n        } else {\n            this.onDone(completeOnce);\n            this.onStop(completeOnce);\n        }\n        return {\n            unsubscribe: function() {\n                _this.listeners.delete(observer.next);\n                _this.doneListeners.delete(completeOnce);\n                _this.stopListeners.delete(completeOnce);\n            }\n        };\n    };\n    /**\r\n   * Adds an event listener that is notified whenever an event is sent to the running interpreter.\r\n   * @param listener The event listener\r\n   */ Interpreter.prototype.onEvent = function(listener) {\n        this.eventListeners.add(listener);\n        return this;\n    };\n    /**\r\n   * Adds an event listener that is notified whenever a `send` event occurs.\r\n   * @param listener The event listener\r\n   */ Interpreter.prototype.onSend = function(listener) {\n        this.sendListeners.add(listener);\n        return this;\n    };\n    /**\r\n   * Adds a context listener that is notified whenever the state context changes.\r\n   * @param listener The context listener\r\n   */ Interpreter.prototype.onChange = function(listener) {\n        this.contextListeners.add(listener);\n        return this;\n    };\n    /**\r\n   * Adds a listener that is notified when the machine is stopped.\r\n   * @param listener The listener\r\n   */ Interpreter.prototype.onStop = function(listener) {\n        this.stopListeners.add(listener);\n        return this;\n    };\n    /**\r\n   * Adds a state listener that is notified when the statechart has reached its final state.\r\n   * @param listener The state listener\r\n   */ Interpreter.prototype.onDone = function(listener) {\n        if (this.status === InterpreterStatus.Stopped && this._doneEvent) {\n            listener(this._doneEvent);\n        } else {\n            this.doneListeners.add(listener);\n        }\n        return this;\n    };\n    /**\r\n   * Removes a listener.\r\n   * @param listener The listener to remove\r\n   */ Interpreter.prototype.off = function(listener) {\n        this.listeners.delete(listener);\n        this.eventListeners.delete(listener);\n        this.sendListeners.delete(listener);\n        this.stopListeners.delete(listener);\n        this.doneListeners.delete(listener);\n        this.contextListeners.delete(listener);\n        return this;\n    };\n    /**\r\n   * Starts the interpreter from the given state, or the initial state.\r\n   * @param initialState The state to start the statechart from\r\n   */ Interpreter.prototype.start = function(initialState) {\n        var _this = this;\n        if (this.status === InterpreterStatus.Running) {\n            // Do not restart the service if it is already started\n            return this;\n        } // yes, it's a hack but we need the related cache to be populated for some things to work (like delayed transitions)\n        // this is usually called by `machine.getInitialState` but if we rehydrate from a state we might bypass this call\n        // we also don't want to call this method here as it resolves the full initial state which might involve calling assign actions\n        // and that could potentially lead to some unwanted side-effects (even such as creating some rogue actors)\n        this.machine._init();\n        _registry_js__WEBPACK_IMPORTED_MODULE_3__.registry.register(this.sessionId, this);\n        this.initialized = true;\n        this.status = InterpreterStatus.Running;\n        var resolvedState = initialState === undefined ? this.initialState : (0,_serviceScope_js__WEBPACK_IMPORTED_MODULE_8__.provide)(this, function() {\n            return (0,_State_js__WEBPACK_IMPORTED_MODULE_9__.isStateConfig)(initialState) ? _this.machine.resolveState(initialState) : _this.machine.resolveState(_State_js__WEBPACK_IMPORTED_MODULE_9__.State.from(initialState, _this.machine.context));\n        });\n        if (this.options.devTools) {\n            this.attachDev();\n        }\n        this.scheduler.initialize(function() {\n            _this.update(resolvedState, _actions_js__WEBPACK_IMPORTED_MODULE_6__.initEvent);\n        });\n        return this;\n    };\n    Interpreter.prototype._stopChildren = function() {\n        // TODO: think about converting those to actions\n        this.children.forEach(function(child) {\n            if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isFunction)(child.stop)) {\n                child.stop();\n            }\n        });\n        this.children.clear();\n    };\n    Interpreter.prototype._stop = function() {\n        var e_6, _a, e_7, _b, e_8, _c, e_9, _d, e_10, _e;\n        try {\n            for(var _f = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__values)(this.listeners), _g = _f.next(); !_g.done; _g = _f.next()){\n                var listener = _g.value;\n                this.listeners.delete(listener);\n            }\n        } catch (e_6_1) {\n            e_6 = {\n                error: e_6_1\n            };\n        } finally{\n            try {\n                if (_g && !_g.done && (_a = _f.return)) _a.call(_f);\n            } finally{\n                if (e_6) throw e_6.error;\n            }\n        }\n        try {\n            for(var _h = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__values)(this.stopListeners), _j = _h.next(); !_j.done; _j = _h.next()){\n                var listener = _j.value; // call listener, then remove\n                listener();\n                this.stopListeners.delete(listener);\n            }\n        } catch (e_7_1) {\n            e_7 = {\n                error: e_7_1\n            };\n        } finally{\n            try {\n                if (_j && !_j.done && (_b = _h.return)) _b.call(_h);\n            } finally{\n                if (e_7) throw e_7.error;\n            }\n        }\n        try {\n            for(var _k = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__values)(this.contextListeners), _l = _k.next(); !_l.done; _l = _k.next()){\n                var listener = _l.value;\n                this.contextListeners.delete(listener);\n            }\n        } catch (e_8_1) {\n            e_8 = {\n                error: e_8_1\n            };\n        } finally{\n            try {\n                if (_l && !_l.done && (_c = _k.return)) _c.call(_k);\n            } finally{\n                if (e_8) throw e_8.error;\n            }\n        }\n        try {\n            for(var _m = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__values)(this.doneListeners), _o = _m.next(); !_o.done; _o = _m.next()){\n                var listener = _o.value;\n                this.doneListeners.delete(listener);\n            }\n        } catch (e_9_1) {\n            e_9 = {\n                error: e_9_1\n            };\n        } finally{\n            try {\n                if (_o && !_o.done && (_d = _m.return)) _d.call(_m);\n            } finally{\n                if (e_9) throw e_9.error;\n            }\n        }\n        if (!this.initialized) {\n            // Interpreter already stopped; do nothing\n            return this;\n        }\n        this.initialized = false;\n        this.status = InterpreterStatus.Stopped;\n        this._initialState = undefined;\n        try {\n            // we are going to stop within the current sync frame\n            // so we can safely just cancel this here as nothing async should be fired anyway\n            for(var _p = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__values)(Object.keys(this.delayedEventsMap)), _q = _p.next(); !_q.done; _q = _p.next()){\n                var key = _q.value;\n                this.clock.clearTimeout(this.delayedEventsMap[key]);\n            }\n        } catch (e_10_1) {\n            e_10 = {\n                error: e_10_1\n            };\n        } finally{\n            try {\n                if (_q && !_q.done && (_e = _p.return)) _e.call(_p);\n            } finally{\n                if (e_10) throw e_10.error;\n            }\n        } // clear everything that might be enqueued\n        this.scheduler.clear();\n        this.scheduler = new _scheduler_js__WEBPACK_IMPORTED_MODULE_7__.Scheduler({\n            deferEvents: this.options.deferEvents\n        });\n    };\n    /**\r\n   * Stops the interpreter and unsubscribe all listeners.\r\n   *\r\n   * This will also notify the `onStop` listeners.\r\n   */ Interpreter.prototype.stop = function() {\n        // TODO: add warning for stopping non-root interpreters\n        var _this = this; // grab the current scheduler as it will be replaced in _stop\n        var scheduler = this.scheduler;\n        this._stop(); // let what is currently processed to be finished\n        scheduler.schedule(function() {\n            var _a;\n            if ((_a = _this._state) === null || _a === void 0 ? void 0 : _a.done) {\n                return;\n            } // it feels weird to handle this here but we need to handle this even slightly \"out of band\"\n            var _event = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toSCXMLEvent)({\n                type: \"xstate.stop\"\n            });\n            var nextState = (0,_serviceScope_js__WEBPACK_IMPORTED_MODULE_8__.provide)(_this, function() {\n                var exitActions = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__spreadArray)([], (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__read)(_this.state.configuration), false).sort(function(a, b) {\n                    return b.order - a.order;\n                }).map(function(stateNode) {\n                    return (0,_actions_js__WEBPACK_IMPORTED_MODULE_6__.toActionObjects)(stateNode.onExit, _this.machine.options.actions);\n                }));\n                var _a = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__read)((0,_actions_js__WEBPACK_IMPORTED_MODULE_6__.resolveActions)(_this.machine, _this.state, _this.state.context, _event, [\n                    {\n                        type: \"exit\",\n                        actions: exitActions\n                    }\n                ], _this.machine.config.predictableActionArguments ? _this._exec : undefined, _this.machine.config.predictableActionArguments || _this.machine.config.preserveActionOrder), 2), resolvedActions = _a[0], updatedContext = _a[1];\n                var newState = new _State_js__WEBPACK_IMPORTED_MODULE_9__.State({\n                    value: _this.state.value,\n                    context: updatedContext,\n                    _event: _event,\n                    _sessionid: _this.sessionId,\n                    historyValue: undefined,\n                    history: _this.state,\n                    actions: resolvedActions.filter(function(action) {\n                        return !(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isRaisableAction)(action);\n                    }),\n                    activities: {},\n                    events: [],\n                    configuration: [],\n                    transitions: [],\n                    children: {},\n                    done: _this.state.done,\n                    tags: _this.state.tags,\n                    machine: _this.machine\n                });\n                newState.changed = true;\n                return newState;\n            });\n            _this.update(nextState, _event);\n            _this._stopChildren();\n            _registry_js__WEBPACK_IMPORTED_MODULE_3__.registry.free(_this.sessionId);\n        });\n        return this;\n    };\n    Interpreter.prototype.batch = function(events) {\n        var _this = this;\n        if (this.status === InterpreterStatus.NotStarted && this.options.deferEvents) {\n            // tslint:disable-next-line:no-console\n            if (!_environment_js__WEBPACK_IMPORTED_MODULE_1__.IS_PRODUCTION) {\n                (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.warn)(false, \"\".concat(events.length, ' event(s) were sent to uninitialized service \"').concat(this.machine.id, '\" and are deferred. Make sure .start() is called for this service.\\nEvent: ').concat(JSON.stringify(event)));\n            }\n        } else if (this.status !== InterpreterStatus.Running) {\n            throw new Error(\"\".concat(events.length, ' event(s) were sent to uninitialized service \"').concat(this.machine.id, '\". Make sure .start() is called for this service, or set { deferEvents: true } in the service options.'));\n        }\n        if (!events.length) {\n            return;\n        }\n        var exec = !!this.machine.config.predictableActionArguments && this._exec;\n        this.scheduler.schedule(function() {\n            var e_11, _a;\n            var nextState = _this.state;\n            var batchChanged = false;\n            var batchedActions = [];\n            var _loop_1 = function(event_1) {\n                var _event = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toSCXMLEvent)(event_1);\n                _this.forward(_event);\n                nextState = (0,_serviceScope_js__WEBPACK_IMPORTED_MODULE_8__.provide)(_this, function() {\n                    return _this.machine.transition(nextState, _event, undefined, exec || undefined);\n                });\n                batchedActions.push.apply(batchedActions, (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__spreadArray)([], (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__read)(_this.machine.config.predictableActionArguments ? nextState.actions : nextState.actions.map(function(a) {\n                    return (0,_State_js__WEBPACK_IMPORTED_MODULE_9__.bindActionToState)(a, nextState);\n                })), false));\n                batchChanged = batchChanged || !!nextState.changed;\n            };\n            try {\n                for(var events_1 = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__values)(events), events_1_1 = events_1.next(); !events_1_1.done; events_1_1 = events_1.next()){\n                    var event_1 = events_1_1.value;\n                    _loop_1(event_1);\n                }\n            } catch (e_11_1) {\n                e_11 = {\n                    error: e_11_1\n                };\n            } finally{\n                try {\n                    if (events_1_1 && !events_1_1.done && (_a = events_1.return)) _a.call(events_1);\n                } finally{\n                    if (e_11) throw e_11.error;\n                }\n            }\n            nextState.changed = batchChanged;\n            nextState.actions = batchedActions;\n            _this.update(nextState, (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toSCXMLEvent)(events[events.length - 1]));\n        });\n    };\n    /**\r\n   * Returns a send function bound to this interpreter instance.\r\n   *\r\n   * @param event The event to be sent by the sender.\r\n   */ Interpreter.prototype.sender = function(event1) {\n        return this.send.bind(this, event1);\n    };\n    Interpreter.prototype._nextState = function(event1, exec) {\n        var _this = this;\n        if (exec === void 0) {\n            exec = !!this.machine.config.predictableActionArguments && this._exec;\n        }\n        var _event = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toSCXMLEvent)(event1);\n        if (_event.name.indexOf(_actionTypes_js__WEBPACK_IMPORTED_MODULE_5__.errorPlatform) === 0 && !this.state.nextEvents.some(function(nextEvent) {\n            return nextEvent.indexOf(_actionTypes_js__WEBPACK_IMPORTED_MODULE_5__.errorPlatform) === 0;\n        })) {\n            throw _event.data.data;\n        }\n        var nextState = (0,_serviceScope_js__WEBPACK_IMPORTED_MODULE_8__.provide)(this, function() {\n            return _this.machine.transition(_this.state, _event, undefined, exec || undefined);\n        });\n        return nextState;\n    };\n    /**\r\n   * Returns the next state given the interpreter's current state and the event.\r\n   *\r\n   * This is a pure method that does _not_ update the interpreter's state.\r\n   *\r\n   * @param event The event to determine the next state\r\n   */ Interpreter.prototype.nextState = function(event1) {\n        return this._nextState(event1, false);\n    };\n    Interpreter.prototype.forward = function(event1) {\n        var e_12, _a;\n        try {\n            for(var _b = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__values)(this.forwardTo), _c = _b.next(); !_c.done; _c = _b.next()){\n                var id = _c.value;\n                var child = this.children.get(id);\n                if (!child) {\n                    throw new Error(\"Unable to forward event '\".concat(event1, \"' from interpreter '\").concat(this.id, \"' to nonexistant child '\").concat(id, \"'.\"));\n                }\n                child.send(event1);\n            }\n        } catch (e_12_1) {\n            e_12 = {\n                error: e_12_1\n            };\n        } finally{\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            } finally{\n                if (e_12) throw e_12.error;\n            }\n        }\n    };\n    Interpreter.prototype.defer = function(sendAction) {\n        var _this = this;\n        var timerId = this.clock.setTimeout(function() {\n            if (\"to\" in sendAction && sendAction.to) {\n                _this.sendTo(sendAction._event, sendAction.to, true);\n            } else {\n                _this.send(sendAction._event);\n            }\n        }, sendAction.delay);\n        if (sendAction.id) {\n            this.delayedEventsMap[sendAction.id] = timerId;\n        }\n    };\n    Interpreter.prototype.cancel = function(sendId) {\n        this.clock.clearTimeout(this.delayedEventsMap[sendId]);\n        delete this.delayedEventsMap[sendId];\n    };\n    Interpreter.prototype.exec = function(action, state, actionFunctionMap) {\n        if (actionFunctionMap === void 0) {\n            actionFunctionMap = this.machine.options.actions;\n        }\n        this._exec(action, state.context, state._event, actionFunctionMap);\n    };\n    Interpreter.prototype.removeChild = function(childId) {\n        var _a;\n        this.children.delete(childId);\n        this.forwardTo.delete(childId); // this.state might not exist at the time this is called,\n        // such as when a child is added then removed while initializing the state\n        (_a = this.state) === null || _a === void 0 ? true : delete _a.children[childId];\n    };\n    Interpreter.prototype.stopChild = function(childId) {\n        var child = this.children.get(childId);\n        if (!child) {\n            return;\n        }\n        this.removeChild(childId);\n        if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isFunction)(child.stop)) {\n            child.stop();\n        }\n    };\n    Interpreter.prototype.spawn = function(entity, name, options) {\n        if (this.status !== InterpreterStatus.Running) {\n            return (0,_Actor_js__WEBPACK_IMPORTED_MODULE_10__.createDeferredActor)(entity, name);\n        }\n        if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isPromiseLike)(entity)) {\n            return this.spawnPromise(Promise.resolve(entity), name);\n        } else if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isFunction)(entity)) {\n            return this.spawnCallback(entity, name);\n        } else if ((0,_Actor_js__WEBPACK_IMPORTED_MODULE_10__.isSpawnedActor)(entity)) {\n            return this.spawnActor(entity, name);\n        } else if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isObservable)(entity)) {\n            return this.spawnObservable(entity, name);\n        } else if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isMachine)(entity)) {\n            return this.spawnMachine(entity, (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)({}, options), {\n                id: name\n            }));\n        } else if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isBehavior)(entity)) {\n            return this.spawnBehavior(entity, name);\n        } else {\n            throw new Error('Unable to spawn entity \"'.concat(name, '\" of type \"').concat(typeof entity, '\".'));\n        }\n    };\n    Interpreter.prototype.spawnMachine = function(machine, options) {\n        var _this = this;\n        if (options === void 0) {\n            options = {};\n        }\n        var childService = new Interpreter(machine, (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)({}, this.options), {\n            parent: this,\n            id: options.id || machine.id\n        }));\n        var resolvedOptions = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)({}, DEFAULT_SPAWN_OPTIONS), options);\n        if (resolvedOptions.sync) {\n            childService.onTransition(function(state) {\n                _this.send(_actionTypes_js__WEBPACK_IMPORTED_MODULE_5__.update, {\n                    state: state,\n                    id: childService.id\n                });\n            });\n        }\n        var actor = childService;\n        this.children.set(childService.id, actor);\n        if (resolvedOptions.autoForward) {\n            this.forwardTo.add(childService.id);\n        }\n        childService.onDone(function(doneEvent) {\n            _this.removeChild(childService.id);\n            _this.send((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toSCXMLEvent)(doneEvent, {\n                origin: childService.id\n            }));\n        }).start();\n        return actor;\n    };\n    Interpreter.prototype.spawnBehavior = function(behavior, id) {\n        var actorRef = (0,_behaviors_js__WEBPACK_IMPORTED_MODULE_11__.spawnBehavior)(behavior, {\n            id: id,\n            parent: this\n        });\n        this.children.set(id, actorRef);\n        return actorRef;\n    };\n    Interpreter.prototype.spawnPromise = function(promise, id) {\n        var _a;\n        var _this = this;\n        var canceled = false;\n        var resolvedData;\n        promise.then(function(response) {\n            if (!canceled) {\n                resolvedData = response;\n                _this.removeChild(id);\n                _this.send((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toSCXMLEvent)((0,_actions_js__WEBPACK_IMPORTED_MODULE_6__.doneInvoke)(id, response), {\n                    origin: id\n                }));\n            }\n        }, function(errorData) {\n            if (!canceled) {\n                _this.removeChild(id);\n                var errorEvent = (0,_actions_js__WEBPACK_IMPORTED_MODULE_6__.error)(id, errorData);\n                try {\n                    // Send \"error.platform.id\" to this (parent).\n                    _this.send((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toSCXMLEvent)(errorEvent, {\n                        origin: id\n                    }));\n                } catch (error) {\n                    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.reportUnhandledExceptionOnInvocation)(errorData, error, id);\n                    if (_this.devTools) {\n                        _this.devTools.send(errorEvent, _this.state);\n                    }\n                    if (_this.machine.strict) {\n                        // it would be better to always stop the state machine if unhandled\n                        // exception/promise rejection happens but because we don't want to\n                        // break existing code so enforce it on strict mode only especially so\n                        // because documentation says that onError is optional\n                        _this.stop();\n                    }\n                }\n            }\n        });\n        var actor = (_a = {\n            id: id,\n            send: function() {\n                return void 0;\n            },\n            subscribe: function(next, handleError, complete) {\n                var observer = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toObserver)(next, handleError, complete);\n                var unsubscribed = false;\n                promise.then(function(response) {\n                    if (unsubscribed) {\n                        return;\n                    }\n                    observer.next(response);\n                    if (unsubscribed) {\n                        return;\n                    }\n                    observer.complete();\n                }, function(err) {\n                    if (unsubscribed) {\n                        return;\n                    }\n                    observer.error(err);\n                });\n                return {\n                    unsubscribe: function() {\n                        return unsubscribed = true;\n                    }\n                };\n            },\n            stop: function() {\n                canceled = true;\n            },\n            toJSON: function() {\n                return {\n                    id: id\n                };\n            },\n            getSnapshot: function() {\n                return resolvedData;\n            }\n        }, _a[_utils_js__WEBPACK_IMPORTED_MODULE_0__.symbolObservable] = function() {\n            return this;\n        }, _a);\n        this.children.set(id, actor);\n        return actor;\n    };\n    Interpreter.prototype.spawnCallback = function(callback, id) {\n        var _a;\n        var _this = this;\n        var canceled = false;\n        var receivers = new Set();\n        var listeners = new Set();\n        var emitted;\n        var receive = function(e) {\n            emitted = e;\n            listeners.forEach(function(listener) {\n                return listener(e);\n            });\n            if (canceled) {\n                return;\n            }\n            _this.send((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toSCXMLEvent)(e, {\n                origin: id\n            }));\n        };\n        var callbackStop;\n        try {\n            callbackStop = callback(receive, function(newListener) {\n                receivers.add(newListener);\n            });\n        } catch (err) {\n            this.send((0,_actions_js__WEBPACK_IMPORTED_MODULE_6__.error)(id, err));\n        }\n        if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isPromiseLike)(callbackStop)) {\n            // it turned out to be an async function, can't reliably check this before calling `callback`\n            // because transpiled async functions are not recognizable\n            return this.spawnPromise(callbackStop, id);\n        }\n        var actor = (_a = {\n            id: id,\n            send: function(event1) {\n                return receivers.forEach(function(receiver) {\n                    return receiver(event1);\n                });\n            },\n            subscribe: function(next) {\n                var observer = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toObserver)(next);\n                listeners.add(observer.next);\n                return {\n                    unsubscribe: function() {\n                        listeners.delete(observer.next);\n                    }\n                };\n            },\n            stop: function() {\n                canceled = true;\n                if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isFunction)(callbackStop)) {\n                    callbackStop();\n                }\n            },\n            toJSON: function() {\n                return {\n                    id: id\n                };\n            },\n            getSnapshot: function() {\n                return emitted;\n            }\n        }, _a[_utils_js__WEBPACK_IMPORTED_MODULE_0__.symbolObservable] = function() {\n            return this;\n        }, _a);\n        this.children.set(id, actor);\n        return actor;\n    };\n    Interpreter.prototype.spawnObservable = function(source, id) {\n        var _a;\n        var _this = this;\n        var emitted;\n        var subscription = source.subscribe(function(value) {\n            emitted = value;\n            _this.send((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toSCXMLEvent)(value, {\n                origin: id\n            }));\n        }, function(err) {\n            _this.removeChild(id);\n            _this.send((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toSCXMLEvent)((0,_actions_js__WEBPACK_IMPORTED_MODULE_6__.error)(id, err), {\n                origin: id\n            }));\n        }, function() {\n            _this.removeChild(id);\n            _this.send((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toSCXMLEvent)((0,_actions_js__WEBPACK_IMPORTED_MODULE_6__.doneInvoke)(id), {\n                origin: id\n            }));\n        });\n        var actor = (_a = {\n            id: id,\n            send: function() {\n                return void 0;\n            },\n            subscribe: function(next, handleError, complete) {\n                return source.subscribe(next, handleError, complete);\n            },\n            stop: function() {\n                return subscription.unsubscribe();\n            },\n            getSnapshot: function() {\n                return emitted;\n            },\n            toJSON: function() {\n                return {\n                    id: id\n                };\n            }\n        }, _a[_utils_js__WEBPACK_IMPORTED_MODULE_0__.symbolObservable] = function() {\n            return this;\n        }, _a);\n        this.children.set(id, actor);\n        return actor;\n    };\n    Interpreter.prototype.spawnActor = function(actor, name) {\n        this.children.set(name, actor);\n        return actor;\n    };\n    Interpreter.prototype.spawnActivity = function(activity) {\n        var implementation = this.machine.options && this.machine.options.activities ? this.machine.options.activities[activity.type] : undefined;\n        if (!implementation) {\n            if (!_environment_js__WEBPACK_IMPORTED_MODULE_1__.IS_PRODUCTION) {\n                (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.warn)(false, \"No implementation found for activity '\".concat(activity.type, \"'\"));\n            } // tslint:disable-next-line:no-console\n            return;\n        } // Start implementation\n        var dispose = implementation(this.state.context, activity);\n        this.spawnEffect(activity.id, dispose);\n    };\n    Interpreter.prototype.spawnEffect = function(id, dispose) {\n        var _a;\n        this.children.set(id, (_a = {\n            id: id,\n            send: function() {\n                return void 0;\n            },\n            subscribe: function() {\n                return {\n                    unsubscribe: function() {\n                        return void 0;\n                    }\n                };\n            },\n            stop: dispose || undefined,\n            getSnapshot: function() {\n                return undefined;\n            },\n            toJSON: function() {\n                return {\n                    id: id\n                };\n            }\n        }, _a[_utils_js__WEBPACK_IMPORTED_MODULE_0__.symbolObservable] = function() {\n            return this;\n        }, _a));\n    };\n    Interpreter.prototype.attachDev = function() {\n        var global = (0,_devTools_js__WEBPACK_IMPORTED_MODULE_12__.getGlobal)();\n        if (this.options.devTools && global) {\n            if (global.__REDUX_DEVTOOLS_EXTENSION__) {\n                var devToolsOptions = typeof this.options.devTools === \"object\" ? this.options.devTools : undefined;\n                this.devTools = global.__REDUX_DEVTOOLS_EXTENSION__.connect((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)({\n                    name: this.id,\n                    autoPause: true,\n                    stateSanitizer: function(state) {\n                        return {\n                            value: state.value,\n                            context: state.context,\n                            actions: state.actions\n                        };\n                    }\n                }, devToolsOptions), {\n                    features: (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)({\n                        jump: false,\n                        skip: false\n                    }, devToolsOptions ? devToolsOptions.features : undefined)\n                }), this.machine);\n                this.devTools.init(this.state);\n            } // add XState-specific dev tooling hook\n            (0,_devTools_js__WEBPACK_IMPORTED_MODULE_12__.registerService)(this);\n        }\n    };\n    Interpreter.prototype.toJSON = function() {\n        return {\n            id: this.id\n        };\n    };\n    Interpreter.prototype[_utils_js__WEBPACK_IMPORTED_MODULE_0__.symbolObservable] = function() {\n        return this;\n    };\n    Interpreter.prototype.getSnapshot = function() {\n        if (this.status === InterpreterStatus.NotStarted) {\n            return this.initialState;\n        }\n        return this._state;\n    };\n    /**\r\n   * The default interpreter options:\r\n   *\r\n   * - `clock` uses the global `setTimeout` and `clearTimeout` functions\r\n   * - `logger` uses the global `console.log()` method\r\n   */ Interpreter.defaultOptions = {\n        execute: true,\n        deferEvents: true,\n        clock: {\n            setTimeout: function(fn, ms) {\n                return setTimeout(fn, ms);\n            },\n            clearTimeout: function(id) {\n                return clearTimeout(id);\n            }\n        },\n        logger: /*#__PURE__*/ console.log.bind(console),\n        devTools: false\n    };\n    Interpreter.interpret = interpret;\n    return Interpreter;\n}();\nvar resolveSpawnOptions = function(nameOrOptions) {\n    if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isString)(nameOrOptions)) {\n        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)({}, DEFAULT_SPAWN_OPTIONS), {\n            name: nameOrOptions\n        });\n    }\n    return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_4__.__assign)({}, DEFAULT_SPAWN_OPTIONS), {\n        name: (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.uniqueId)()\n    }), nameOrOptions);\n};\nfunction spawn(entity, nameOrOptions) {\n    var resolvedOptions = resolveSpawnOptions(nameOrOptions);\n    return (0,_serviceScope_js__WEBPACK_IMPORTED_MODULE_8__.consume)(function(service) {\n        if (!_environment_js__WEBPACK_IMPORTED_MODULE_1__.IS_PRODUCTION) {\n            var isLazyEntity = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isMachine)(entity) || (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isFunction)(entity);\n            (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.warn)(!!service || isLazyEntity, 'Attempted to spawn an Actor (ID: \"'.concat((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.isMachine)(entity) ? entity.id : \"undefined\", '\") outside of a service. This will have no effect.'));\n        }\n        if (service) {\n            return service.spawn(entity, resolvedOptions.name, resolvedOptions);\n        } else {\n            return (0,_Actor_js__WEBPACK_IMPORTED_MODULE_10__.createDeferredActor)(entity, resolvedOptions.name);\n        }\n    });\n}\n/**\r\n * Creates a new Interpreter instance for the given machine with the provided options, if any.\r\n *\r\n * @param machine The machine to interpret\r\n * @param options Interpreter options\r\n */ function interpret(machine, options) {\n    var interpreter = new Interpreter(machine, options);\n    return interpreter;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xstate/es/interpreter.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xstate/es/invokeUtils.js":
/*!***********************************************!*\
  !*** ./node_modules/xstate/es/invokeUtils.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   toInvokeDefinition: () => (/* binding */ toInvokeDefinition),\n/* harmony export */   toInvokeSource: () => (/* binding */ toInvokeSource)\n/* harmony export */ });\n/* harmony import */ var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_virtual/_tslib.js */ \"(ssr)/./node_modules/xstate/es/_virtual/_tslib.js\");\n/* harmony import */ var _actionTypes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./actionTypes.js */ \"(ssr)/./node_modules/xstate/es/actionTypes.js\");\n\n\n\n\n\nfunction toInvokeSource(src) {\n    if (typeof src === \"string\") {\n        var simpleSrc = {\n            type: src\n        };\n        simpleSrc.toString = function() {\n            return src;\n        }; // v4 compat - TODO: remove in v5\n        return simpleSrc;\n    }\n    return src;\n}\nfunction toInvokeDefinition(invokeConfig) {\n    return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__assign)({\n        type: _actionTypes_js__WEBPACK_IMPORTED_MODULE_1__.invoke\n    }, invokeConfig), {\n        toJSON: function() {\n            invokeConfig.onDone;\n            invokeConfig.onError;\n            var invokeDef = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__rest)(invokeConfig, [\n                \"onDone\",\n                \"onError\"\n            ]);\n            return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, invokeDef), {\n                type: _actionTypes_js__WEBPACK_IMPORTED_MODULE_1__.invoke,\n                src: toInvokeSource(invokeConfig.src)\n            });\n        }\n    });\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMveHN0YXRlL2VzL2ludm9rZVV0aWxzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBd0Q7QUFDcEM7QUFDc0I7QUFDdEI7QUFDTTtBQUUxQixTQUFTRyxlQUFlQyxHQUFHO0lBQ3pCLElBQUksT0FBT0EsUUFBUSxVQUFVO1FBQzNCLElBQUlDLFlBQVk7WUFDZEMsTUFBTUY7UUFDUjtRQUVBQyxVQUFVRSxRQUFRLEdBQUc7WUFDbkIsT0FBT0g7UUFDVCxHQUFHLGlDQUFpQztRQUdwQyxPQUFPQztJQUNUO0lBRUEsT0FBT0Q7QUFDVDtBQUNBLFNBQVNJLG1CQUFtQkMsWUFBWTtJQUN0QyxPQUFPVCwyREFBUUEsQ0FBQ0EsMkRBQVFBLENBQUM7UUFDdkJNLE1BQU1KLG1EQUFNQTtJQUNkLEdBQUdPLGVBQWU7UUFDaEJDLFFBQVE7WUFDTkQsYUFBYUUsTUFBTTtZQUNmRixhQUFhRyxPQUFPO1lBQ3BCLElBQUlDLFlBQVlaLHlEQUFNQSxDQUFDUSxjQUFjO2dCQUFDO2dCQUFVO2FBQVU7WUFFOUQsT0FBT1QsMkRBQVFBLENBQUNBLDJEQUFRQSxDQUFDLENBQUMsR0FBR2EsWUFBWTtnQkFDdkNQLE1BQU1KLG1EQUFNQTtnQkFDWkUsS0FBS0QsZUFBZU0sYUFBYUwsR0FBRztZQUN0QztRQUNGO0lBQ0Y7QUFDRjtBQUU4QyIsInNvdXJjZXMiOlsid2VicGFjazovL3RoZS1ncmlkLTIvLi9ub2RlX21vZHVsZXMveHN0YXRlL2VzL2ludm9rZVV0aWxzLmpzP2Y4N2IiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgX19hc3NpZ24sIF9fcmVzdCB9IGZyb20gJy4vX3ZpcnR1YWwvX3RzbGliLmpzJztcbmltcG9ydCAnLi90eXBlcy5qcyc7XG5pbXBvcnQgeyBpbnZva2UgfSBmcm9tICcuL2FjdGlvblR5cGVzLmpzJztcbmltcG9ydCAnLi91dGlscy5qcyc7XG5pbXBvcnQgJy4vZW52aXJvbm1lbnQuanMnO1xuXG5mdW5jdGlvbiB0b0ludm9rZVNvdXJjZShzcmMpIHtcbiAgaWYgKHR5cGVvZiBzcmMgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFyIHNpbXBsZVNyYyA9IHtcbiAgICAgIHR5cGU6IHNyY1xuICAgIH07XG5cbiAgICBzaW1wbGVTcmMudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gc3JjO1xuICAgIH07IC8vIHY0IGNvbXBhdCAtIFRPRE86IHJlbW92ZSBpbiB2NVxuXG5cbiAgICByZXR1cm4gc2ltcGxlU3JjO1xuICB9XG5cbiAgcmV0dXJuIHNyYztcbn1cbmZ1bmN0aW9uIHRvSW52b2tlRGVmaW5pdGlvbihpbnZva2VDb25maWcpIHtcbiAgcmV0dXJuIF9fYXNzaWduKF9fYXNzaWduKHtcbiAgICB0eXBlOiBpbnZva2VcbiAgfSwgaW52b2tlQ29uZmlnKSwge1xuICAgIHRvSlNPTjogZnVuY3Rpb24gKCkge1xuICAgICAgaW52b2tlQ29uZmlnLm9uRG9uZTtcbiAgICAgICAgICBpbnZva2VDb25maWcub25FcnJvcjtcbiAgICAgICAgICB2YXIgaW52b2tlRGVmID0gX19yZXN0KGludm9rZUNvbmZpZywgW1wib25Eb25lXCIsIFwib25FcnJvclwiXSk7XG5cbiAgICAgIHJldHVybiBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgaW52b2tlRGVmKSwge1xuICAgICAgICB0eXBlOiBpbnZva2UsXG4gICAgICAgIHNyYzogdG9JbnZva2VTb3VyY2UoaW52b2tlQ29uZmlnLnNyYylcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG59XG5cbmV4cG9ydCB7IHRvSW52b2tlRGVmaW5pdGlvbiwgdG9JbnZva2VTb3VyY2UgfTtcbiJdLCJuYW1lcyI6WyJfX2Fzc2lnbiIsIl9fcmVzdCIsImludm9rZSIsInRvSW52b2tlU291cmNlIiwic3JjIiwic2ltcGxlU3JjIiwidHlwZSIsInRvU3RyaW5nIiwidG9JbnZva2VEZWZpbml0aW9uIiwiaW52b2tlQ29uZmlnIiwidG9KU09OIiwib25Eb25lIiwib25FcnJvciIsImludm9rZURlZiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xstate/es/invokeUtils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xstate/es/mapState.js":
/*!********************************************!*\
  !*** ./node_modules/xstate/es/mapState.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   mapState: () => (/* binding */ mapState)\n/* harmony export */ });\n/* harmony import */ var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_virtual/_tslib.js */ \"(ssr)/./node_modules/xstate/es/_virtual/_tslib.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/xstate/es/utils.js\");\n\n\nfunction mapState(stateMap, stateId) {\n    var e_1, _a;\n    var foundStateId;\n    try {\n        for(var _b = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__values)(Object.keys(stateMap)), _c = _b.next(); !_c.done; _c = _b.next()){\n            var mappedStateId = _c.value;\n            if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.matchesState)(mappedStateId, stateId) && (!foundStateId || stateId.length > foundStateId.length)) {\n                foundStateId = mappedStateId;\n            }\n        }\n    } catch (e_1_1) {\n        e_1 = {\n            error: e_1_1\n        };\n    } finally{\n        try {\n            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally{\n            if (e_1) throw e_1.error;\n        }\n    }\n    return stateMap[foundStateId];\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMveHN0YXRlL2VzL21hcFN0YXRlLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFnRDtBQUNOO0FBRTFDLFNBQVNFLFNBQVNDLFFBQVEsRUFBRUMsT0FBTztJQUNqQyxJQUFJQyxLQUFLQztJQUVULElBQUlDO0lBRUosSUFBSTtRQUNGLElBQUssSUFBSUMsS0FBS1IsMkRBQVFBLENBQUNTLE9BQU9DLElBQUksQ0FBQ1AsWUFBWVEsS0FBS0gsR0FBR0ksSUFBSSxJQUFJLENBQUNELEdBQUdFLElBQUksRUFBRUYsS0FBS0gsR0FBR0ksSUFBSSxHQUFJO1lBQ3ZGLElBQUlFLGdCQUFnQkgsR0FBR0ksS0FBSztZQUU1QixJQUFJZCx1REFBWUEsQ0FBQ2EsZUFBZVYsWUFBYSxFQUFDRyxnQkFBZ0JILFFBQVFZLE1BQU0sR0FBR1QsYUFBYVMsTUFBTSxHQUFHO2dCQUNuR1QsZUFBZU87WUFDakI7UUFDRjtJQUNGLEVBQUUsT0FBT0csT0FBTztRQUNkWixNQUFNO1lBQ0phLE9BQU9EO1FBQ1Q7SUFDRixTQUFVO1FBQ1IsSUFBSTtZQUNGLElBQUlOLE1BQU0sQ0FBQ0EsR0FBR0UsSUFBSSxJQUFLUCxDQUFBQSxLQUFLRSxHQUFHVyxNQUFNLEdBQUdiLEdBQUdjLElBQUksQ0FBQ1o7UUFDbEQsU0FBVTtZQUNSLElBQUlILEtBQUssTUFBTUEsSUFBSWEsS0FBSztRQUMxQjtJQUNGO0lBRUEsT0FBT2YsUUFBUSxDQUFDSSxhQUFhO0FBQy9CO0FBRW9CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGhlLWdyaWQtMi8uL25vZGVfbW9kdWxlcy94c3RhdGUvZXMvbWFwU3RhdGUuanM/YjllNyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBfX3ZhbHVlcyB9IGZyb20gJy4vX3ZpcnR1YWwvX3RzbGliLmpzJztcbmltcG9ydCB7IG1hdGNoZXNTdGF0ZSB9IGZyb20gJy4vdXRpbHMuanMnO1xuXG5mdW5jdGlvbiBtYXBTdGF0ZShzdGF0ZU1hcCwgc3RhdGVJZCkge1xuICB2YXIgZV8xLCBfYTtcblxuICB2YXIgZm91bmRTdGF0ZUlkO1xuXG4gIHRyeSB7XG4gICAgZm9yICh2YXIgX2IgPSBfX3ZhbHVlcyhPYmplY3Qua2V5cyhzdGF0ZU1hcCkpLCBfYyA9IF9iLm5leHQoKTsgIV9jLmRvbmU7IF9jID0gX2IubmV4dCgpKSB7XG4gICAgICB2YXIgbWFwcGVkU3RhdGVJZCA9IF9jLnZhbHVlO1xuXG4gICAgICBpZiAobWF0Y2hlc1N0YXRlKG1hcHBlZFN0YXRlSWQsIHN0YXRlSWQpICYmICghZm91bmRTdGF0ZUlkIHx8IHN0YXRlSWQubGVuZ3RoID4gZm91bmRTdGF0ZUlkLmxlbmd0aCkpIHtcbiAgICAgICAgZm91bmRTdGF0ZUlkID0gbWFwcGVkU3RhdGVJZDtcbiAgICAgIH1cbiAgICB9XG4gIH0gY2F0Y2ggKGVfMV8xKSB7XG4gICAgZV8xID0ge1xuICAgICAgZXJyb3I6IGVfMV8xXG4gICAgfTtcbiAgfSBmaW5hbGx5IHtcbiAgICB0cnkge1xuICAgICAgaWYgKF9jICYmICFfYy5kb25lICYmIChfYSA9IF9iLnJldHVybikpIF9hLmNhbGwoX2IpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpZiAoZV8xKSB0aHJvdyBlXzEuZXJyb3I7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHN0YXRlTWFwW2ZvdW5kU3RhdGVJZF07XG59XG5cbmV4cG9ydCB7IG1hcFN0YXRlIH07XG4iXSwibmFtZXMiOlsiX192YWx1ZXMiLCJtYXRjaGVzU3RhdGUiLCJtYXBTdGF0ZSIsInN0YXRlTWFwIiwic3RhdGVJZCIsImVfMSIsIl9hIiwiZm91bmRTdGF0ZUlkIiwiX2IiLCJPYmplY3QiLCJrZXlzIiwiX2MiLCJuZXh0IiwiZG9uZSIsIm1hcHBlZFN0YXRlSWQiLCJ2YWx1ZSIsImxlbmd0aCIsImVfMV8xIiwiZXJyb3IiLCJyZXR1cm4iLCJjYWxsIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xstate/es/mapState.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xstate/es/match.js":
/*!*****************************************!*\
  !*** ./node_modules/xstate/es/match.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   matchState: () => (/* binding */ matchState)\n/* harmony export */ });\n/* harmony import */ var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_virtual/_tslib.js */ \"(ssr)/./node_modules/xstate/es/_virtual/_tslib.js\");\n/* harmony import */ var _State_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./State.js */ \"(ssr)/./node_modules/xstate/es/State.js\");\n\n\nfunction matchState(state, patterns, defaultValue) {\n    var e_1, _a;\n    var resolvedState = _State_js__WEBPACK_IMPORTED_MODULE_0__.State.from(state, state instanceof _State_js__WEBPACK_IMPORTED_MODULE_0__.State ? state.context : undefined);\n    try {\n        for(var patterns_1 = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__values)(patterns), patterns_1_1 = patterns_1.next(); !patterns_1_1.done; patterns_1_1 = patterns_1.next()){\n            var _b = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__read)(patterns_1_1.value, 2), stateValue = _b[0], getValue = _b[1];\n            if (resolvedState.matches(stateValue)) {\n                return getValue(resolvedState);\n            }\n        }\n    } catch (e_1_1) {\n        e_1 = {\n            error: e_1_1\n        };\n    } finally{\n        try {\n            if (patterns_1_1 && !patterns_1_1.done && (_a = patterns_1.return)) _a.call(patterns_1);\n        } finally{\n            if (e_1) throw e_1.error;\n        }\n    }\n    return defaultValue(resolvedState);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMveHN0YXRlL2VzL21hdGNoLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUF3RDtBQUNyQjtBQUVuQyxTQUFTRyxXQUFXQyxLQUFLLEVBQUVDLFFBQVEsRUFBRUMsWUFBWTtJQUMvQyxJQUFJQyxLQUFLQztJQUVULElBQUlDLGdCQUFnQlAsNENBQUtBLENBQUNRLElBQUksQ0FBQ04sT0FBT0EsaUJBQWlCRiw0Q0FBS0EsR0FBR0UsTUFBTU8sT0FBTyxHQUFHQztJQUUvRSxJQUFJO1FBQ0YsSUFBSyxJQUFJQyxhQUFhYiwyREFBUUEsQ0FBQ0ssV0FBV1MsZUFBZUQsV0FBV0UsSUFBSSxJQUFJLENBQUNELGFBQWFFLElBQUksRUFBRUYsZUFBZUQsV0FBV0UsSUFBSSxHQUFJO1lBQ2hJLElBQUlFLEtBQUtoQix5REFBTUEsQ0FBQ2EsYUFBYUksS0FBSyxFQUFFLElBQ2hDQyxhQUFhRixFQUFFLENBQUMsRUFBRSxFQUNsQkcsV0FBV0gsRUFBRSxDQUFDLEVBQUU7WUFFcEIsSUFBSVIsY0FBY1ksT0FBTyxDQUFDRixhQUFhO2dCQUNyQyxPQUFPQyxTQUFTWDtZQUNsQjtRQUNGO0lBQ0YsRUFBRSxPQUFPYSxPQUFPO1FBQ2RmLE1BQU07WUFDSmdCLE9BQU9EO1FBQ1Q7SUFDRixTQUFVO1FBQ1IsSUFBSTtZQUNGLElBQUlSLGdCQUFnQixDQUFDQSxhQUFhRSxJQUFJLElBQUtSLENBQUFBLEtBQUtLLFdBQVdXLE1BQU0sR0FBR2hCLEdBQUdpQixJQUFJLENBQUNaO1FBQzlFLFNBQVU7WUFDUixJQUFJTixLQUFLLE1BQU1BLElBQUlnQixLQUFLO1FBQzFCO0lBQ0Y7SUFFQSxPQUFPakIsYUFBYUc7QUFDdEI7QUFFc0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90aGUtZ3JpZC0yLy4vbm9kZV9tb2R1bGVzL3hzdGF0ZS9lcy9tYXRjaC5qcz80ZTExIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IF9fdmFsdWVzLCBfX3JlYWQgfSBmcm9tICcuL192aXJ0dWFsL190c2xpYi5qcyc7XG5pbXBvcnQgeyBTdGF0ZSB9IGZyb20gJy4vU3RhdGUuanMnO1xuXG5mdW5jdGlvbiBtYXRjaFN0YXRlKHN0YXRlLCBwYXR0ZXJucywgZGVmYXVsdFZhbHVlKSB7XG4gIHZhciBlXzEsIF9hO1xuXG4gIHZhciByZXNvbHZlZFN0YXRlID0gU3RhdGUuZnJvbShzdGF0ZSwgc3RhdGUgaW5zdGFuY2VvZiBTdGF0ZSA/IHN0YXRlLmNvbnRleHQgOiB1bmRlZmluZWQpO1xuXG4gIHRyeSB7XG4gICAgZm9yICh2YXIgcGF0dGVybnNfMSA9IF9fdmFsdWVzKHBhdHRlcm5zKSwgcGF0dGVybnNfMV8xID0gcGF0dGVybnNfMS5uZXh0KCk7ICFwYXR0ZXJuc18xXzEuZG9uZTsgcGF0dGVybnNfMV8xID0gcGF0dGVybnNfMS5uZXh0KCkpIHtcbiAgICAgIHZhciBfYiA9IF9fcmVhZChwYXR0ZXJuc18xXzEudmFsdWUsIDIpLFxuICAgICAgICAgIHN0YXRlVmFsdWUgPSBfYlswXSxcbiAgICAgICAgICBnZXRWYWx1ZSA9IF9iWzFdO1xuXG4gICAgICBpZiAocmVzb2x2ZWRTdGF0ZS5tYXRjaGVzKHN0YXRlVmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBnZXRWYWx1ZShyZXNvbHZlZFN0YXRlKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gY2F0Y2ggKGVfMV8xKSB7XG4gICAgZV8xID0ge1xuICAgICAgZXJyb3I6IGVfMV8xXG4gICAgfTtcbiAgfSBmaW5hbGx5IHtcbiAgICB0cnkge1xuICAgICAgaWYgKHBhdHRlcm5zXzFfMSAmJiAhcGF0dGVybnNfMV8xLmRvbmUgJiYgKF9hID0gcGF0dGVybnNfMS5yZXR1cm4pKSBfYS5jYWxsKHBhdHRlcm5zXzEpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpZiAoZV8xKSB0aHJvdyBlXzEuZXJyb3I7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGRlZmF1bHRWYWx1ZShyZXNvbHZlZFN0YXRlKTtcbn1cblxuZXhwb3J0IHsgbWF0Y2hTdGF0ZSB9O1xuIl0sIm5hbWVzIjpbIl9fdmFsdWVzIiwiX19yZWFkIiwiU3RhdGUiLCJtYXRjaFN0YXRlIiwic3RhdGUiLCJwYXR0ZXJucyIsImRlZmF1bHRWYWx1ZSIsImVfMSIsIl9hIiwicmVzb2x2ZWRTdGF0ZSIsImZyb20iLCJjb250ZXh0IiwidW5kZWZpbmVkIiwicGF0dGVybnNfMSIsInBhdHRlcm5zXzFfMSIsIm5leHQiLCJkb25lIiwiX2IiLCJ2YWx1ZSIsInN0YXRlVmFsdWUiLCJnZXRWYWx1ZSIsIm1hdGNoZXMiLCJlXzFfMSIsImVycm9yIiwicmV0dXJuIiwiY2FsbCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xstate/es/match.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xstate/es/registry.js":
/*!********************************************!*\
  !*** ./node_modules/xstate/es/registry.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   registry: () => (/* binding */ registry)\n/* harmony export */ });\nvar children = /*#__PURE__*/ new Map();\nvar sessionIdIndex = 0;\nvar registry = {\n    bookId: function() {\n        return \"x:\".concat(sessionIdIndex++);\n    },\n    register: function(id, actor) {\n        children.set(id, actor);\n        return id;\n    },\n    get: function(id) {\n        return children.get(id);\n    },\n    free: function(id) {\n        children.delete(id);\n    }\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMveHN0YXRlL2VzL3JlZ2lzdHJ5LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxJQUFJQSxXQUFXLFdBQVcsR0FBRSxJQUFJQztBQUNoQyxJQUFJQyxpQkFBaUI7QUFDckIsSUFBSUMsV0FBVztJQUNiQyxRQUFRO1FBQ04sT0FBTyxLQUFLQyxNQUFNLENBQUNIO0lBQ3JCO0lBQ0FJLFVBQVUsU0FBVUMsRUFBRSxFQUFFQyxLQUFLO1FBQzNCUixTQUFTUyxHQUFHLENBQUNGLElBQUlDO1FBQ2pCLE9BQU9EO0lBQ1Q7SUFDQUcsS0FBSyxTQUFVSCxFQUFFO1FBQ2YsT0FBT1AsU0FBU1UsR0FBRyxDQUFDSDtJQUN0QjtJQUNBSSxNQUFNLFNBQVVKLEVBQUU7UUFDaEJQLFNBQVNZLE1BQU0sQ0FBQ0w7SUFDbEI7QUFDRjtBQUVvQiIsInNvdXJjZXMiOlsid2VicGFjazovL3RoZS1ncmlkLTIvLi9ub2RlX21vZHVsZXMveHN0YXRlL2VzL3JlZ2lzdHJ5LmpzPzcwOTYiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGNoaWxkcmVuID0gLyojX19QVVJFX18qL25ldyBNYXAoKTtcbnZhciBzZXNzaW9uSWRJbmRleCA9IDA7XG52YXIgcmVnaXN0cnkgPSB7XG4gIGJvb2tJZDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBcIng6XCIuY29uY2F0KHNlc3Npb25JZEluZGV4KyspO1xuICB9LFxuICByZWdpc3RlcjogZnVuY3Rpb24gKGlkLCBhY3Rvcikge1xuICAgIGNoaWxkcmVuLnNldChpZCwgYWN0b3IpO1xuICAgIHJldHVybiBpZDtcbiAgfSxcbiAgZ2V0OiBmdW5jdGlvbiAoaWQpIHtcbiAgICByZXR1cm4gY2hpbGRyZW4uZ2V0KGlkKTtcbiAgfSxcbiAgZnJlZTogZnVuY3Rpb24gKGlkKSB7XG4gICAgY2hpbGRyZW4uZGVsZXRlKGlkKTtcbiAgfVxufTtcblxuZXhwb3J0IHsgcmVnaXN0cnkgfTtcbiJdLCJuYW1lcyI6WyJjaGlsZHJlbiIsIk1hcCIsInNlc3Npb25JZEluZGV4IiwicmVnaXN0cnkiLCJib29rSWQiLCJjb25jYXQiLCJyZWdpc3RlciIsImlkIiwiYWN0b3IiLCJzZXQiLCJnZXQiLCJmcmVlIiwiZGVsZXRlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xstate/es/registry.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xstate/es/scheduler.js":
/*!*********************************************!*\
  !*** ./node_modules/xstate/es/scheduler.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Scheduler: () => (/* binding */ Scheduler)\n/* harmony export */ });\n/* harmony import */ var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_virtual/_tslib.js */ \"(ssr)/./node_modules/xstate/es/_virtual/_tslib.js\");\n\nvar defaultOptions = {\n    deferEvents: false\n};\nvar Scheduler = /*#__PURE__*/ /** @class */ function() {\n    function Scheduler(options) {\n        this.processingEvent = false;\n        this.queue = [];\n        this.initialized = false;\n        this.options = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, defaultOptions), options);\n    }\n    Scheduler.prototype.initialize = function(callback) {\n        this.initialized = true;\n        if (callback) {\n            if (!this.options.deferEvents) {\n                this.schedule(callback);\n                return;\n            }\n            this.process(callback);\n        }\n        this.flushEvents();\n    };\n    Scheduler.prototype.schedule = function(task) {\n        if (!this.initialized || this.processingEvent) {\n            this.queue.push(task);\n            return;\n        }\n        if (this.queue.length !== 0) {\n            throw new Error(\"Event queue should be empty when it is not processing events\");\n        }\n        this.process(task);\n        this.flushEvents();\n    };\n    Scheduler.prototype.clear = function() {\n        this.queue = [];\n    };\n    Scheduler.prototype.flushEvents = function() {\n        var nextCallback = this.queue.shift();\n        while(nextCallback){\n            this.process(nextCallback);\n            nextCallback = this.queue.shift();\n        }\n    };\n    Scheduler.prototype.process = function(callback) {\n        this.processingEvent = true;\n        try {\n            callback();\n        } catch (e) {\n            // there is no use to keep the future events\n            // as the situation is not anymore the same\n            this.clear();\n            throw e;\n        } finally{\n            this.processingEvent = false;\n        }\n    };\n    return Scheduler;\n}();\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMveHN0YXRlL2VzL3NjaGVkdWxlci5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFnRDtBQUVoRCxJQUFJQyxpQkFBaUI7SUFDbkJDLGFBQWE7QUFDZjtBQUVBLElBQUlDLFlBQ0osV0FBVyxHQUVYLFdBQVcsR0FDWDtJQUNFLFNBQVNBLFVBQVVDLE9BQU87UUFDeEIsSUFBSSxDQUFDQyxlQUFlLEdBQUc7UUFDdkIsSUFBSSxDQUFDQyxLQUFLLEdBQUcsRUFBRTtRQUNmLElBQUksQ0FBQ0MsV0FBVyxHQUFHO1FBQ25CLElBQUksQ0FBQ0gsT0FBTyxHQUFHSiwyREFBUUEsQ0FBQ0EsMkRBQVFBLENBQUMsQ0FBQyxHQUFHQyxpQkFBaUJHO0lBQ3hEO0lBRUFELFVBQVVLLFNBQVMsQ0FBQ0MsVUFBVSxHQUFHLFNBQVVDLFFBQVE7UUFDakQsSUFBSSxDQUFDSCxXQUFXLEdBQUc7UUFFbkIsSUFBSUcsVUFBVTtZQUNaLElBQUksQ0FBQyxJQUFJLENBQUNOLE9BQU8sQ0FBQ0YsV0FBVyxFQUFFO2dCQUM3QixJQUFJLENBQUNTLFFBQVEsQ0FBQ0Q7Z0JBQ2Q7WUFDRjtZQUVBLElBQUksQ0FBQ0UsT0FBTyxDQUFDRjtRQUNmO1FBRUEsSUFBSSxDQUFDRyxXQUFXO0lBQ2xCO0lBRUFWLFVBQVVLLFNBQVMsQ0FBQ0csUUFBUSxHQUFHLFNBQVVHLElBQUk7UUFDM0MsSUFBSSxDQUFDLElBQUksQ0FBQ1AsV0FBVyxJQUFJLElBQUksQ0FBQ0YsZUFBZSxFQUFFO1lBQzdDLElBQUksQ0FBQ0MsS0FBSyxDQUFDUyxJQUFJLENBQUNEO1lBQ2hCO1FBQ0Y7UUFFQSxJQUFJLElBQUksQ0FBQ1IsS0FBSyxDQUFDVSxNQUFNLEtBQUssR0FBRztZQUMzQixNQUFNLElBQUlDLE1BQU07UUFDbEI7UUFFQSxJQUFJLENBQUNMLE9BQU8sQ0FBQ0U7UUFDYixJQUFJLENBQUNELFdBQVc7SUFDbEI7SUFFQVYsVUFBVUssU0FBUyxDQUFDVSxLQUFLLEdBQUc7UUFDMUIsSUFBSSxDQUFDWixLQUFLLEdBQUcsRUFBRTtJQUNqQjtJQUVBSCxVQUFVSyxTQUFTLENBQUNLLFdBQVcsR0FBRztRQUNoQyxJQUFJTSxlQUFlLElBQUksQ0FBQ2IsS0FBSyxDQUFDYyxLQUFLO1FBRW5DLE1BQU9ELGFBQWM7WUFDbkIsSUFBSSxDQUFDUCxPQUFPLENBQUNPO1lBQ2JBLGVBQWUsSUFBSSxDQUFDYixLQUFLLENBQUNjLEtBQUs7UUFDakM7SUFDRjtJQUVBakIsVUFBVUssU0FBUyxDQUFDSSxPQUFPLEdBQUcsU0FBVUYsUUFBUTtRQUM5QyxJQUFJLENBQUNMLGVBQWUsR0FBRztRQUV2QixJQUFJO1lBQ0ZLO1FBQ0YsRUFBRSxPQUFPVyxHQUFHO1lBQ1YsNENBQTRDO1lBQzVDLDJDQUEyQztZQUMzQyxJQUFJLENBQUNILEtBQUs7WUFDVixNQUFNRztRQUNSLFNBQVU7WUFDUixJQUFJLENBQUNoQixlQUFlLEdBQUc7UUFDekI7SUFDRjtJQUVBLE9BQU9GO0FBQ1Q7QUFFcUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90aGUtZ3JpZC0yLy4vbm9kZV9tb2R1bGVzL3hzdGF0ZS9lcy9zY2hlZHVsZXIuanM/MWZlMSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBfX2Fzc2lnbiB9IGZyb20gJy4vX3ZpcnR1YWwvX3RzbGliLmpzJztcblxudmFyIGRlZmF1bHRPcHRpb25zID0ge1xuICBkZWZlckV2ZW50czogZmFsc2Vcbn07XG5cbnZhciBTY2hlZHVsZXIgPVxuLyojX19QVVJFX18qL1xuXG4vKiogQGNsYXNzICovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFNjaGVkdWxlcihvcHRpb25zKSB7XG4gICAgdGhpcy5wcm9jZXNzaW5nRXZlbnQgPSBmYWxzZTtcbiAgICB0aGlzLnF1ZXVlID0gW107XG4gICAgdGhpcy5pbml0aWFsaXplZCA9IGZhbHNlO1xuICAgIHRoaXMub3B0aW9ucyA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCBkZWZhdWx0T3B0aW9ucyksIG9wdGlvbnMpO1xuICB9XG5cbiAgU2NoZWR1bGVyLnByb3RvdHlwZS5pbml0aWFsaXplID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgdGhpcy5pbml0aWFsaXplZCA9IHRydWU7XG5cbiAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgIGlmICghdGhpcy5vcHRpb25zLmRlZmVyRXZlbnRzKSB7XG4gICAgICAgIHRoaXMuc2NoZWR1bGUoY2FsbGJhY2spO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRoaXMucHJvY2VzcyhjYWxsYmFjayk7XG4gICAgfVxuXG4gICAgdGhpcy5mbHVzaEV2ZW50cygpO1xuICB9O1xuXG4gIFNjaGVkdWxlci5wcm90b3R5cGUuc2NoZWR1bGUgPSBmdW5jdGlvbiAodGFzaykge1xuICAgIGlmICghdGhpcy5pbml0aWFsaXplZCB8fCB0aGlzLnByb2Nlc3NpbmdFdmVudCkge1xuICAgICAgdGhpcy5xdWV1ZS5wdXNoKHRhc2spO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnF1ZXVlLmxlbmd0aCAhPT0gMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdFdmVudCBxdWV1ZSBzaG91bGQgYmUgZW1wdHkgd2hlbiBpdCBpcyBub3QgcHJvY2Vzc2luZyBldmVudHMnKTtcbiAgICB9XG5cbiAgICB0aGlzLnByb2Nlc3ModGFzayk7XG4gICAgdGhpcy5mbHVzaEV2ZW50cygpO1xuICB9O1xuXG4gIFNjaGVkdWxlci5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5xdWV1ZSA9IFtdO1xuICB9O1xuXG4gIFNjaGVkdWxlci5wcm90b3R5cGUuZmx1c2hFdmVudHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIG5leHRDYWxsYmFjayA9IHRoaXMucXVldWUuc2hpZnQoKTtcblxuICAgIHdoaWxlIChuZXh0Q2FsbGJhY2spIHtcbiAgICAgIHRoaXMucHJvY2VzcyhuZXh0Q2FsbGJhY2spO1xuICAgICAgbmV4dENhbGxiYWNrID0gdGhpcy5xdWV1ZS5zaGlmdCgpO1xuICAgIH1cbiAgfTtcblxuICBTY2hlZHVsZXIucHJvdG90eXBlLnByb2Nlc3MgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICB0aGlzLnByb2Nlc3NpbmdFdmVudCA9IHRydWU7XG5cbiAgICB0cnkge1xuICAgICAgY2FsbGJhY2soKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyB0aGVyZSBpcyBubyB1c2UgdG8ga2VlcCB0aGUgZnV0dXJlIGV2ZW50c1xuICAgICAgLy8gYXMgdGhlIHNpdHVhdGlvbiBpcyBub3QgYW55bW9yZSB0aGUgc2FtZVxuICAgICAgdGhpcy5jbGVhcigpO1xuICAgICAgdGhyb3cgZTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgdGhpcy5wcm9jZXNzaW5nRXZlbnQgPSBmYWxzZTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIFNjaGVkdWxlcjtcbn0oKTtcblxuZXhwb3J0IHsgU2NoZWR1bGVyIH07XG4iXSwibmFtZXMiOlsiX19hc3NpZ24iLCJkZWZhdWx0T3B0aW9ucyIsImRlZmVyRXZlbnRzIiwiU2NoZWR1bGVyIiwib3B0aW9ucyIsInByb2Nlc3NpbmdFdmVudCIsInF1ZXVlIiwiaW5pdGlhbGl6ZWQiLCJwcm90b3R5cGUiLCJpbml0aWFsaXplIiwiY2FsbGJhY2siLCJzY2hlZHVsZSIsInByb2Nlc3MiLCJmbHVzaEV2ZW50cyIsInRhc2siLCJwdXNoIiwibGVuZ3RoIiwiRXJyb3IiLCJjbGVhciIsIm5leHRDYWxsYmFjayIsInNoaWZ0IiwiZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xstate/es/scheduler.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xstate/es/schema.js":
/*!******************************************!*\
  !*** ./node_modules/xstate/es/schema.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createSchema: () => (/* binding */ createSchema),\n/* harmony export */   t: () => (/* binding */ t)\n/* harmony export */ });\nfunction createSchema(schema) {\n    return schema;\n}\nvar t = createSchema;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMveHN0YXRlL2VzL3NjaGVtYS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLFNBQVNBLGFBQWFDLE1BQU07SUFDMUIsT0FBT0E7QUFDVDtBQUNBLElBQUlDLElBQUlGO0FBRW1CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGhlLWdyaWQtMi8uL25vZGVfbW9kdWxlcy94c3RhdGUvZXMvc2NoZW1hLmpzPzRjZDgiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gY3JlYXRlU2NoZW1hKHNjaGVtYSkge1xuICByZXR1cm4gc2NoZW1hO1xufVxudmFyIHQgPSBjcmVhdGVTY2hlbWE7XG5cbmV4cG9ydCB7IGNyZWF0ZVNjaGVtYSwgdCB9O1xuIl0sIm5hbWVzIjpbImNyZWF0ZVNjaGVtYSIsInNjaGVtYSIsInQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xstate/es/schema.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xstate/es/serviceScope.js":
/*!************************************************!*\
  !*** ./node_modules/xstate/es/serviceScope.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   consume: () => (/* binding */ consume),\n/* harmony export */   provide: () => (/* binding */ provide)\n/* harmony export */ });\n/**\r\n * Maintains a stack of the current service in scope.\r\n * This is used to provide the correct service to spawn().\r\n */ var serviceStack = [];\nvar provide = function(service, fn) {\n    serviceStack.push(service);\n    var result = fn(service);\n    serviceStack.pop();\n    return result;\n};\nvar consume = function(fn) {\n    return fn(serviceStack[serviceStack.length - 1]);\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMveHN0YXRlL2VzL3NlcnZpY2VTY29wZS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBOzs7Q0FHQyxHQUNELElBQUlBLGVBQWUsRUFBRTtBQUNyQixJQUFJQyxVQUFVLFNBQVVDLE9BQU8sRUFBRUMsRUFBRTtJQUNqQ0gsYUFBYUksSUFBSSxDQUFDRjtJQUNsQixJQUFJRyxTQUFTRixHQUFHRDtJQUNoQkYsYUFBYU0sR0FBRztJQUNoQixPQUFPRDtBQUNUO0FBQ0EsSUFBSUUsVUFBVSxTQUFVSixFQUFFO0lBQ3hCLE9BQU9BLEdBQUdILFlBQVksQ0FBQ0EsYUFBYVEsTUFBTSxHQUFHLEVBQUU7QUFDakQ7QUFFNEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90aGUtZ3JpZC0yLy4vbm9kZV9tb2R1bGVzL3hzdGF0ZS9lcy9zZXJ2aWNlU2NvcGUuanM/N2RkZSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogTWFpbnRhaW5zIGEgc3RhY2sgb2YgdGhlIGN1cnJlbnQgc2VydmljZSBpbiBzY29wZS5cclxuICogVGhpcyBpcyB1c2VkIHRvIHByb3ZpZGUgdGhlIGNvcnJlY3Qgc2VydmljZSB0byBzcGF3bigpLlxyXG4gKi9cbnZhciBzZXJ2aWNlU3RhY2sgPSBbXTtcbnZhciBwcm92aWRlID0gZnVuY3Rpb24gKHNlcnZpY2UsIGZuKSB7XG4gIHNlcnZpY2VTdGFjay5wdXNoKHNlcnZpY2UpO1xuICB2YXIgcmVzdWx0ID0gZm4oc2VydmljZSk7XG4gIHNlcnZpY2VTdGFjay5wb3AoKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG52YXIgY29uc3VtZSA9IGZ1bmN0aW9uIChmbikge1xuICByZXR1cm4gZm4oc2VydmljZVN0YWNrW3NlcnZpY2VTdGFjay5sZW5ndGggLSAxXSk7XG59O1xuXG5leHBvcnQgeyBjb25zdW1lLCBwcm92aWRlIH07XG4iXSwibmFtZXMiOlsic2VydmljZVN0YWNrIiwicHJvdmlkZSIsInNlcnZpY2UiLCJmbiIsInB1c2giLCJyZXN1bHQiLCJwb3AiLCJjb25zdW1lIiwibGVuZ3RoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xstate/es/serviceScope.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xstate/es/stateUtils.js":
/*!**********************************************!*\
  !*** ./node_modules/xstate/es/stateUtils.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getAdjList: () => (/* binding */ getAdjList),\n/* harmony export */   getAllChildren: () => (/* binding */ getAllChildren),\n/* harmony export */   getAllStateNodes: () => (/* binding */ getAllStateNodes),\n/* harmony export */   getChildren: () => (/* binding */ getChildren),\n/* harmony export */   getConfiguration: () => (/* binding */ getConfiguration),\n/* harmony export */   getMeta: () => (/* binding */ getMeta),\n/* harmony export */   getTagsFromConfiguration: () => (/* binding */ getTagsFromConfiguration),\n/* harmony export */   getValue: () => (/* binding */ getValue),\n/* harmony export */   has: () => (/* binding */ has),\n/* harmony export */   isInFinalState: () => (/* binding */ isInFinalState),\n/* harmony export */   isLeafNode: () => (/* binding */ isLeafNode),\n/* harmony export */   nextEvents: () => (/* binding */ nextEvents)\n/* harmony export */ });\n/* harmony import */ var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_virtual/_tslib.js */ \"(ssr)/./node_modules/xstate/es/_virtual/_tslib.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/xstate/es/utils.js\");\n\n\nvar isLeafNode = function(stateNode) {\n    return stateNode.type === \"atomic\" || stateNode.type === \"final\";\n};\nfunction getAllChildren(stateNode) {\n    return Object.keys(stateNode.states).map(function(key) {\n        return stateNode.states[key];\n    });\n}\nfunction getChildren(stateNode) {\n    return getAllChildren(stateNode).filter(function(sn) {\n        return sn.type !== \"history\";\n    });\n}\nfunction getAllStateNodes(stateNode) {\n    var stateNodes = [\n        stateNode\n    ];\n    if (isLeafNode(stateNode)) {\n        return stateNodes;\n    }\n    return stateNodes.concat((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)(getChildren(stateNode).map(getAllStateNodes)));\n}\nfunction getConfiguration(prevStateNodes, stateNodes) {\n    var e_1, _a, e_2, _b, e_3, _c, e_4, _d;\n    var prevConfiguration = new Set(prevStateNodes);\n    var prevAdjList = getAdjList(prevConfiguration);\n    var configuration = new Set(stateNodes);\n    try {\n        // add all ancestors\n        for(var configuration_1 = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__values)(configuration), configuration_1_1 = configuration_1.next(); !configuration_1_1.done; configuration_1_1 = configuration_1.next()){\n            var s = configuration_1_1.value;\n            var m = s.parent;\n            while(m && !configuration.has(m)){\n                configuration.add(m);\n                m = m.parent;\n            }\n        }\n    } catch (e_1_1) {\n        e_1 = {\n            error: e_1_1\n        };\n    } finally{\n        try {\n            if (configuration_1_1 && !configuration_1_1.done && (_a = configuration_1.return)) _a.call(configuration_1);\n        } finally{\n            if (e_1) throw e_1.error;\n        }\n    }\n    var adjList = getAdjList(configuration);\n    try {\n        // add descendants\n        for(var configuration_2 = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__values)(configuration), configuration_2_1 = configuration_2.next(); !configuration_2_1.done; configuration_2_1 = configuration_2.next()){\n            var s = configuration_2_1.value; // if previously active, add existing child nodes\n            if (s.type === \"compound\" && (!adjList.get(s) || !adjList.get(s).length)) {\n                if (prevAdjList.get(s)) {\n                    prevAdjList.get(s).forEach(function(sn) {\n                        return configuration.add(sn);\n                    });\n                } else {\n                    s.initialStateNodes.forEach(function(sn) {\n                        return configuration.add(sn);\n                    });\n                }\n            } else {\n                if (s.type === \"parallel\") {\n                    try {\n                        for(var _e = (e_3 = void 0, (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__values)(getChildren(s))), _f = _e.next(); !_f.done; _f = _e.next()){\n                            var child = _f.value;\n                            if (!configuration.has(child)) {\n                                configuration.add(child);\n                                if (prevAdjList.get(child)) {\n                                    prevAdjList.get(child).forEach(function(sn) {\n                                        return configuration.add(sn);\n                                    });\n                                } else {\n                                    child.initialStateNodes.forEach(function(sn) {\n                                        return configuration.add(sn);\n                                    });\n                                }\n                            }\n                        }\n                    } catch (e_3_1) {\n                        e_3 = {\n                            error: e_3_1\n                        };\n                    } finally{\n                        try {\n                            if (_f && !_f.done && (_c = _e.return)) _c.call(_e);\n                        } finally{\n                            if (e_3) throw e_3.error;\n                        }\n                    }\n                }\n            }\n        }\n    } catch (e_2_1) {\n        e_2 = {\n            error: e_2_1\n        };\n    } finally{\n        try {\n            if (configuration_2_1 && !configuration_2_1.done && (_b = configuration_2.return)) _b.call(configuration_2);\n        } finally{\n            if (e_2) throw e_2.error;\n        }\n    }\n    try {\n        // add all ancestors\n        for(var configuration_3 = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__values)(configuration), configuration_3_1 = configuration_3.next(); !configuration_3_1.done; configuration_3_1 = configuration_3.next()){\n            var s = configuration_3_1.value;\n            var m = s.parent;\n            while(m && !configuration.has(m)){\n                configuration.add(m);\n                m = m.parent;\n            }\n        }\n    } catch (e_4_1) {\n        e_4 = {\n            error: e_4_1\n        };\n    } finally{\n        try {\n            if (configuration_3_1 && !configuration_3_1.done && (_d = configuration_3.return)) _d.call(configuration_3);\n        } finally{\n            if (e_4) throw e_4.error;\n        }\n    }\n    return configuration;\n}\nfunction getValueFromAdj(baseNode, adjList) {\n    var childStateNodes = adjList.get(baseNode);\n    if (!childStateNodes) {\n        return {}; // todo: fix?\n    }\n    if (baseNode.type === \"compound\") {\n        var childStateNode = childStateNodes[0];\n        if (childStateNode) {\n            if (isLeafNode(childStateNode)) {\n                return childStateNode.key;\n            }\n        } else {\n            return {};\n        }\n    }\n    var stateValue = {};\n    childStateNodes.forEach(function(csn) {\n        stateValue[csn.key] = getValueFromAdj(csn, adjList);\n    });\n    return stateValue;\n}\nfunction getAdjList(configuration) {\n    var e_5, _a;\n    var adjList = new Map();\n    try {\n        for(var configuration_4 = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__values)(configuration), configuration_4_1 = configuration_4.next(); !configuration_4_1.done; configuration_4_1 = configuration_4.next()){\n            var s = configuration_4_1.value;\n            if (!adjList.has(s)) {\n                adjList.set(s, []);\n            }\n            if (s.parent) {\n                if (!adjList.has(s.parent)) {\n                    adjList.set(s.parent, []);\n                }\n                adjList.get(s.parent).push(s);\n            }\n        }\n    } catch (e_5_1) {\n        e_5 = {\n            error: e_5_1\n        };\n    } finally{\n        try {\n            if (configuration_4_1 && !configuration_4_1.done && (_a = configuration_4.return)) _a.call(configuration_4);\n        } finally{\n            if (e_5) throw e_5.error;\n        }\n    }\n    return adjList;\n}\nfunction getValue(rootNode, configuration) {\n    var config = getConfiguration([\n        rootNode\n    ], configuration);\n    return getValueFromAdj(rootNode, getAdjList(config));\n}\nfunction has(iterable, item) {\n    if (Array.isArray(iterable)) {\n        return iterable.some(function(member) {\n            return member === item;\n        });\n    }\n    if (iterable instanceof Set) {\n        return iterable.has(item);\n    }\n    return false; // TODO: fix\n}\nfunction nextEvents(configuration) {\n    return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)([], (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__read)(new Set((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)([], (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__read)(configuration.map(function(sn) {\n        return sn.ownEvents;\n    })), false)))), false);\n}\nfunction isInFinalState(configuration, stateNode) {\n    if (stateNode.type === \"compound\") {\n        return getChildren(stateNode).some(function(s) {\n            return s.type === \"final\" && has(configuration, s);\n        });\n    }\n    if (stateNode.type === \"parallel\") {\n        return getChildren(stateNode).every(function(sn) {\n            return isInFinalState(configuration, sn);\n        });\n    }\n    return false;\n}\nfunction getMeta(configuration) {\n    if (configuration === void 0) {\n        configuration = [];\n    }\n    return configuration.reduce(function(acc, stateNode) {\n        if (stateNode.meta !== undefined) {\n            acc[stateNode.id] = stateNode.meta;\n        }\n        return acc;\n    }, {});\n}\nfunction getTagsFromConfiguration(configuration) {\n    return new Set((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.flatten)(configuration.map(function(sn) {\n        return sn.tags;\n    })));\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xstate/es/stateUtils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xstate/es/types.js":
/*!*****************************************!*\
  !*** ./node_modules/xstate/es/types.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ActionTypes: () => (/* binding */ ActionTypes),\n/* harmony export */   SpecialTargets: () => (/* binding */ SpecialTargets)\n/* harmony export */ });\nvar ActionTypes;\n(function(ActionTypes) {\n    ActionTypes[\"Start\"] = \"xstate.start\";\n    ActionTypes[\"Stop\"] = \"xstate.stop\";\n    ActionTypes[\"Raise\"] = \"xstate.raise\";\n    ActionTypes[\"Send\"] = \"xstate.send\";\n    ActionTypes[\"Cancel\"] = \"xstate.cancel\";\n    ActionTypes[\"NullEvent\"] = \"\";\n    ActionTypes[\"Assign\"] = \"xstate.assign\";\n    ActionTypes[\"After\"] = \"xstate.after\";\n    ActionTypes[\"DoneState\"] = \"done.state\";\n    ActionTypes[\"DoneInvoke\"] = \"done.invoke\";\n    ActionTypes[\"Log\"] = \"xstate.log\";\n    ActionTypes[\"Init\"] = \"xstate.init\";\n    ActionTypes[\"Invoke\"] = \"xstate.invoke\";\n    ActionTypes[\"ErrorExecution\"] = \"error.execution\";\n    ActionTypes[\"ErrorCommunication\"] = \"error.communication\";\n    ActionTypes[\"ErrorPlatform\"] = \"error.platform\";\n    ActionTypes[\"ErrorCustom\"] = \"xstate.error\";\n    ActionTypes[\"Update\"] = \"xstate.update\";\n    ActionTypes[\"Pure\"] = \"xstate.pure\";\n    ActionTypes[\"Choose\"] = \"xstate.choose\";\n})(ActionTypes || (ActionTypes = {}));\nvar SpecialTargets;\n(function(SpecialTargets) {\n    SpecialTargets[\"Parent\"] = \"#_parent\";\n    SpecialTargets[\"Internal\"] = \"#_internal\";\n})(SpecialTargets || (SpecialTargets = {}));\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMveHN0YXRlL2VzL3R5cGVzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsSUFBSUE7QUFFSCxVQUFVQSxXQUFXO0lBQ3BCQSxXQUFXLENBQUMsUUFBUSxHQUFHO0lBQ3ZCQSxXQUFXLENBQUMsT0FBTyxHQUFHO0lBQ3RCQSxXQUFXLENBQUMsUUFBUSxHQUFHO0lBQ3ZCQSxXQUFXLENBQUMsT0FBTyxHQUFHO0lBQ3RCQSxXQUFXLENBQUMsU0FBUyxHQUFHO0lBQ3hCQSxXQUFXLENBQUMsWUFBWSxHQUFHO0lBQzNCQSxXQUFXLENBQUMsU0FBUyxHQUFHO0lBQ3hCQSxXQUFXLENBQUMsUUFBUSxHQUFHO0lBQ3ZCQSxXQUFXLENBQUMsWUFBWSxHQUFHO0lBQzNCQSxXQUFXLENBQUMsYUFBYSxHQUFHO0lBQzVCQSxXQUFXLENBQUMsTUFBTSxHQUFHO0lBQ3JCQSxXQUFXLENBQUMsT0FBTyxHQUFHO0lBQ3RCQSxXQUFXLENBQUMsU0FBUyxHQUFHO0lBQ3hCQSxXQUFXLENBQUMsaUJBQWlCLEdBQUc7SUFDaENBLFdBQVcsQ0FBQyxxQkFBcUIsR0FBRztJQUNwQ0EsV0FBVyxDQUFDLGdCQUFnQixHQUFHO0lBQy9CQSxXQUFXLENBQUMsY0FBYyxHQUFHO0lBQzdCQSxXQUFXLENBQUMsU0FBUyxHQUFHO0lBQ3hCQSxXQUFXLENBQUMsT0FBTyxHQUFHO0lBQ3RCQSxXQUFXLENBQUMsU0FBUyxHQUFHO0FBQzFCLEdBQUdBLGVBQWdCQSxDQUFBQSxjQUFjLENBQUM7QUFFbEMsSUFBSUM7QUFFSCxVQUFVQSxjQUFjO0lBQ3ZCQSxjQUFjLENBQUMsU0FBUyxHQUFHO0lBQzNCQSxjQUFjLENBQUMsV0FBVyxHQUFHO0FBQy9CLEdBQUdBLGtCQUFtQkEsQ0FBQUEsaUJBQWlCLENBQUM7QUFFRCIsInNvdXJjZXMiOlsid2VicGFjazovL3RoZS1ncmlkLTIvLi9ub2RlX21vZHVsZXMveHN0YXRlL2VzL3R5cGVzLmpzPzUxMDciXSwic291cmNlc0NvbnRlbnQiOlsidmFyIEFjdGlvblR5cGVzO1xuXG4oZnVuY3Rpb24gKEFjdGlvblR5cGVzKSB7XG4gIEFjdGlvblR5cGVzW1wiU3RhcnRcIl0gPSBcInhzdGF0ZS5zdGFydFwiO1xuICBBY3Rpb25UeXBlc1tcIlN0b3BcIl0gPSBcInhzdGF0ZS5zdG9wXCI7XG4gIEFjdGlvblR5cGVzW1wiUmFpc2VcIl0gPSBcInhzdGF0ZS5yYWlzZVwiO1xuICBBY3Rpb25UeXBlc1tcIlNlbmRcIl0gPSBcInhzdGF0ZS5zZW5kXCI7XG4gIEFjdGlvblR5cGVzW1wiQ2FuY2VsXCJdID0gXCJ4c3RhdGUuY2FuY2VsXCI7XG4gIEFjdGlvblR5cGVzW1wiTnVsbEV2ZW50XCJdID0gXCJcIjtcbiAgQWN0aW9uVHlwZXNbXCJBc3NpZ25cIl0gPSBcInhzdGF0ZS5hc3NpZ25cIjtcbiAgQWN0aW9uVHlwZXNbXCJBZnRlclwiXSA9IFwieHN0YXRlLmFmdGVyXCI7XG4gIEFjdGlvblR5cGVzW1wiRG9uZVN0YXRlXCJdID0gXCJkb25lLnN0YXRlXCI7XG4gIEFjdGlvblR5cGVzW1wiRG9uZUludm9rZVwiXSA9IFwiZG9uZS5pbnZva2VcIjtcbiAgQWN0aW9uVHlwZXNbXCJMb2dcIl0gPSBcInhzdGF0ZS5sb2dcIjtcbiAgQWN0aW9uVHlwZXNbXCJJbml0XCJdID0gXCJ4c3RhdGUuaW5pdFwiO1xuICBBY3Rpb25UeXBlc1tcIkludm9rZVwiXSA9IFwieHN0YXRlLmludm9rZVwiO1xuICBBY3Rpb25UeXBlc1tcIkVycm9yRXhlY3V0aW9uXCJdID0gXCJlcnJvci5leGVjdXRpb25cIjtcbiAgQWN0aW9uVHlwZXNbXCJFcnJvckNvbW11bmljYXRpb25cIl0gPSBcImVycm9yLmNvbW11bmljYXRpb25cIjtcbiAgQWN0aW9uVHlwZXNbXCJFcnJvclBsYXRmb3JtXCJdID0gXCJlcnJvci5wbGF0Zm9ybVwiO1xuICBBY3Rpb25UeXBlc1tcIkVycm9yQ3VzdG9tXCJdID0gXCJ4c3RhdGUuZXJyb3JcIjtcbiAgQWN0aW9uVHlwZXNbXCJVcGRhdGVcIl0gPSBcInhzdGF0ZS51cGRhdGVcIjtcbiAgQWN0aW9uVHlwZXNbXCJQdXJlXCJdID0gXCJ4c3RhdGUucHVyZVwiO1xuICBBY3Rpb25UeXBlc1tcIkNob29zZVwiXSA9IFwieHN0YXRlLmNob29zZVwiO1xufSkoQWN0aW9uVHlwZXMgfHwgKEFjdGlvblR5cGVzID0ge30pKTtcblxudmFyIFNwZWNpYWxUYXJnZXRzO1xuXG4oZnVuY3Rpb24gKFNwZWNpYWxUYXJnZXRzKSB7XG4gIFNwZWNpYWxUYXJnZXRzW1wiUGFyZW50XCJdID0gXCIjX3BhcmVudFwiO1xuICBTcGVjaWFsVGFyZ2V0c1tcIkludGVybmFsXCJdID0gXCIjX2ludGVybmFsXCI7XG59KShTcGVjaWFsVGFyZ2V0cyB8fCAoU3BlY2lhbFRhcmdldHMgPSB7fSkpO1xuXG5leHBvcnQgeyBBY3Rpb25UeXBlcywgU3BlY2lhbFRhcmdldHMgfTtcbiJdLCJuYW1lcyI6WyJBY3Rpb25UeXBlcyIsIlNwZWNpYWxUYXJnZXRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xstate/es/types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/xstate/es/utils.js":
/*!*****************************************!*\
  !*** ./node_modules/xstate/es/utils.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createInvokeId: () => (/* binding */ createInvokeId),\n/* harmony export */   evaluateGuard: () => (/* binding */ evaluateGuard),\n/* harmony export */   flatten: () => (/* binding */ flatten),\n/* harmony export */   getActionType: () => (/* binding */ getActionType),\n/* harmony export */   getEventType: () => (/* binding */ getEventType),\n/* harmony export */   interopSymbols: () => (/* binding */ interopSymbols),\n/* harmony export */   isActor: () => (/* binding */ isActor),\n/* harmony export */   isArray: () => (/* binding */ isArray),\n/* harmony export */   isBehavior: () => (/* binding */ isBehavior),\n/* harmony export */   isBuiltInEvent: () => (/* binding */ isBuiltInEvent),\n/* harmony export */   isFunction: () => (/* binding */ isFunction),\n/* harmony export */   isMachine: () => (/* binding */ isMachine),\n/* harmony export */   isObservable: () => (/* binding */ isObservable),\n/* harmony export */   isPromiseLike: () => (/* binding */ isPromiseLike),\n/* harmony export */   isRaisableAction: () => (/* binding */ isRaisableAction),\n/* harmony export */   isStateLike: () => (/* binding */ isStateLike),\n/* harmony export */   isString: () => (/* binding */ isString),\n/* harmony export */   keys: () => (/* binding */ keys),\n/* harmony export */   mapContext: () => (/* binding */ mapContext),\n/* harmony export */   mapFilterValues: () => (/* binding */ mapFilterValues),\n/* harmony export */   mapValues: () => (/* binding */ mapValues),\n/* harmony export */   matchesState: () => (/* binding */ matchesState),\n/* harmony export */   nestedPath: () => (/* binding */ nestedPath),\n/* harmony export */   normalizeTarget: () => (/* binding */ normalizeTarget),\n/* harmony export */   partition: () => (/* binding */ partition),\n/* harmony export */   path: () => (/* binding */ path),\n/* harmony export */   pathToStateValue: () => (/* binding */ pathToStateValue),\n/* harmony export */   pathsToStateValue: () => (/* binding */ pathsToStateValue),\n/* harmony export */   reportUnhandledExceptionOnInvocation: () => (/* binding */ reportUnhandledExceptionOnInvocation),\n/* harmony export */   symbolObservable: () => (/* binding */ symbolObservable),\n/* harmony export */   toArray: () => (/* binding */ toArray),\n/* harmony export */   toArrayStrict: () => (/* binding */ toArrayStrict),\n/* harmony export */   toEventObject: () => (/* binding */ toEventObject),\n/* harmony export */   toGuard: () => (/* binding */ toGuard),\n/* harmony export */   toInvokeSource: () => (/* binding */ toInvokeSource),\n/* harmony export */   toObserver: () => (/* binding */ toObserver),\n/* harmony export */   toSCXMLEvent: () => (/* binding */ toSCXMLEvent),\n/* harmony export */   toStatePath: () => (/* binding */ toStatePath),\n/* harmony export */   toStatePaths: () => (/* binding */ toStatePaths),\n/* harmony export */   toStateValue: () => (/* binding */ toStateValue),\n/* harmony export */   toTransitionConfigArray: () => (/* binding */ toTransitionConfigArray),\n/* harmony export */   uniqueId: () => (/* binding */ uniqueId),\n/* harmony export */   updateContext: () => (/* binding */ updateContext),\n/* harmony export */   updateHistoryStates: () => (/* binding */ updateHistoryStates),\n/* harmony export */   updateHistoryValue: () => (/* binding */ updateHistoryValue),\n/* harmony export */   warn: () => (/* binding */ warn)\n/* harmony export */ });\n/* harmony import */ var _virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_virtual/_tslib.js */ \"(ssr)/./node_modules/xstate/es/_virtual/_tslib.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./types.js */ \"(ssr)/./node_modules/xstate/es/types.js\");\n/* harmony import */ var _actionTypes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./actionTypes.js */ \"(ssr)/./node_modules/xstate/es/actionTypes.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants.js */ \"(ssr)/./node_modules/xstate/es/constants.js\");\n/* harmony import */ var _environment_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./environment.js */ \"(ssr)/./node_modules/xstate/es/environment.js\");\n\n\n\n\n\nvar _a;\nfunction keys(value) {\n    return Object.keys(value);\n}\nfunction matchesState(parentStateId, childStateId, delimiter) {\n    if (delimiter === void 0) {\n        delimiter = _constants_js__WEBPACK_IMPORTED_MODULE_0__.STATE_DELIMITER;\n    }\n    var parentStateValue = toStateValue(parentStateId, delimiter);\n    var childStateValue = toStateValue(childStateId, delimiter);\n    if (isString(childStateValue)) {\n        if (isString(parentStateValue)) {\n            return childStateValue === parentStateValue;\n        } // Parent more specific than child\n        return false;\n    }\n    if (isString(parentStateValue)) {\n        return parentStateValue in childStateValue;\n    }\n    return Object.keys(parentStateValue).every(function(key) {\n        if (!(key in childStateValue)) {\n            return false;\n        }\n        return matchesState(parentStateValue[key], childStateValue[key]);\n    });\n}\nfunction getEventType(event) {\n    try {\n        return isString(event) || typeof event === \"number\" ? \"\".concat(event) : event.type;\n    } catch (e) {\n        throw new Error(\"Events must be strings or objects with a string event.type property.\");\n    }\n}\nfunction getActionType(action) {\n    try {\n        return isString(action) || typeof action === \"number\" ? \"\".concat(action) : isFunction(action) ? action.name : action.type;\n    } catch (e) {\n        throw new Error(\"Actions must be strings or objects with a string action.type property.\");\n    }\n}\nfunction toStatePath(stateId, delimiter) {\n    try {\n        if (isArray(stateId)) {\n            return stateId;\n        }\n        return stateId.toString().split(delimiter);\n    } catch (e) {\n        throw new Error(\"'\".concat(stateId, \"' is not a valid state path.\"));\n    }\n}\nfunction isStateLike(state) {\n    return typeof state === \"object\" && \"value\" in state && \"context\" in state && \"event\" in state && \"_event\" in state;\n}\nfunction toStateValue(stateValue, delimiter) {\n    if (isStateLike(stateValue)) {\n        return stateValue.value;\n    }\n    if (isArray(stateValue)) {\n        return pathToStateValue(stateValue);\n    }\n    if (typeof stateValue !== \"string\") {\n        return stateValue;\n    }\n    var statePath = toStatePath(stateValue, delimiter);\n    return pathToStateValue(statePath);\n}\nfunction pathToStateValue(statePath) {\n    if (statePath.length === 1) {\n        return statePath[0];\n    }\n    var value = {};\n    var marker = value;\n    for(var i = 0; i < statePath.length - 1; i++){\n        if (i === statePath.length - 2) {\n            marker[statePath[i]] = statePath[i + 1];\n        } else {\n            marker[statePath[i]] = {};\n            marker = marker[statePath[i]];\n        }\n    }\n    return value;\n}\nfunction mapValues(collection, iteratee) {\n    var result = {};\n    var collectionKeys = Object.keys(collection);\n    for(var i = 0; i < collectionKeys.length; i++){\n        var key = collectionKeys[i];\n        result[key] = iteratee(collection[key], key, collection, i);\n    }\n    return result;\n}\nfunction mapFilterValues(collection, iteratee, predicate) {\n    var e_1, _a;\n    var result = {};\n    try {\n        for(var _b = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__values)(Object.keys(collection)), _c = _b.next(); !_c.done; _c = _b.next()){\n            var key = _c.value;\n            var item = collection[key];\n            if (!predicate(item)) {\n                continue;\n            }\n            result[key] = iteratee(item, key, collection);\n        }\n    } catch (e_1_1) {\n        e_1 = {\n            error: e_1_1\n        };\n    } finally{\n        try {\n            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally{\n            if (e_1) throw e_1.error;\n        }\n    }\n    return result;\n}\n/**\r\n * Retrieves a value at the given path.\r\n * @param props The deep path to the prop of the desired value\r\n */ var path = function(props) {\n    return function(object) {\n        var e_2, _a;\n        var result = object;\n        try {\n            for(var props_1 = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__values)(props), props_1_1 = props_1.next(); !props_1_1.done; props_1_1 = props_1.next()){\n                var prop = props_1_1.value;\n                result = result[prop];\n            }\n        } catch (e_2_1) {\n            e_2 = {\n                error: e_2_1\n            };\n        } finally{\n            try {\n                if (props_1_1 && !props_1_1.done && (_a = props_1.return)) _a.call(props_1);\n            } finally{\n                if (e_2) throw e_2.error;\n            }\n        }\n        return result;\n    };\n};\n/**\r\n * Retrieves a value at the given path via the nested accessor prop.\r\n * @param props The deep path to the prop of the desired value\r\n */ function nestedPath(props, accessorProp) {\n    return function(object) {\n        var e_3, _a;\n        var result = object;\n        try {\n            for(var props_2 = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__values)(props), props_2_1 = props_2.next(); !props_2_1.done; props_2_1 = props_2.next()){\n                var prop = props_2_1.value;\n                result = result[accessorProp][prop];\n            }\n        } catch (e_3_1) {\n            e_3 = {\n                error: e_3_1\n            };\n        } finally{\n            try {\n                if (props_2_1 && !props_2_1.done && (_a = props_2.return)) _a.call(props_2);\n            } finally{\n                if (e_3) throw e_3.error;\n            }\n        }\n        return result;\n    };\n}\nfunction toStatePaths(stateValue) {\n    if (!stateValue) {\n        return [\n            []\n        ];\n    }\n    if (isString(stateValue)) {\n        return [\n            [\n                stateValue\n            ]\n        ];\n    }\n    var result = flatten(Object.keys(stateValue).map(function(key) {\n        var subStateValue = stateValue[key];\n        if (typeof subStateValue !== \"string\" && (!subStateValue || !Object.keys(subStateValue).length)) {\n            return [\n                [\n                    key\n                ]\n            ];\n        }\n        return toStatePaths(stateValue[key]).map(function(subPath) {\n            return [\n                key\n            ].concat(subPath);\n        });\n    }));\n    return result;\n}\nfunction pathsToStateValue(paths) {\n    var e_4, _a;\n    var result = {};\n    if (paths && paths.length === 1 && paths[0].length === 1) {\n        return paths[0][0];\n    }\n    try {\n        for(var paths_1 = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__values)(paths), paths_1_1 = paths_1.next(); !paths_1_1.done; paths_1_1 = paths_1.next()){\n            var currentPath = paths_1_1.value;\n            var marker = result; // tslint:disable-next-line:prefer-for-of\n            for(var i = 0; i < currentPath.length; i++){\n                var subPath = currentPath[i];\n                if (i === currentPath.length - 2) {\n                    marker[subPath] = currentPath[i + 1];\n                    break;\n                }\n                marker[subPath] = marker[subPath] || {};\n                marker = marker[subPath];\n            }\n        }\n    } catch (e_4_1) {\n        e_4 = {\n            error: e_4_1\n        };\n    } finally{\n        try {\n            if (paths_1_1 && !paths_1_1.done && (_a = paths_1.return)) _a.call(paths_1);\n        } finally{\n            if (e_4) throw e_4.error;\n        }\n    }\n    return result;\n}\nfunction flatten(array) {\n    var _a;\n    return (_a = []).concat.apply(_a, (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)([], (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__read)(array), false));\n}\nfunction toArrayStrict(value) {\n    if (isArray(value)) {\n        return value;\n    }\n    return [\n        value\n    ];\n}\nfunction toArray(value) {\n    if (value === undefined) {\n        return [];\n    }\n    return toArrayStrict(value);\n}\nfunction mapContext(mapper, context, _event) {\n    var e_5, _a;\n    if (isFunction(mapper)) {\n        return mapper(context, _event.data);\n    }\n    var result = {};\n    try {\n        for(var _b = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__values)(Object.keys(mapper)), _c = _b.next(); !_c.done; _c = _b.next()){\n            var key = _c.value;\n            var subMapper = mapper[key];\n            if (isFunction(subMapper)) {\n                result[key] = subMapper(context, _event.data);\n            } else {\n                result[key] = subMapper;\n            }\n        }\n    } catch (e_5_1) {\n        e_5 = {\n            error: e_5_1\n        };\n    } finally{\n        try {\n            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally{\n            if (e_5) throw e_5.error;\n        }\n    }\n    return result;\n}\nfunction isBuiltInEvent(eventType) {\n    return /^(done|error)\\./.test(eventType);\n}\nfunction isPromiseLike(value) {\n    if (value instanceof Promise) {\n        return true;\n    } // Check if shape matches the Promise/A+ specification for a \"thenable\".\n    if (value !== null && (isFunction(value) || typeof value === \"object\") && isFunction(value.then)) {\n        return true;\n    }\n    return false;\n}\nfunction isBehavior(value) {\n    return value !== null && typeof value === \"object\" && \"transition\" in value && typeof value.transition === \"function\";\n}\nfunction partition(items, predicate) {\n    var e_6, _a;\n    var _b = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__read)([\n        [],\n        []\n    ], 2), truthy = _b[0], falsy = _b[1];\n    try {\n        for(var items_1 = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__values)(items), items_1_1 = items_1.next(); !items_1_1.done; items_1_1 = items_1.next()){\n            var item = items_1_1.value;\n            if (predicate(item)) {\n                truthy.push(item);\n            } else {\n                falsy.push(item);\n            }\n        }\n    } catch (e_6_1) {\n        e_6 = {\n            error: e_6_1\n        };\n    } finally{\n        try {\n            if (items_1_1 && !items_1_1.done && (_a = items_1.return)) _a.call(items_1);\n        } finally{\n            if (e_6) throw e_6.error;\n        }\n    }\n    return [\n        truthy,\n        falsy\n    ];\n}\nfunction updateHistoryStates(hist, stateValue) {\n    return mapValues(hist.states, function(subHist, key) {\n        if (!subHist) {\n            return undefined;\n        }\n        var subStateValue = (isString(stateValue) ? undefined : stateValue[key]) || (subHist ? subHist.current : undefined);\n        if (!subStateValue) {\n            return undefined;\n        }\n        return {\n            current: subStateValue,\n            states: updateHistoryStates(subHist, subStateValue)\n        };\n    });\n}\nfunction updateHistoryValue(hist, stateValue) {\n    return {\n        current: stateValue,\n        states: updateHistoryStates(hist, stateValue)\n    };\n}\nfunction updateContext(context, _event, assignActions, state) {\n    if (!_environment_js__WEBPACK_IMPORTED_MODULE_2__.IS_PRODUCTION) {\n        warn(!!context, \"Attempting to update undefined context\");\n    }\n    var updatedContext = context ? assignActions.reduce(function(acc, assignAction) {\n        var e_7, _a;\n        var assignment = assignAction.assignment;\n        var meta = {\n            state: state,\n            action: assignAction,\n            _event: _event\n        };\n        var partialUpdate = {};\n        if (isFunction(assignment)) {\n            partialUpdate = assignment(acc, _event.data, meta);\n        } else {\n            try {\n                for(var _b = (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__values)(Object.keys(assignment)), _c = _b.next(); !_c.done; _c = _b.next()){\n                    var key = _c.value;\n                    var propAssignment = assignment[key];\n                    partialUpdate[key] = isFunction(propAssignment) ? propAssignment(acc, _event.data, meta) : propAssignment;\n                }\n            } catch (e_7_1) {\n                e_7 = {\n                    error: e_7_1\n                };\n            } finally{\n                try {\n                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n                } finally{\n                    if (e_7) throw e_7.error;\n                }\n            }\n        }\n        return Object.assign({}, acc, partialUpdate);\n    }, context) : context;\n    return updatedContext;\n} // tslint:disable-next-line:no-empty\nvar warn = function() {};\nif (!_environment_js__WEBPACK_IMPORTED_MODULE_2__.IS_PRODUCTION) {\n    warn = function(condition, message) {\n        var error = condition instanceof Error ? condition : undefined;\n        if (!error && condition) {\n            return;\n        }\n        if (console !== undefined) {\n            var args = [\n                \"Warning: \".concat(message)\n            ];\n            if (error) {\n                args.push(error);\n            } // tslint:disable-next-line:no-console\n            console.warn.apply(console, args);\n        }\n    };\n}\nfunction isArray(value) {\n    return Array.isArray(value);\n} // tslint:disable-next-line:ban-types\nfunction isFunction(value) {\n    return typeof value === \"function\";\n}\nfunction isString(value) {\n    return typeof value === \"string\";\n}\nfunction toGuard(condition, guardMap) {\n    if (!condition) {\n        return undefined;\n    }\n    if (isString(condition)) {\n        return {\n            type: _constants_js__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_GUARD_TYPE,\n            name: condition,\n            predicate: guardMap ? guardMap[condition] : undefined\n        };\n    }\n    if (isFunction(condition)) {\n        return {\n            type: _constants_js__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_GUARD_TYPE,\n            name: condition.name,\n            predicate: condition\n        };\n    }\n    return condition;\n}\nfunction isObservable(value) {\n    try {\n        return \"subscribe\" in value && isFunction(value.subscribe);\n    } catch (e) {\n        return false;\n    }\n}\nvar symbolObservable = /*#__PURE__*/ function() {\n    return typeof Symbol === \"function\" && Symbol.observable || \"@@observable\";\n}(); // TODO: to be removed in v5, left it out just to minimize the scope of the change and maintain compatibility with older versions of integration paackages\nvar interopSymbols = (_a = {}, _a[symbolObservable] = function() {\n    return this;\n}, _a[Symbol.observable] = function() {\n    return this;\n}, _a);\nfunction isMachine(value) {\n    return !!value && \"__xstatenode\" in value;\n}\nfunction isActor(value) {\n    return !!value && typeof value.send === \"function\";\n}\nvar uniqueId = /*#__PURE__*/ function() {\n    var currentId = 0;\n    return function() {\n        currentId++;\n        return currentId.toString(16);\n    };\n}();\nfunction toEventObject(event, payload // id?: TEvent['type']\n) {\n    if (isString(event) || typeof event === \"number\") {\n        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__assign)({\n            type: event\n        }, payload);\n    }\n    return event;\n}\nfunction toSCXMLEvent(event, scxmlEvent) {\n    if (!isString(event) && \"$$type\" in event && event.$$type === \"scxml\") {\n        return event;\n    }\n    var eventObject = toEventObject(event);\n    return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__assign)({\n        name: eventObject.type,\n        data: eventObject,\n        $$type: \"scxml\",\n        type: \"external\"\n    }, scxmlEvent);\n}\nfunction toTransitionConfigArray(event, configLike) {\n    var transitions = toArrayStrict(configLike).map(function(transitionLike) {\n        if (typeof transitionLike === \"undefined\" || typeof transitionLike === \"string\" || isMachine(transitionLike)) {\n            return {\n                target: transitionLike,\n                event: event\n            };\n        }\n        return (0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,_virtual_tslib_js__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, transitionLike), {\n            event: event\n        });\n    });\n    return transitions;\n}\nfunction normalizeTarget(target) {\n    if (target === undefined || target === _constants_js__WEBPACK_IMPORTED_MODULE_0__.TARGETLESS_KEY) {\n        return undefined;\n    }\n    return toArray(target);\n}\nfunction reportUnhandledExceptionOnInvocation(originalError, currentError, id) {\n    if (!_environment_js__WEBPACK_IMPORTED_MODULE_2__.IS_PRODUCTION) {\n        var originalStackTrace = originalError.stack ? \" Stacktrace was '\".concat(originalError.stack, \"'\") : \"\";\n        if (originalError === currentError) {\n            // tslint:disable-next-line:no-console\n            console.error(\"Missing onError handler for invocation '\".concat(id, \"', error was '\").concat(originalError, \"'.\").concat(originalStackTrace));\n        } else {\n            var stackTrace = currentError.stack ? \" Stacktrace was '\".concat(currentError.stack, \"'\") : \"\"; // tslint:disable-next-line:no-console\n            console.error(\"Missing onError handler and/or unhandled exception/promise rejection for invocation '\".concat(id, \"'. \") + \"Original error: '\".concat(originalError, \"'. \").concat(originalStackTrace, \" Current error is '\").concat(currentError, \"'.\").concat(stackTrace));\n        }\n    }\n}\nfunction evaluateGuard(machine, guard, context, _event, state) {\n    var guards = machine.options.guards;\n    var guardMeta = {\n        state: state,\n        cond: guard,\n        _event: _event\n    }; // TODO: do not hardcode!\n    if (guard.type === _constants_js__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_GUARD_TYPE) {\n        return ((guards === null || guards === void 0 ? void 0 : guards[guard.name]) || guard.predicate)(context, _event.data, guardMeta);\n    }\n    var condFn = guards === null || guards === void 0 ? void 0 : guards[guard.type];\n    if (!condFn) {\n        throw new Error(\"Guard '\".concat(guard.type, \"' is not implemented on machine '\").concat(machine.id, \"'.\"));\n    }\n    return condFn(context, _event.data, guardMeta);\n}\nfunction toInvokeSource(src) {\n    if (typeof src === \"string\") {\n        return {\n            type: src\n        };\n    }\n    return src;\n}\nfunction toObserver(nextHandler, errorHandler, completionHandler) {\n    var noop = function() {};\n    var isObserver = typeof nextHandler === \"object\";\n    var self = isObserver ? nextHandler : null;\n    return {\n        next: ((isObserver ? nextHandler.next : nextHandler) || noop).bind(self),\n        error: ((isObserver ? nextHandler.error : errorHandler) || noop).bind(self),\n        complete: ((isObserver ? nextHandler.complete : completionHandler) || noop).bind(self)\n    };\n}\nfunction createInvokeId(stateNodeId, index) {\n    return \"\".concat(stateNodeId, \":invocation[\").concat(index, \"]\");\n}\nfunction isRaisableAction(action) {\n    return (action.type === _actionTypes_js__WEBPACK_IMPORTED_MODULE_3__.raise || action.type === _actionTypes_js__WEBPACK_IMPORTED_MODULE_3__.send && action.to === _types_js__WEBPACK_IMPORTED_MODULE_4__.SpecialTargets.Internal) && typeof action.delay !== \"number\";\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/xstate/es/utils.js\n");

/***/ })

};
;