import json
import os

import boto3

# Initialize the Bedrock Agent Runtime client
bedrock_agent_runtime = boto3.client('bedrock-agent-runtime')

# You MUST set these in environment variables or inline (not best practice for prod)
# Example: os.environ['BEDROCK_KB_ID'] = 'your-kb-id'

def handler(event, context):
    try:
        # Pull query from event body (POSTed JSON)
        body = json.loads(event.get('body', '{}'))
        query = body.get('query')

        # Call Bedrock Agent with keyword arguments
        response = bedrock_agent_runtime.retrieve_and_generate(
            input={
                "text": query
            },
            retrieveAndGenerateConfiguration={
                "type": "KNOWLEDGE_BASE",
                "knowledgeBaseConfiguration": {
                    "knowledgeBaseId": os.environ['BEDROCK_KB_ID'],
                    "modelArn": "arn:aws:bedrock:ca-central-1::foundation-model/anthropic.claude-3-haiku-20240307-v1:0",
                    "retrievalConfiguration": {
                        "vectorSearchConfiguration": {
                            "numberOfResults": 5
                        }
                    }
                }
            },
        )

      
        # Full summary text
        summary = response.get("output", {}).get("text", "")
        citations = response.get("citations", [])

        summary_chunks = []
        last_end = 0

        for citation in citations:
            # Extract span range
            span = citation.get("generatedResponsePart", {}).get("textResponsePart", {}).get("span", {})
            print(span)
            start, end = span.get("start"), span.get("end")
            print(start, end)
            if start is None or end is None:
                continue

            chunk_text = summary[start:end]
            print(chunk_text)

            # Extract quotes
            quotes = []
            for ref in citation.get("retrievedReferences", []):
                content = ref.get("content", {})
                meta = ref.get("metadata", {})
                if content.get("type") == "TEXT":
                    quotes.append({
                        "text": content.get("text", ""),
                        "City": meta.get("City", "unknown"),
                        "Age": meta.get("Age", "unknown"),
                    })

            summary_chunks.append({
                "summary_chunk": chunk_text,
                "quotes": quotes
            })

        return {
            'statusCode': 200,
            'headers': {
                'Access-Control-Allow-Headers': '*',
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'OPTIONS,POST,GET'
            },
            'body': json.dumps({
                "query": query,
                "summary": summary,
                "chunks": summary_chunks
            })
        }

    except Exception as e:
        print(f"Error: {e}")
        return {
            'statusCode': 500,
            'body': json.dumps({'error': str(e)})
        }
